/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for SCTP streams going through the SFU */
@org.apache.avro.specific.AvroGenerated
public class SfuSctpStreamReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6177045675581741826L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SfuSctpStreamReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for SCTP streams going through the SFU\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The service id the report belongs to\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"sfuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The provided unique identifier of the SFU\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the call\",\"default\":null},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"transportId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of the transport the RTP stream uses.\"},{\"name\":\"streamId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of the sctp stream\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The label of the sctp stream\",\"default\":null},{\"name\":\"protocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used to establish an sctp stream\",\"default\":null},{\"name\":\"sctpSmoothedRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.\",\"default\":null},{\"name\":\"sctpCongestionWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].\",\"default\":null},{\"name\":\"sctpReceiverWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].\",\"default\":null},{\"name\":\"sctpMtu\",\"type\":[\"null\",\"int\"],\"doc\":\"The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].\",\"default\":null},{\"name\":\"sctpUnackData\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].\",\"default\":null},{\"name\":\"messageReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of message received on the corresponded SCTP stream.\",\"default\":null},{\"name\":\"messageSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of message sent on the corresponded SCTP stream.\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The number of bytes received on the corresponded SCTP stream.\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The number of bytes sent on the corresponded SCTP stream.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The service id the report belongs to */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The provided unique identifier of the SFU */
   private java.lang.String sfuId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The id of the transport the RTP stream uses. */
   private java.lang.String transportId;
  /** The id of the sctp stream */
   private java.lang.String streamId;
  /** The label of the sctp stream */
   private java.lang.String label;
  /** The protocol used to establish an sctp stream */
   private java.lang.String protocol;
  /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined. */
   private java.lang.Double sctpSmoothedRoundTripTime;
  /** The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458]. */
   private java.lang.Double sctpCongestionWindow;
  /** The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458]. */
   private java.lang.Double sctpReceiverWindow;
  /** The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458]. */
   private java.lang.Integer sctpMtu;
  /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458]. */
   private java.lang.Integer sctpUnackData;
  /** The number of message received on the corresponded SCTP stream. */
   private java.lang.Integer messageReceived;
  /** The number of message sent on the corresponded SCTP stream. */
   private java.lang.Integer messageSent;
  /** The number of bytes received on the corresponded SCTP stream. */
   private java.lang.Long bytesReceived;
  /** The number of bytes sent on the corresponded SCTP stream. */
   private java.lang.Long bytesSent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SfuSctpStreamReport() {}

  /**
   * All-args constructor.
   * @param serviceId The service id the report belongs to
   * @param mediaUnitId The media unit id the report belongs to
   * @param sfuId The provided unique identifier of the SFU
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param transportId The id of the transport the RTP stream uses.
   * @param streamId The id of the sctp stream
   * @param label The label of the sctp stream
   * @param protocol The protocol used to establish an sctp stream
   * @param sctpSmoothedRoundTripTime The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
   * @param sctpCongestionWindow The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
   * @param sctpReceiverWindow The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
   * @param sctpMtu The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
   * @param sctpUnackData The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
   * @param messageReceived The number of message received on the corresponded SCTP stream.
   * @param messageSent The number of message sent on the corresponded SCTP stream.
   * @param bytesReceived The number of bytes received on the corresponded SCTP stream.
   * @param bytesSent The number of bytes sent on the corresponded SCTP stream.
   */
  public SfuSctpStreamReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String sfuId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String transportId, java.lang.String streamId, java.lang.String label, java.lang.String protocol, java.lang.Double sctpSmoothedRoundTripTime, java.lang.Double sctpCongestionWindow, java.lang.Double sctpReceiverWindow, java.lang.Integer sctpMtu, java.lang.Integer sctpUnackData, java.lang.Integer messageReceived, java.lang.Integer messageSent, java.lang.Long bytesReceived, java.lang.Long bytesSent) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.sfuId = sfuId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.transportId = transportId;
    this.streamId = streamId;
    this.label = label;
    this.protocol = protocol;
    this.sctpSmoothedRoundTripTime = sctpSmoothedRoundTripTime;
    this.sctpCongestionWindow = sctpCongestionWindow;
    this.sctpReceiverWindow = sctpReceiverWindow;
    this.sctpMtu = sctpMtu;
    this.sctpUnackData = sctpUnackData;
    this.messageReceived = messageReceived;
    this.messageSent = messageSent;
    this.bytesReceived = bytesReceived;
    this.bytesSent = bytesSent;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return sfuId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return transportId;
    case 8: return streamId;
    case 9: return label;
    case 10: return protocol;
    case 11: return sctpSmoothedRoundTripTime;
    case 12: return sctpCongestionWindow;
    case 13: return sctpReceiverWindow;
    case 14: return sctpMtu;
    case 15: return sctpUnackData;
    case 16: return messageReceived;
    case 17: return messageSent;
    case 18: return bytesReceived;
    case 19: return bytesSent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: sfuId = (java.lang.String)value$; break;
    case 3: marker = (java.lang.String)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: callId = (java.lang.String)value$; break;
    case 6: roomId = (java.lang.String)value$; break;
    case 7: transportId = (java.lang.String)value$; break;
    case 8: streamId = (java.lang.String)value$; break;
    case 9: label = (java.lang.String)value$; break;
    case 10: protocol = (java.lang.String)value$; break;
    case 11: sctpSmoothedRoundTripTime = (java.lang.Double)value$; break;
    case 12: sctpCongestionWindow = (java.lang.Double)value$; break;
    case 13: sctpReceiverWindow = (java.lang.Double)value$; break;
    case 14: sctpMtu = (java.lang.Integer)value$; break;
    case 15: sctpUnackData = (java.lang.Integer)value$; break;
    case 16: messageReceived = (java.lang.Integer)value$; break;
    case 17: messageSent = (java.lang.Integer)value$; break;
    case 18: bytesReceived = (java.lang.Long)value$; break;
    case 19: bytesSent = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The service id the report belongs to
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'sfuId' field.
   * @return The provided unique identifier of the SFU
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'transportId' field.
   * @return The id of the transport the RTP stream uses.
   */
  public java.lang.String getTransportId() {
    return transportId;
  }


  /**
   * Gets the value of the 'streamId' field.
   * @return The id of the sctp stream
   */
  public java.lang.String getStreamId() {
    return streamId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The label of the sctp stream
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'protocol' field.
   * @return The protocol used to establish an sctp stream
   */
  public java.lang.String getProtocol() {
    return protocol;
  }


  /**
   * Gets the value of the 'sctpSmoothedRoundTripTime' field.
   * @return The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
   */
  public java.lang.Double getSctpSmoothedRoundTripTime() {
    return sctpSmoothedRoundTripTime;
  }


  /**
   * Gets the value of the 'sctpCongestionWindow' field.
   * @return The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
   */
  public java.lang.Double getSctpCongestionWindow() {
    return sctpCongestionWindow;
  }


  /**
   * Gets the value of the 'sctpReceiverWindow' field.
   * @return The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
   */
  public java.lang.Double getSctpReceiverWindow() {
    return sctpReceiverWindow;
  }


  /**
   * Gets the value of the 'sctpMtu' field.
   * @return The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
   */
  public java.lang.Integer getSctpMtu() {
    return sctpMtu;
  }


  /**
   * Gets the value of the 'sctpUnackData' field.
   * @return The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
   */
  public java.lang.Integer getSctpUnackData() {
    return sctpUnackData;
  }


  /**
   * Gets the value of the 'messageReceived' field.
   * @return The number of message received on the corresponded SCTP stream.
   */
  public java.lang.Integer getMessageReceived() {
    return messageReceived;
  }


  /**
   * Gets the value of the 'messageSent' field.
   * @return The number of message sent on the corresponded SCTP stream.
   */
  public java.lang.Integer getMessageSent() {
    return messageSent;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return The number of bytes received on the corresponded SCTP stream.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return The number of bytes sent on the corresponded SCTP stream.
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }


  /**
   * Creates a new SfuSctpStreamReport RecordBuilder.
   * @return A new SfuSctpStreamReport RecordBuilder
   */
  public static SfuSctpStreamReport.Builder newBuilder() {
    return new SfuSctpStreamReport.Builder();
  }

  /**
   * Creates a new SfuSctpStreamReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SfuSctpStreamReport RecordBuilder
   */
  public static SfuSctpStreamReport.Builder newBuilder(SfuSctpStreamReport.Builder other) {
    return new SfuSctpStreamReport.Builder(other);
  }

  /**
   * Creates a new SfuSctpStreamReport RecordBuilder by copying an existing SfuSctpStreamReport instance.
   * @param other The existing instance to copy.
   * @return A new SfuSctpStreamReport RecordBuilder
   */
  public static SfuSctpStreamReport.Builder newBuilder(SfuSctpStreamReport other) {
    return new SfuSctpStreamReport.Builder(other);
  }

  /**
   * RecordBuilder for SfuSctpStreamReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SfuSctpStreamReport>
    implements org.apache.avro.data.RecordBuilder<SfuSctpStreamReport> {

    /** The service id the report belongs to */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The provided unique identifier of the SFU */
    private java.lang.String sfuId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The id of the transport the RTP stream uses. */
    private java.lang.String transportId;
    /** The id of the sctp stream */
    private java.lang.String streamId;
    /** The label of the sctp stream */
    private java.lang.String label;
    /** The protocol used to establish an sctp stream */
    private java.lang.String protocol;
    /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined. */
    private java.lang.Double sctpSmoothedRoundTripTime;
    /** The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458]. */
    private java.lang.Double sctpCongestionWindow;
    /** The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458]. */
    private java.lang.Double sctpReceiverWindow;
    /** The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458]. */
    private java.lang.Integer sctpMtu;
    /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458]. */
    private java.lang.Integer sctpUnackData;
    /** The number of message received on the corresponded SCTP stream. */
    private java.lang.Integer messageReceived;
    /** The number of message sent on the corresponded SCTP stream. */
    private java.lang.Integer messageSent;
    /** The number of bytes received on the corresponded SCTP stream. */
    private java.lang.Long bytesReceived;
    /** The number of bytes sent on the corresponded SCTP stream. */
    private java.lang.Long bytesSent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SfuSctpStreamReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transportId)) {
        this.transportId = data().deepCopy(fields()[7].schema(), other.transportId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.streamId)) {
        this.streamId = data().deepCopy(fields()[8].schema(), other.streamId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.protocol)) {
        this.protocol = data().deepCopy(fields()[10].schema(), other.protocol);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[11].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[12].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[13].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[14].schema(), other.sctpMtu);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[15].schema(), other.sctpUnackData);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.messageReceived)) {
        this.messageReceived = data().deepCopy(fields()[16].schema(), other.messageReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.messageSent)) {
        this.messageSent = data().deepCopy(fields()[17].schema(), other.messageSent);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[18].schema(), other.bytesReceived);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[19].schema(), other.bytesSent);
        fieldSetFlags()[19] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SfuSctpStreamReport instance
     * @param other The existing instance to copy.
     */
    private Builder(SfuSctpStreamReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transportId)) {
        this.transportId = data().deepCopy(fields()[7].schema(), other.transportId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.streamId)) {
        this.streamId = data().deepCopy(fields()[8].schema(), other.streamId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.protocol)) {
        this.protocol = data().deepCopy(fields()[10].schema(), other.protocol);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[11].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[12].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[13].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[14].schema(), other.sctpMtu);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[15].schema(), other.sctpUnackData);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.messageReceived)) {
        this.messageReceived = data().deepCopy(fields()[16].schema(), other.messageReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.messageSent)) {
        this.messageSent = data().deepCopy(fields()[17].schema(), other.messageSent);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[18].schema(), other.bytesReceived);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[19].schema(), other.bytesSent);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The service id the report belongs to
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }

    /**
      * Sets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[2], value);
      this.sfuId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The provided unique identifier of the SFU
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setMarker(java.lang.String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setCallId(java.lang.String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }

    /**
      * Sets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setTransportId(java.lang.String value) {
      validate(fields()[7], value);
      this.transportId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * The id of the transport the RTP stream uses.
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamId' field.
      * The id of the sctp stream
      * @return The value.
      */
    public java.lang.String getStreamId() {
      return streamId;
    }

    /**
      * Sets the value of the 'streamId' field.
      * The id of the sctp stream
      * @param value The value of 'streamId'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setStreamId(java.lang.String value) {
      validate(fields()[8], value);
      this.streamId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'streamId' field has been set.
      * The id of the sctp stream
      * @return True if the 'streamId' field has been set, false otherwise.
      */
    public boolean hasStreamId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'streamId' field.
      * The id of the sctp stream
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearStreamId() {
      streamId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The label of the sctp stream
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The label of the sctp stream
      * @param value The value of 'label'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The label of the sctp stream
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The label of the sctp stream
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * The protocol used to establish an sctp stream
      * @return The value.
      */
    public java.lang.String getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * The protocol used to establish an sctp stream
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setProtocol(java.lang.String value) {
      validate(fields()[10], value);
      this.protocol = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * The protocol used to establish an sctp stream
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'protocol' field.
      * The protocol used to establish an sctp stream
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
      * @return The value.
      */
    public java.lang.Double getSctpSmoothedRoundTripTime() {
      return sctpSmoothedRoundTripTime;
    }

    /**
      * Sets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
      * @param value The value of 'sctpSmoothedRoundTripTime'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSctpSmoothedRoundTripTime(java.lang.Double value) {
      validate(fields()[11], value);
      this.sctpSmoothedRoundTripTime = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpSmoothedRoundTripTime' field has been set.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
      * @return True if the 'sctpSmoothedRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasSctpSmoothedRoundTripTime() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. If there has been no round-trip time measurements yet, this value is undefined.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSctpSmoothedRoundTripTime() {
      sctpSmoothedRoundTripTime = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
      * @return The value.
      */
    public java.lang.Double getSctpCongestionWindow() {
      return sctpCongestionWindow;
    }

    /**
      * Sets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
      * @param value The value of 'sctpCongestionWindow'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSctpCongestionWindow(java.lang.Double value) {
      validate(fields()[12], value);
      this.sctpCongestionWindow = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpCongestionWindow' field has been set.
      * The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
      * @return True if the 'sctpCongestionWindow' field has been set, false otherwise.
      */
    public boolean hasSctpCongestionWindow() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd defined in [RFC6458].
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSctpCongestionWindow() {
      sctpCongestionWindow = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
      * @return The value.
      */
    public java.lang.Double getSctpReceiverWindow() {
      return sctpReceiverWindow;
    }

    /**
      * Sets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
      * @param value The value of 'sctpReceiverWindow'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSctpReceiverWindow(java.lang.Double value) {
      validate(fields()[13], value);
      this.sctpReceiverWindow = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpReceiverWindow' field has been set.
      * The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
      * @return True if the 'sctpReceiverWindow' field has been set, false otherwise.
      */
    public boolean hasSctpReceiverWindow() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd defined in [RFC6458].
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSctpReceiverWindow() {
      sctpReceiverWindow = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
      * @return The value.
      */
    public java.lang.Integer getSctpMtu() {
      return sctpMtu;
    }

    /**
      * Sets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
      * @param value The value of 'sctpMtu'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSctpMtu(java.lang.Integer value) {
      validate(fields()[14], value);
      this.sctpMtu = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpMtu' field has been set.
      * The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
      * @return True if the 'sctpMtu' field has been set, false otherwise.
      */
    public boolean hasSctpMtu() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu defined in [RFC6458].
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSctpMtu() {
      sctpMtu = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
      * @return The value.
      */
    public java.lang.Integer getSctpUnackData() {
      return sctpUnackData;
    }

    /**
      * Sets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
      * @param value The value of 'sctpUnackData'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setSctpUnackData(java.lang.Integer value) {
      validate(fields()[15], value);
      this.sctpUnackData = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpUnackData' field has been set.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
      * @return True if the 'sctpUnackData' field has been set, false otherwise.
      */
    public boolean hasSctpUnackData() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata defined in [RFC6458].
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearSctpUnackData() {
      sctpUnackData = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageReceived' field.
      * The number of message received on the corresponded SCTP stream.
      * @return The value.
      */
    public java.lang.Integer getMessageReceived() {
      return messageReceived;
    }

    /**
      * Sets the value of the 'messageReceived' field.
      * The number of message received on the corresponded SCTP stream.
      * @param value The value of 'messageReceived'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setMessageReceived(java.lang.Integer value) {
      validate(fields()[16], value);
      this.messageReceived = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'messageReceived' field has been set.
      * The number of message received on the corresponded SCTP stream.
      * @return True if the 'messageReceived' field has been set, false otherwise.
      */
    public boolean hasMessageReceived() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'messageReceived' field.
      * The number of message received on the corresponded SCTP stream.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearMessageReceived() {
      messageReceived = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageSent' field.
      * The number of message sent on the corresponded SCTP stream.
      * @return The value.
      */
    public java.lang.Integer getMessageSent() {
      return messageSent;
    }

    /**
      * Sets the value of the 'messageSent' field.
      * The number of message sent on the corresponded SCTP stream.
      * @param value The value of 'messageSent'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setMessageSent(java.lang.Integer value) {
      validate(fields()[17], value);
      this.messageSent = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'messageSent' field has been set.
      * The number of message sent on the corresponded SCTP stream.
      * @return True if the 'messageSent' field has been set, false otherwise.
      */
    public boolean hasMessageSent() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'messageSent' field.
      * The number of message sent on the corresponded SCTP stream.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearMessageSent() {
      messageSent = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * The number of bytes received on the corresponded SCTP stream.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * The number of bytes received on the corresponded SCTP stream.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[18], value);
      this.bytesReceived = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * The number of bytes received on the corresponded SCTP stream.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * The number of bytes received on the corresponded SCTP stream.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * The number of bytes sent on the corresponded SCTP stream.
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * The number of bytes sent on the corresponded SCTP stream.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[19], value);
      this.bytesSent = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * The number of bytes sent on the corresponded SCTP stream.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * The number of bytes sent on the corresponded SCTP stream.
      * @return This builder.
      */
    public SfuSctpStreamReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    public SfuSctpStreamReport build() {
      try {
        SfuSctpStreamReport record = new SfuSctpStreamReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.sfuId = fieldSetFlags()[2] ? this.sfuId : (java.lang.String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (java.lang.String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (java.lang.String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (java.lang.String) defaultValue(fields()[6]);
        record.transportId = fieldSetFlags()[7] ? this.transportId : (java.lang.String) defaultValue(fields()[7]);
        record.streamId = fieldSetFlags()[8] ? this.streamId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.protocol = fieldSetFlags()[10] ? this.protocol : (java.lang.String) defaultValue(fields()[10]);
        record.sctpSmoothedRoundTripTime = fieldSetFlags()[11] ? this.sctpSmoothedRoundTripTime : (java.lang.Double) defaultValue(fields()[11]);
        record.sctpCongestionWindow = fieldSetFlags()[12] ? this.sctpCongestionWindow : (java.lang.Double) defaultValue(fields()[12]);
        record.sctpReceiverWindow = fieldSetFlags()[13] ? this.sctpReceiverWindow : (java.lang.Double) defaultValue(fields()[13]);
        record.sctpMtu = fieldSetFlags()[14] ? this.sctpMtu : (java.lang.Integer) defaultValue(fields()[14]);
        record.sctpUnackData = fieldSetFlags()[15] ? this.sctpUnackData : (java.lang.Integer) defaultValue(fields()[15]);
        record.messageReceived = fieldSetFlags()[16] ? this.messageReceived : (java.lang.Integer) defaultValue(fields()[16]);
        record.messageSent = fieldSetFlags()[17] ? this.messageSent : (java.lang.Integer) defaultValue(fields()[17]);
        record.bytesReceived = fieldSetFlags()[18] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[18]);
        record.bytesSent = fieldSetFlags()[19] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[19]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
