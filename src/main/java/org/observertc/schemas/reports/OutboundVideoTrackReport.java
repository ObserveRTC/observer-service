/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A Report created for Outbound Video Tracks. A combination of Video source, Codec metadata carrying outbound and remote inbound RTP stat measurements */
@org.apache.avro.specific.AvroGenerated
public class OutboundVideoTrackReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7869018583538331087L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutboundVideoTrackReport\",\"namespace\":\"org.observertc.schemas.reports\",\"doc\":\"A Report created for Outbound Video Tracks. A combination of Video source, Codec metadata carrying outbound and remote inbound RTP stat measurements\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is labeled with\",\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track\",\"default\":null},{\"name\":\"sfuStreamId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the Sfu stream corresponds to the outbound track\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The RTP SSRC field\"},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets sent on the corresponded synchronization source\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes sent on the corresponded synchronization source\",\"default\":null},{\"name\":\"rid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" The rid encoding parameter of the corresponded synchronization source\",\"default\":null},{\"name\":\"lastPacketSentTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\" the timestamp the last packet was sent. (UTC epoch in ms)\",\"default\":null},{\"name\":\"headerBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"packetsDiscardedOnSend\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"bytesDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"retransmittedPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"retransmittedBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).\",\"default\":null},{\"name\":\"targetBitrate\",\"type\":[\"null\",\"long\"],\"doc\":\"Reflects the current encoder target in bits per second.\",\"default\":null},{\"name\":\"totalEncodedBytesTarget\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets\",\"default\":null},{\"name\":\"frameWidth\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the height of the last encoded frame sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"frameHeight\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the width of the last encoded frame sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"frameBitDepth\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesPerSecond\",\"type\":[\"null\",\"double\"],\"doc\":\"The number of encoded frames over the last second sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"hugeFramesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames encoded over the corresponded synchronization source\",\"default\":null},{\"name\":\"keyFramesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of keyframes sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesDiscardedOnSend\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames discarded before sending over the corresponded synchronization source\",\"default\":null},{\"name\":\"qpSum\",\"type\":[\"null\",\"long\"],\"doc\":\"The sum of QP values encoded by the encoder corresponded to the synchronization source\",\"default\":null},{\"name\":\"totalEncodeTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of encoding time spent by the encoder corresponded to the synchronization source\",\"default\":null},{\"name\":\"totalPacketSendDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source\",\"default\":null},{\"name\":\"averageRtcpInterval\",\"type\":[\"null\",\"double\"],\"doc\":\"The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"qualityLimitationDurationCPU\",\"type\":[\"null\",\"double\"],\"doc\":\"Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU\",\"default\":null},{\"name\":\"qualityLimitationDurationNone\",\"type\":[\"null\",\"double\"],\"doc\":\"Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state\",\"default\":null},{\"name\":\"qualityLimitationDurationBandwidth\",\"type\":[\"null\",\"double\"],\"doc\":\"Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth\",\"default\":null},{\"name\":\"qualityLimitationDurationOther\",\"type\":[\"null\",\"double\"],\"doc\":\"Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor\",\"default\":null},{\"name\":\"qualityLimitationReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Indicate a reason for the corresponding synchronization source (ssrc) quality is limited\",\"default\":null},{\"name\":\"qualityLimitationResolutionChanges\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"perDscpPacketsSent\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of full inter requests happened over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of picture loss indication happened received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"s","liCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of slice loss indication happened over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"encoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Indicate the name of the encoder implementation library\",\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded synchronization source\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of bytes received on the corresponded synchronization source\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The corresponded synchronization source reported jitter\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets missed the playout point and therefore discarded by the jitterbuffer\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source\",\"default\":null},{\"name\":\"burstPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost in burst (RFC6958)\",\"default\":null},{\"name\":\"burstPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets discarded in burst (RFC6958)\",\"default\":null},{\"name\":\"burstLossCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsLost on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"framesDropped\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames dropped over the corresponded synchronization source\",\"default\":null},{\"name\":\"partialFramesLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of partial frames lost over the corresponded synchronization source\",\"default\":null},{\"name\":\"fullFramesLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of full frames lost over the corresponded synchronization source\",\"default\":null},{\"name\":\"roundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"totalRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of RTT measurements belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"fractionLost\",\"type\":[\"null\",\"double\"],\"doc\":\"The receiver reported fractional lost belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"reportsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of RR reports received, which is the base of the remote inbound calculation on this source\",\"default\":null},{\"name\":\"roundTripTimeMeasurements\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of calculated RR measurements received on this source\",\"default\":null},{\"name\":\"relayedSource\",\"type\":[\"null\",\"boolean\"],\"doc\":\"True if the corresponded media source is remote, false otherwise (or null depending on browser and version)\",\"default\":null},{\"name\":\"encodedFrameWidth\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFrameHeight\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFrameBitDepth\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFramesPerSecond\",\"type\":[\"null\",\"double\"],\"doc\":\"Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Flag represents if the sender ended the media stream track or not.\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The type of the payload the RTP packet SSRC belongs to\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the MIME type of the codec (e.g.: video/vp8)\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The negotiated clock rate the RTP timestamp is generated of\",\"default\":null},{\"name\":\"channels\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The a=fmtp line in the SDP corresponding to the codec\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OutboundVideoTrackReport> ENCODER =
      new BinaryMessageEncoder<OutboundVideoTrackReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OutboundVideoTrackReport> DECODER =
      new BinaryMessageDecoder<OutboundVideoTrackReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OutboundVideoTrackReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OutboundVideoTrackReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OutboundVideoTrackReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OutboundVideoTrackReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OutboundVideoTrackReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OutboundVideoTrackReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OutboundVideoTrackReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OutboundVideoTrackReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the service */
  private java.lang.String serviceId;
  /** The media unit id the report belongs to */
  private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
  private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
  private long timestamp;
  /** The generated unique identifier of the call */
  private java.lang.String callId;
  /** webrtc app provided room id */
  private java.lang.String roomId;
  /** The generated unique identifier of the client */
  private java.lang.String clientId;
  /** webrtc app provided user identifier */
  private java.lang.String userId;
  /** The unique identifier of the peer connection */
  private java.lang.String peerConnectionId;
  /** The webrtc app provided label the peer connection is labeled with */
  private java.lang.String label;
  /** The id of the track */
  private java.lang.String trackId;
  /** The id of the Sfu stream corresponds to the outbound track */
  private java.lang.String sfuStreamId;
  /** The sequence number of the sample the report is generated from */
  private int sampleSeq;
  /** The RTP SSRC field */
  private long ssrc;
  /** The total number of packets sent on the corresponded synchronization source */
  private java.lang.Integer packetsSent;
  /** The total number of bytes sent on the corresponded synchronization source */
  private java.lang.Long bytesSent;
  /**  The rid encoding parameter of the corresponded synchronization source */
  private java.lang.String rid;
  /**  the timestamp the last packet was sent. (UTC epoch in ms) */
  private java.lang.Long lastPacketSentTimestamp;
  /** Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
  private java.lang.Long headerBytesSent;
  /** Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
  private java.lang.Integer packetsDiscardedOnSend;
  /** Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
  private java.lang.Long bytesDiscardedOnSend;
  /** Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
  private java.lang.Integer fecPacketsSent;
  /** Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
  private java.lang.Integer retransmittedPacketsSent;
  /** Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc). */
  private java.lang.Long retransmittedBytesSent;
  /** Reflects the current encoder target in bits per second. */
  private java.lang.Long targetBitrate;
  /** The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
  private java.lang.Long totalEncodedBytesTarget;
  /** Represents the height of the last encoded frame sent over the corresponded synchronization source */
  private java.lang.Integer frameWidth;
  /** Represents the width of the last encoded frame sent over the corresponded synchronization source */
  private java.lang.Integer frameHeight;
  /** Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source */
  private java.lang.Integer frameBitDepth;
  /** The number of encoded frames over the last second sent over the corresponded synchronization source */
  private java.lang.Double framesPerSecond;
  /** The number of frames sent over the corresponded synchronization source */
  private java.lang.Integer framesSent;
  /** The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source */
  private java.lang.Integer hugeFramesSent;
  /** The number of frames encoded over the corresponded synchronization source */
  private java.lang.Integer framesEncoded;
  /** The number of keyframes sent over the corresponded synchronization source */
  private java.lang.Integer keyFramesEncoded;
  /** The number of frames discarded before sending over the corresponded synchronization source */
  private java.lang.Integer framesDiscardedOnSend;
  /** The sum of QP values encoded by the encoder corresponded to the synchronization source */
  private java.lang.Long qpSum;
  /** The sum of encoding time spent by the encoder corresponded to the synchronization source */
  private java.lang.Double totalEncodeTime;
  /** The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
  private java.lang.Double totalPacketSendDelay;
  /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
  private java.lang.Double averageRtcpInterval;
  /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU */
  private java.lang.Double qualityLimitationDurationCPU;
  /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state */
  private java.lang.Double qualityLimitationDurationNone;
  /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth */
  private java.lang.Double qualityLimitationDurationBandwidth;
  /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor */
  private java.lang.Double qualityLimitationDurationOther;
  /** Indicate a reason for the corresponding synchronization source (ssrc) quality is limited */
  private java.lang.String qualityLimitationReason;
  /** The number of quality limiatation changes happened for the corresponding synchronization source (ssrc) */
  private java.lang.Integer qualityLimitationResolutionChanges;
  /** The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
  private java.lang.Double perDscpPacketsSent;
  /** Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc) */
  private java.lang.Integer nackCount;
  /** The number of full inter requests happened over the corresponding synchronization source (ssrc) */
  private java.lang.Integer firCount;
  /** The number of picture loss indication happened received over the corresponding synchronization source (ssrc) */
  private java.lang.Integer pliCount;
  /** The number of slice loss indication happened over the corresponding synchronization source (ssrc) */
  private java.lang.Integer sliCount;
  /** Indicate the name of the encoder implementation library */
  private java.lang.String encoderImplementation;
  /** The total number of packets received on the corresponded synchronization source */
  private java.lang.Integer packetsReceived;
  /** The total number of bytes received on the corresponded synchronization source */
  private java.lang.Integer packetsLost;
  /** The corresponded synchronization source reported jitter */
  private java.lang.Double jitter;
  /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
  private java.lang.Integer packetsDiscarded;
  /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
  private java.lang.Integer packetsRepaired;
  /** The total number of packets lost in burst (RFC6958) */
  private java.lang.Integer burstPacketsLost;
  /** The total number of packets discarded in burst (RFC6958) */
  private java.lang.Integer burstPacketsDiscarded;
  /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
  private java.lang.Integer burstLossCount;
  /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
  private java.lang.Integer burstDiscardCount;
  /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
  private java.lang.Double burstLossRate;
  /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
  private java.lang.Double burstDiscardRate;
  /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
  private java.lang.Double gapLossRate;
  /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
  private java.lang.Double gapDiscardRate;
  /** The number of frames dropped over the corresponded synchronization source */
  private java.lang.Integer framesDropped;
  /** The number of partial frames lost over the corresponded synchronization source */
  private java.lang.Integer partialFramesLost;
  /** The number of full frames lost over the corresponded synchronization source */
  private java.lang.Integer fullFramesLost;
  /** RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
  private java.lang.Double roundTripTime;
  /** The sum of RTT measurements belongs to the corresponded synchronization source */
  private java.lang.Double totalRoundTripTime;
  /** The receiver reported fractional lost belongs to the corresponded synchronization source */
  private java.lang.Double fractionLost;
  /** The total number of RR reports received, which is the base of the remote inbound calculation on this source */
  private java.lang.Integer reportsReceived;
  /** The total number of calculated RR measurements received on this source */
  private java.lang.Integer roundTripTimeMeasurements;
  /** True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
  private java.lang.Boolean relayedSource;
  /** Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc) */
  private java.lang.Integer encodedFrameWidth;
  /** Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc) */
  private java.lang.Integer encodedFrameHeight;
  /** Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
  private java.lang.Integer encodedFrameBitDepth;
  /** Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
  private java.lang.Double encodedFramesPerSecond;
  /** Flag represents if the sender ended the media stream track or not. */
  private java.lang.Boolean ended;
  /** The type of the payload the RTP packet SSRC belongs to */
  private java.lang.Integer payloadType;
  /** the MIME type of the codec (e.g.: video/vp8) */
  private java.lang.String mimeType;
  /** The negotiated clock rate the RTP timestamp is generated of */
  private java.lang.Long clockRate;
  /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
  private java.lang.Integer channels;
  /** The a=fmtp line in the SDP corresponding to the codec */
  private java.lang.String sdpFmtpLine;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OutboundVideoTrackReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is labeled with
   * @param trackId The id of the track
   * @param sfuStreamId The id of the Sfu stream corresponds to the outbound track
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param ssrc The RTP SSRC field
   * @param packetsSent The total number of packets sent on the corresponded synchronization source
   * @param bytesSent The total number of bytes sent on the corresponded synchronization source
   * @param rid  The rid encoding parameter of the corresponded synchronization source
   * @param lastPacketSentTimestamp  the timestamp the last packet was sent. (UTC epoch in ms)
   * @param headerBytesSent Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   * @param packetsDiscardedOnSend Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   * @param bytesDiscardedOnSend Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   * @param fecPacketsSent Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   * @param retransmittedPacketsSent Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   * @param retransmittedBytesSent Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
   * @param targetBitrate Reflects the current encoder target in bits per second.
   * @param totalEncodedBytesTarget The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   * @param frameWidth Represents the height of the last encoded frame sent over the corresponded synchronization source
   * @param frameHeight Represents the width of the last encoded frame sent over the corresponded synchronization source
   * @param frameBitDepth Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
   * @param framesPerSecond The number of encoded frames over the last second sent over the corresponded synchronization source
   * @param framesSent The number of frames sent over the corresponded synchronization source
   * @param hugeFramesSent The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
   * @param framesEncoded The number of frames encoded over the corresponded synchronization source
   * @param keyFramesEncoded The number of keyframes sent over the corresponded synchronization source
   * @param framesDiscardedOnSend The number of frames discarded before sending over the corresponded synchronization source
   * @param qpSum The sum of QP values encoded by the encoder corresponded to the synchronization source
   * @param totalEncodeTime The sum of encoding time spent by the encoder corresponded to the synchronization source
   * @param totalPacketSendDelay The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   * @param averageRtcpInterval The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   * @param qualityLimitationDurationCPU Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
   * @param qualityLimitationDurationNone Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
   * @param qualityLimitationDurationBandwidth Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
   * @param qualityLimitationDurationOther Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
   * @param qualityLimitationReason Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
   * @param qualityLimitationResolutionChanges The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
   * @param perDscpPacketsSent The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   * @param nackCount Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
   * @param firCount The number of full inter requests happened over the corresponding synchronization source (ssrc)
   * @param pliCount The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
   * @param sliCount The number of slice loss indication happened over the corresponding synchronization source (ssrc)
   * @param encoderImplementation Indicate the name of the encoder implementation library
   * @param packetsReceived The total number of packets received on the corresponded synchronization source
   * @param packetsLost The total number of bytes received on the corresponded synchronization source
   * @param jitter The corresponded synchronization source reported jitter
   * @param packetsDiscarded The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   * @param packetsRepaired The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   * @param burstPacketsLost The total number of packets lost in burst (RFC6958)
   * @param burstPacketsDiscarded The total number of packets discarded in burst (RFC6958)
   * @param burstLossCount The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   * @param burstDiscardCount The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   * @param burstLossRate The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param burstDiscardRate The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapLossRate The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapDiscardRate The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param framesDropped The number of frames dropped over the corresponded synchronization source
   * @param partialFramesLost The number of partial frames lost over the corresponded synchronization source
   * @param fullFramesLost The number of full frames lost over the corresponded synchronization source
   * @param roundTripTime RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   * @param totalRoundTripTime The sum of RTT measurements belongs to the corresponded synchronization source
   * @param fractionLost The receiver reported fractional lost belongs to the corresponded synchronization source
   * @param reportsReceived The total number of RR reports received, which is the base of the remote inbound calculation on this source
   * @param roundTripTimeMeasurements The total number of calculated RR measurements received on this source
   * @param relayedSource True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   * @param encodedFrameWidth Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
   * @param encodedFrameHeight Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
   * @param encodedFrameBitDepth Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   * @param encodedFramesPerSecond Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   * @param ended Flag represents if the sender ended the media stream track or not.
   * @param payloadType The type of the payload the RTP packet SSRC belongs to
   * @param mimeType the MIME type of the codec (e.g.: video/vp8)
   * @param clockRate The negotiated clock rate the RTP timestamp is generated of
   * @param channels The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   * @param sdpFmtpLine The a=fmtp line in the SDP corresponding to the codec
   */
  public OutboundVideoTrackReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String label, java.lang.String trackId, java.lang.String sfuStreamId, java.lang.Integer sampleSeq, java.lang.Long ssrc, java.lang.Integer packetsSent, java.lang.Long bytesSent, java.lang.String rid, java.lang.Long lastPacketSentTimestamp, java.lang.Long headerBytesSent, java.lang.Integer packetsDiscardedOnSend, java.lang.Long bytesDiscardedOnSend, java.lang.Integer fecPacketsSent, java.lang.Integer retransmittedPacketsSent, java.lang.Long retransmittedBytesSent, java.lang.Long targetBitrate, java.lang.Long totalEncodedBytesTarget, java.lang.Integer frameWidth, java.lang.Integer frameHeight, java.lang.Integer frameBitDepth, java.lang.Double framesPerSecond, java.lang.Integer framesSent, java.lang.Integer hugeFramesSent, java.lang.Integer framesEncoded, java.lang.Integer keyFramesEncoded, java.lang.Integer framesDiscardedOnSend, java.lang.Long qpSum, java.lang.Double totalEncodeTime, java.lang.Double totalPacketSendDelay, java.lang.Double averageRtcpInterval, java.lang.Double qualityLimitationDurationCPU, java.lang.Double qualityLimitationDurationNone, java.lang.Double qualityLimitationDurationBandwidth, java.lang.Double qualityLimitationDurationOther, java.lang.String qualityLimitationReason, java.lang.Integer qualityLimitationResolutionChanges, java.lang.Double perDscpPacketsSent, java.lang.Integer nackCount, java.lang.Integer firCount, java.lang.Integer pliCount, java.lang.Integer sliCount, java.lang.String encoderImplementation, java.lang.Integer packetsReceived, java.lang.Integer packetsLost, java.lang.Double jitter, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRepaired, java.lang.Integer burstPacketsLost, java.lang.Integer burstPacketsDiscarded, java.lang.Integer burstLossCount, java.lang.Integer burstDiscardCount, java.lang.Double burstLossRate, java.lang.Double burstDiscardRate, java.lang.Double gapLossRate, java.lang.Double gapDiscardRate, java.lang.Integer framesDropped, java.lang.Integer partialFramesLost, java.lang.Integer fullFramesLost, java.lang.Double roundTripTime, java.lang.Double totalRoundTripTime, java.lang.Double fractionLost, java.lang.Integer reportsReceived, java.lang.Integer roundTripTimeMeasurements, java.lang.Boolean relayedSource, java.lang.Integer encodedFrameWidth, java.lang.Integer encodedFrameHeight, java.lang.Integer encodedFrameBitDepth, java.lang.Double encodedFramesPerSecond, java.lang.Boolean ended, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.Integer channels, java.lang.String sdpFmtpLine) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.trackId = trackId;
    this.sfuStreamId = sfuStreamId;
    this.sampleSeq = sampleSeq;
    this.ssrc = ssrc;
    this.packetsSent = packetsSent;
    this.bytesSent = bytesSent;
    this.rid = rid;
    this.lastPacketSentTimestamp = lastPacketSentTimestamp;
    this.headerBytesSent = headerBytesSent;
    this.packetsDiscardedOnSend = packetsDiscardedOnSend;
    this.bytesDiscardedOnSend = bytesDiscardedOnSend;
    this.fecPacketsSent = fecPacketsSent;
    this.retransmittedPacketsSent = retransmittedPacketsSent;
    this.retransmittedBytesSent = retransmittedBytesSent;
    this.targetBitrate = targetBitrate;
    this.totalEncodedBytesTarget = totalEncodedBytesTarget;
    this.frameWidth = frameWidth;
    this.frameHeight = frameHeight;
    this.frameBitDepth = frameBitDepth;
    this.framesPerSecond = framesPerSecond;
    this.framesSent = framesSent;
    this.hugeFramesSent = hugeFramesSent;
    this.framesEncoded = framesEncoded;
    this.keyFramesEncoded = keyFramesEncoded;
    this.framesDiscardedOnSend = framesDiscardedOnSend;
    this.qpSum = qpSum;
    this.totalEncodeTime = totalEncodeTime;
    this.totalPacketSendDelay = totalPacketSendDelay;
    this.averageRtcpInterval = averageRtcpInterval;
    this.qualityLimitationDurationCPU = qualityLimitationDurationCPU;
    this.qualityLimitationDurationNone = qualityLimitationDurationNone;
    this.qualityLimitationDurationBandwidth = qualityLimitationDurationBandwidth;
    this.qualityLimitationDurationOther = qualityLimitationDurationOther;
    this.qualityLimitationReason = qualityLimitationReason;
    this.qualityLimitationResolutionChanges = qualityLimitationResolutionChanges;
    this.perDscpPacketsSent = perDscpPacketsSent;
    this.nackCount = nackCount;
    this.firCount = firCount;
    this.pliCount = pliCount;
    this.sliCount = sliCount;
    this.encoderImplementation = encoderImplementation;
    this.packetsReceived = packetsReceived;
    this.packetsLost = packetsLost;
    this.jitter = jitter;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.burstPacketsLost = burstPacketsLost;
    this.burstPacketsDiscarded = burstPacketsDiscarded;
    this.burstLossCount = burstLossCount;
    this.burstDiscardCount = burstDiscardCount;
    this.burstLossRate = burstLossRate;
    this.burstDiscardRate = burstDiscardRate;
    this.gapLossRate = gapLossRate;
    this.gapDiscardRate = gapDiscardRate;
    this.framesDropped = framesDropped;
    this.partialFramesLost = partialFramesLost;
    this.fullFramesLost = fullFramesLost;
    this.roundTripTime = roundTripTime;
    this.totalRoundTripTime = totalRoundTripTime;
    this.fractionLost = fractionLost;
    this.reportsReceived = reportsReceived;
    this.roundTripTimeMeasurements = roundTripTimeMeasurements;
    this.relayedSource = relayedSource;
    this.encodedFrameWidth = encodedFrameWidth;
    this.encodedFrameHeight = encodedFrameHeight;
    this.encodedFrameBitDepth = encodedFrameBitDepth;
    this.encodedFramesPerSecond = encodedFramesPerSecond;
    this.ended = ended;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.channels = channels;
    this.sdpFmtpLine = sdpFmtpLine;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return label;
    case 10: return trackId;
    case 11: return sfuStreamId;
    case 12: return sampleSeq;
    case 13: return ssrc;
    case 14: return packetsSent;
    case 15: return bytesSent;
    case 16: return rid;
    case 17: return lastPacketSentTimestamp;
    case 18: return headerBytesSent;
    case 19: return packetsDiscardedOnSend;
    case 20: return bytesDiscardedOnSend;
    case 21: return fecPacketsSent;
    case 22: return retransmittedPacketsSent;
    case 23: return retransmittedBytesSent;
    case 24: return targetBitrate;
    case 25: return totalEncodedBytesTarget;
    case 26: return frameWidth;
    case 27: return frameHeight;
    case 28: return frameBitDepth;
    case 29: return framesPerSecond;
    case 30: return framesSent;
    case 31: return hugeFramesSent;
    case 32: return framesEncoded;
    case 33: return keyFramesEncoded;
    case 34: return framesDiscardedOnSend;
    case 35: return qpSum;
    case 36: return totalEncodeTime;
    case 37: return totalPacketSendDelay;
    case 38: return averageRtcpInterval;
    case 39: return qualityLimitationDurationCPU;
    case 40: return qualityLimitationDurationNone;
    case 41: return qualityLimitationDurationBandwidth;
    case 42: return qualityLimitationDurationOther;
    case 43: return qualityLimitationReason;
    case 44: return qualityLimitationResolutionChanges;
    case 45: return perDscpPacketsSent;
    case 46: return nackCount;
    case 47: return firCount;
    case 48: return pliCount;
    case 49: return sliCount;
    case 50: return encoderImplementation;
    case 51: return packetsReceived;
    case 52: return packetsLost;
    case 53: return jitter;
    case 54: return packetsDiscarded;
    case 55: return packetsRepaired;
    case 56: return burstPacketsLost;
    case 57: return burstPacketsDiscarded;
    case 58: return burstLossCount;
    case 59: return burstDiscardCount;
    case 60: return burstLossRate;
    case 61: return burstDiscardRate;
    case 62: return gapLossRate;
    case 63: return gapDiscardRate;
    case 64: return framesDropped;
    case 65: return partialFramesLost;
    case 66: return fullFramesLost;
    case 67: return roundTripTime;
    case 68: return totalRoundTripTime;
    case 69: return fractionLost;
    case 70: return reportsReceived;
    case 71: return roundTripTimeMeasurements;
    case 72: return relayedSource;
    case 73: return encodedFrameWidth;
    case 74: return encodedFrameHeight;
    case 75: return encodedFrameBitDepth;
    case 76: return encodedFramesPerSecond;
    case 77: return ended;
    case 78: return payloadType;
    case 79: return mimeType;
    case 80: return clockRate;
    case 81: return channels;
    case 82: return sdpFmtpLine;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 2: marker = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = value$ != null ? value$.toString() : null; break;
    case 5: roomId = value$ != null ? value$.toString() : null; break;
    case 6: clientId = value$ != null ? value$.toString() : null; break;
    case 7: userId = value$ != null ? value$.toString() : null; break;
    case 8: peerConnectionId = value$ != null ? value$.toString() : null; break;
    case 9: label = value$ != null ? value$.toString() : null; break;
    case 10: trackId = value$ != null ? value$.toString() : null; break;
    case 11: sfuStreamId = value$ != null ? value$.toString() : null; break;
    case 12: sampleSeq = (java.lang.Integer)value$; break;
    case 13: ssrc = (java.lang.Long)value$; break;
    case 14: packetsSent = (java.lang.Integer)value$; break;
    case 15: bytesSent = (java.lang.Long)value$; break;
    case 16: rid = value$ != null ? value$.toString() : null; break;
    case 17: lastPacketSentTimestamp = (java.lang.Long)value$; break;
    case 18: headerBytesSent = (java.lang.Long)value$; break;
    case 19: packetsDiscardedOnSend = (java.lang.Integer)value$; break;
    case 20: bytesDiscardedOnSend = (java.lang.Long)value$; break;
    case 21: fecPacketsSent = (java.lang.Integer)value$; break;
    case 22: retransmittedPacketsSent = (java.lang.Integer)value$; break;
    case 23: retransmittedBytesSent = (java.lang.Long)value$; break;
    case 24: targetBitrate = (java.lang.Long)value$; break;
    case 25: totalEncodedBytesTarget = (java.lang.Long)value$; break;
    case 26: frameWidth = (java.lang.Integer)value$; break;
    case 27: frameHeight = (java.lang.Integer)value$; break;
    case 28: frameBitDepth = (java.lang.Integer)value$; break;
    case 29: framesPerSecond = (java.lang.Double)value$; break;
    case 30: framesSent = (java.lang.Integer)value$; break;
    case 31: hugeFramesSent = (java.lang.Integer)value$; break;
    case 32: framesEncoded = (java.lang.Integer)value$; break;
    case 33: keyFramesEncoded = (java.lang.Integer)value$; break;
    case 34: framesDiscardedOnSend = (java.lang.Integer)value$; break;
    case 35: qpSum = (java.lang.Long)value$; break;
    case 36: totalEncodeTime = (java.lang.Double)value$; break;
    case 37: totalPacketSendDelay = (java.lang.Double)value$; break;
    case 38: averageRtcpInterval = (java.lang.Double)value$; break;
    case 39: qualityLimitationDurationCPU = (java.lang.Double)value$; break;
    case 40: qualityLimitationDurationNone = (java.lang.Double)value$; break;
    case 41: qualityLimitationDurationBandwidth = (java.lang.Double)value$; break;
    case 42: qualityLimitationDurationOther = (java.lang.Double)value$; break;
    case 43: qualityLimitationReason = value$ != null ? value$.toString() : null; break;
    case 44: qualityLimitationResolutionChanges = (java.lang.Integer)value$; break;
    case 45: perDscpPacketsSent = (java.lang.Double)value$; break;
    case 46: nackCount = (java.lang.Integer)value$; break;
    case 47: firCount = (java.lang.Integer)value$; break;
    case 48: pliCount = (java.lang.Integer)value$; break;
    case 49: sliCount = (java.lang.Integer)value$; break;
    case 50: encoderImplementation = value$ != null ? value$.toString() : null; break;
    case 51: packetsReceived = (java.lang.Integer)value$; break;
    case 52: packetsLost = (java.lang.Integer)value$; break;
    case 53: jitter = (java.lang.Double)value$; break;
    case 54: packetsDiscarded = (java.lang.Integer)value$; break;
    case 55: packetsRepaired = (java.lang.Integer)value$; break;
    case 56: burstPacketsLost = (java.lang.Integer)value$; break;
    case 57: burstPacketsDiscarded = (java.lang.Integer)value$; break;
    case 58: burstLossCount = (java.lang.Integer)value$; break;
    case 59: burstDiscardCount = (java.lang.Integer)value$; break;
    case 60: burstLossRate = (java.lang.Double)value$; break;
    case 61: burstDiscardRate = (java.lang.Double)value$; break;
    case 62: gapLossRate = (java.lang.Double)value$; break;
    case 63: gapDiscardRate = (java.lang.Double)value$; break;
    case 64: framesDropped = (java.lang.Integer)value$; break;
    case 65: partialFramesLost = (java.lang.Integer)value$; break;
    case 66: fullFramesLost = (java.lang.Integer)value$; break;
    case 67: roundTripTime = (java.lang.Double)value$; break;
    case 68: totalRoundTripTime = (java.lang.Double)value$; break;
    case 69: fractionLost = (java.lang.Double)value$; break;
    case 70: reportsReceived = (java.lang.Integer)value$; break;
    case 71: roundTripTimeMeasurements = (java.lang.Integer)value$; break;
    case 72: relayedSource = (java.lang.Boolean)value$; break;
    case 73: encodedFrameWidth = (java.lang.Integer)value$; break;
    case 74: encodedFrameHeight = (java.lang.Integer)value$; break;
    case 75: encodedFrameBitDepth = (java.lang.Integer)value$; break;
    case 76: encodedFramesPerSecond = (java.lang.Double)value$; break;
    case 77: ended = (java.lang.Boolean)value$; break;
    case 78: payloadType = (java.lang.Integer)value$; break;
    case 79: mimeType = value$ != null ? value$.toString() : null; break;
    case 80: clockRate = (java.lang.Long)value$; break;
    case 81: channels = (java.lang.Integer)value$; break;
    case 82: sdpFmtpLine = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }



  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }



  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }



  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is labeled with
   */
  public java.lang.String getLabel() {
    return label;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track
   */
  public java.lang.String getTrackId() {
    return trackId;
  }



  /**
   * Gets the value of the 'sfuStreamId' field.
   * @return The id of the Sfu stream corresponds to the outbound track
   */
  public java.lang.String getSfuStreamId() {
    return sfuStreamId;
  }



  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public int getSampleSeq() {
    return sampleSeq;
  }



  /**
   * Gets the value of the 'ssrc' field.
   * @return The RTP SSRC field
   */
  public long getSsrc() {
    return ssrc;
  }



  /**
   * Gets the value of the 'packetsSent' field.
   * @return The total number of packets sent on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return The total number of bytes sent on the corresponded synchronization source
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'rid' field.
   * @return  The rid encoding parameter of the corresponded synchronization source
   */
  public java.lang.String getRid() {
    return rid;
  }



  /**
   * Gets the value of the 'lastPacketSentTimestamp' field.
   * @return  the timestamp the last packet was sent. (UTC epoch in ms)
   */
  public java.lang.Long getLastPacketSentTimestamp() {
    return lastPacketSentTimestamp;
  }



  /**
   * Gets the value of the 'headerBytesSent' field.
   * @return Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getHeaderBytesSent() {
    return headerBytesSent;
  }



  /**
   * Gets the value of the 'packetsDiscardedOnSend' field.
   * @return Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getPacketsDiscardedOnSend() {
    return packetsDiscardedOnSend;
  }



  /**
   * Gets the value of the 'bytesDiscardedOnSend' field.
   * @return Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getBytesDiscardedOnSend() {
    return bytesDiscardedOnSend;
  }



  /**
   * Gets the value of the 'fecPacketsSent' field.
   * @return Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFecPacketsSent() {
    return fecPacketsSent;
  }



  /**
   * Gets the value of the 'retransmittedPacketsSent' field.
   * @return Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   */
  public java.lang.Integer getRetransmittedPacketsSent() {
    return retransmittedPacketsSent;
  }



  /**
   * Gets the value of the 'retransmittedBytesSent' field.
   * @return Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
   */
  public java.lang.Long getRetransmittedBytesSent() {
    return retransmittedBytesSent;
  }



  /**
   * Gets the value of the 'targetBitrate' field.
   * @return Reflects the current encoder target in bits per second.
   */
  public java.lang.Long getTargetBitrate() {
    return targetBitrate;
  }



  /**
   * Gets the value of the 'totalEncodedBytesTarget' field.
   * @return The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   */
  public java.lang.Long getTotalEncodedBytesTarget() {
    return totalEncodedBytesTarget;
  }



  /**
   * Gets the value of the 'frameWidth' field.
   * @return Represents the height of the last encoded frame sent over the corresponded synchronization source
   */
  public java.lang.Integer getFrameWidth() {
    return frameWidth;
  }



  /**
   * Gets the value of the 'frameHeight' field.
   * @return Represents the width of the last encoded frame sent over the corresponded synchronization source
   */
  public java.lang.Integer getFrameHeight() {
    return frameHeight;
  }



  /**
   * Gets the value of the 'frameBitDepth' field.
   * @return Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
   */
  public java.lang.Integer getFrameBitDepth() {
    return frameBitDepth;
  }



  /**
   * Gets the value of the 'framesPerSecond' field.
   * @return The number of encoded frames over the last second sent over the corresponded synchronization source
   */
  public java.lang.Double getFramesPerSecond() {
    return framesPerSecond;
  }



  /**
   * Gets the value of the 'framesSent' field.
   * @return The number of frames sent over the corresponded synchronization source
   */
  public java.lang.Integer getFramesSent() {
    return framesSent;
  }



  /**
   * Gets the value of the 'hugeFramesSent' field.
   * @return The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
   */
  public java.lang.Integer getHugeFramesSent() {
    return hugeFramesSent;
  }



  /**
   * Gets the value of the 'framesEncoded' field.
   * @return The number of frames encoded over the corresponded synchronization source
   */
  public java.lang.Integer getFramesEncoded() {
    return framesEncoded;
  }



  /**
   * Gets the value of the 'keyFramesEncoded' field.
   * @return The number of keyframes sent over the corresponded synchronization source
   */
  public java.lang.Integer getKeyFramesEncoded() {
    return keyFramesEncoded;
  }



  /**
   * Gets the value of the 'framesDiscardedOnSend' field.
   * @return The number of frames discarded before sending over the corresponded synchronization source
   */
  public java.lang.Integer getFramesDiscardedOnSend() {
    return framesDiscardedOnSend;
  }



  /**
   * Gets the value of the 'qpSum' field.
   * @return The sum of QP values encoded by the encoder corresponded to the synchronization source
   */
  public java.lang.Long getQpSum() {
    return qpSum;
  }



  /**
   * Gets the value of the 'totalEncodeTime' field.
   * @return The sum of encoding time spent by the encoder corresponded to the synchronization source
   */
  public java.lang.Double getTotalEncodeTime() {
    return totalEncodeTime;
  }



  /**
   * Gets the value of the 'totalPacketSendDelay' field.
   * @return The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   */
  public java.lang.Double getTotalPacketSendDelay() {
    return totalPacketSendDelay;
  }



  /**
   * Gets the value of the 'averageRtcpInterval' field.
   * @return The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getAverageRtcpInterval() {
    return averageRtcpInterval;
  }



  /**
   * Gets the value of the 'qualityLimitationDurationCPU' field.
   * @return Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
   */
  public java.lang.Double getQualityLimitationDurationCPU() {
    return qualityLimitationDurationCPU;
  }



  /**
   * Gets the value of the 'qualityLimitationDurationNone' field.
   * @return Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
   */
  public java.lang.Double getQualityLimitationDurationNone() {
    return qualityLimitationDurationNone;
  }



  /**
   * Gets the value of the 'qualityLimitationDurationBandwidth' field.
   * @return Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
   */
  public java.lang.Double getQualityLimitationDurationBandwidth() {
    return qualityLimitationDurationBandwidth;
  }



  /**
   * Gets the value of the 'qualityLimitationDurationOther' field.
   * @return Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
   */
  public java.lang.Double getQualityLimitationDurationOther() {
    return qualityLimitationDurationOther;
  }



  /**
   * Gets the value of the 'qualityLimitationReason' field.
   * @return Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
   */
  public java.lang.String getQualityLimitationReason() {
    return qualityLimitationReason;
  }



  /**
   * Gets the value of the 'qualityLimitationResolutionChanges' field.
   * @return The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getQualityLimitationResolutionChanges() {
    return qualityLimitationResolutionChanges;
  }



  /**
   * Gets the value of the 'perDscpPacketsSent' field.
   * @return The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getPerDscpPacketsSent() {
    return perDscpPacketsSent;
  }



  /**
   * Gets the value of the 'nackCount' field.
   * @return Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }



  /**
   * Gets the value of the 'firCount' field.
   * @return The number of full inter requests happened over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }



  /**
   * Gets the value of the 'pliCount' field.
   * @return The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }



  /**
   * Gets the value of the 'sliCount' field.
   * @return The number of slice loss indication happened over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getSliCount() {
    return sliCount;
  }



  /**
   * Gets the value of the 'encoderImplementation' field.
   * @return Indicate the name of the encoder implementation library
   */
  public java.lang.String getEncoderImplementation() {
    return encoderImplementation;
  }



  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }



  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of bytes received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }



  /**
   * Gets the value of the 'jitter' field.
   * @return The corresponded synchronization source reported jitter
   */
  public java.lang.Double getJitter() {
    return jitter;
  }



  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }



  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsRepaired() {
    return packetsRepaired;
  }



  /**
   * Gets the value of the 'burstPacketsLost' field.
   * @return The total number of packets lost in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsLost() {
    return burstPacketsLost;
  }



  /**
   * Gets the value of the 'burstPacketsDiscarded' field.
   * @return The total number of packets discarded in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsDiscarded() {
    return burstPacketsDiscarded;
  }



  /**
   * Gets the value of the 'burstLossCount' field.
   * @return The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   */
  public java.lang.Integer getBurstLossCount() {
    return burstLossCount;
  }



  /**
   * Gets the value of the 'burstDiscardCount' field.
   * @return The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   */
  public java.lang.Integer getBurstDiscardCount() {
    return burstDiscardCount;
  }



  /**
   * Gets the value of the 'burstLossRate' field.
   * @return The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstLossRate() {
    return burstLossRate;
  }



  /**
   * Gets the value of the 'burstDiscardRate' field.
   * @return The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstDiscardRate() {
    return burstDiscardRate;
  }



  /**
   * Gets the value of the 'gapLossRate' field.
   * @return The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapLossRate() {
    return gapLossRate;
  }



  /**
   * Gets the value of the 'gapDiscardRate' field.
   * @return The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapDiscardRate() {
    return gapDiscardRate;
  }



  /**
   * Gets the value of the 'framesDropped' field.
   * @return The number of frames dropped over the corresponded synchronization source
   */
  public java.lang.Integer getFramesDropped() {
    return framesDropped;
  }



  /**
   * Gets the value of the 'partialFramesLost' field.
   * @return The number of partial frames lost over the corresponded synchronization source
   */
  public java.lang.Integer getPartialFramesLost() {
    return partialFramesLost;
  }



  /**
   * Gets the value of the 'fullFramesLost' field.
   * @return The number of full frames lost over the corresponded synchronization source
   */
  public java.lang.Integer getFullFramesLost() {
    return fullFramesLost;
  }



  /**
   * Gets the value of the 'roundTripTime' field.
   * @return RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   */
  public java.lang.Double getRoundTripTime() {
    return roundTripTime;
  }



  /**
   * Gets the value of the 'totalRoundTripTime' field.
   * @return The sum of RTT measurements belongs to the corresponded synchronization source
   */
  public java.lang.Double getTotalRoundTripTime() {
    return totalRoundTripTime;
  }



  /**
   * Gets the value of the 'fractionLost' field.
   * @return The receiver reported fractional lost belongs to the corresponded synchronization source
   */
  public java.lang.Double getFractionLost() {
    return fractionLost;
  }



  /**
   * Gets the value of the 'reportsReceived' field.
   * @return The total number of RR reports received, which is the base of the remote inbound calculation on this source
   */
  public java.lang.Integer getReportsReceived() {
    return reportsReceived;
  }



  /**
   * Gets the value of the 'roundTripTimeMeasurements' field.
   * @return The total number of calculated RR measurements received on this source
   */
  public java.lang.Integer getRoundTripTimeMeasurements() {
    return roundTripTimeMeasurements;
  }



  /**
   * Gets the value of the 'relayedSource' field.
   * @return True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   */
  public java.lang.Boolean getRelayedSource() {
    return relayedSource;
  }



  /**
   * Gets the value of the 'encodedFrameWidth' field.
   * @return Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameWidth() {
    return encodedFrameWidth;
  }



  /**
   * Gets the value of the 'encodedFrameHeight' field.
   * @return Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameHeight() {
    return encodedFrameHeight;
  }



  /**
   * Gets the value of the 'encodedFrameBitDepth' field.
   * @return Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameBitDepth() {
    return encodedFrameBitDepth;
  }



  /**
   * Gets the value of the 'encodedFramesPerSecond' field.
   * @return Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Double getEncodedFramesPerSecond() {
    return encodedFramesPerSecond;
  }



  /**
   * Gets the value of the 'ended' field.
   * @return Flag represents if the sender ended the media stream track or not.
   */
  public java.lang.Boolean getEnded() {
    return ended;
  }



  /**
   * Gets the value of the 'payloadType' field.
   * @return The type of the payload the RTP packet SSRC belongs to
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }



  /**
   * Gets the value of the 'mimeType' field.
   * @return the MIME type of the codec (e.g.: video/vp8)
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }



  /**
   * Gets the value of the 'clockRate' field.
   * @return The negotiated clock rate the RTP timestamp is generated of
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }



  /**
   * Gets the value of the 'channels' field.
   * @return The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   */
  public java.lang.Integer getChannels() {
    return channels;
  }



  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The a=fmtp line in the SDP corresponding to the codec
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }



  /**
   * Creates a new OutboundVideoTrackReport RecordBuilder.
   * @return A new OutboundVideoTrackReport RecordBuilder
   */
  public static org.observertc.schemas.reports.OutboundVideoTrackReport.Builder newBuilder() {
    return new org.observertc.schemas.reports.OutboundVideoTrackReport.Builder();
  }

  /**
   * Creates a new OutboundVideoTrackReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OutboundVideoTrackReport RecordBuilder
   */
  public static org.observertc.schemas.reports.OutboundVideoTrackReport.Builder newBuilder(org.observertc.schemas.reports.OutboundVideoTrackReport.Builder other) {
    if (other == null) {
      return new org.observertc.schemas.reports.OutboundVideoTrackReport.Builder();
    } else {
      return new org.observertc.schemas.reports.OutboundVideoTrackReport.Builder(other);
    }
  }

  /**
   * Creates a new OutboundVideoTrackReport RecordBuilder by copying an existing OutboundVideoTrackReport instance.
   * @param other The existing instance to copy.
   * @return A new OutboundVideoTrackReport RecordBuilder
   */
  public static org.observertc.schemas.reports.OutboundVideoTrackReport.Builder newBuilder(org.observertc.schemas.reports.OutboundVideoTrackReport other) {
    if (other == null) {
      return new org.observertc.schemas.reports.OutboundVideoTrackReport.Builder();
    } else {
      return new org.observertc.schemas.reports.OutboundVideoTrackReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for OutboundVideoTrackReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutboundVideoTrackReport>
    implements org.apache.avro.data.RecordBuilder<OutboundVideoTrackReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label the peer connection is labeled with */
    private java.lang.String label;
    /** The id of the track */
    private java.lang.String trackId;
    /** The id of the Sfu stream corresponds to the outbound track */
    private java.lang.String sfuStreamId;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The RTP SSRC field */
    private long ssrc;
    /** The total number of packets sent on the corresponded synchronization source */
    private java.lang.Integer packetsSent;
    /** The total number of bytes sent on the corresponded synchronization source */
    private java.lang.Long bytesSent;
    /**  The rid encoding parameter of the corresponded synchronization source */
    private java.lang.String rid;
    /**  the timestamp the last packet was sent. (UTC epoch in ms) */
    private java.lang.Long lastPacketSentTimestamp;
    /** Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
    private java.lang.Long headerBytesSent;
    /** Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Integer packetsDiscardedOnSend;
    /** Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Long bytesDiscardedOnSend;
    /** Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Integer fecPacketsSent;
    /** Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
    private java.lang.Integer retransmittedPacketsSent;
    /** Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc). */
    private java.lang.Long retransmittedBytesSent;
    /** Reflects the current encoder target in bits per second. */
    private java.lang.Long targetBitrate;
    /** The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
    private java.lang.Long totalEncodedBytesTarget;
    /** Represents the height of the last encoded frame sent over the corresponded synchronization source */
    private java.lang.Integer frameWidth;
    /** Represents the width of the last encoded frame sent over the corresponded synchronization source */
    private java.lang.Integer frameHeight;
    /** Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source */
    private java.lang.Integer frameBitDepth;
    /** The number of encoded frames over the last second sent over the corresponded synchronization source */
    private java.lang.Double framesPerSecond;
    /** The number of frames sent over the corresponded synchronization source */
    private java.lang.Integer framesSent;
    /** The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source */
    private java.lang.Integer hugeFramesSent;
    /** The number of frames encoded over the corresponded synchronization source */
    private java.lang.Integer framesEncoded;
    /** The number of keyframes sent over the corresponded synchronization source */
    private java.lang.Integer keyFramesEncoded;
    /** The number of frames discarded before sending over the corresponded synchronization source */
    private java.lang.Integer framesDiscardedOnSend;
    /** The sum of QP values encoded by the encoder corresponded to the synchronization source */
    private java.lang.Long qpSum;
    /** The sum of encoding time spent by the encoder corresponded to the synchronization source */
    private java.lang.Double totalEncodeTime;
    /** The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
    private java.lang.Double totalPacketSendDelay;
    /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
    private java.lang.Double averageRtcpInterval;
    /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU */
    private java.lang.Double qualityLimitationDurationCPU;
    /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state */
    private java.lang.Double qualityLimitationDurationNone;
    /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth */
    private java.lang.Double qualityLimitationDurationBandwidth;
    /** Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor */
    private java.lang.Double qualityLimitationDurationOther;
    /** Indicate a reason for the corresponding synchronization source (ssrc) quality is limited */
    private java.lang.String qualityLimitationReason;
    /** The number of quality limiatation changes happened for the corresponding synchronization source (ssrc) */
    private java.lang.Integer qualityLimitationResolutionChanges;
    /** The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Double perDscpPacketsSent;
    /** Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Integer nackCount;
    /** The number of full inter requests happened over the corresponding synchronization source (ssrc) */
    private java.lang.Integer firCount;
    /** The number of picture loss indication happened received over the corresponding synchronization source (ssrc) */
    private java.lang.Integer pliCount;
    /** The number of slice loss indication happened over the corresponding synchronization source (ssrc) */
    private java.lang.Integer sliCount;
    /** Indicate the name of the encoder implementation library */
    private java.lang.String encoderImplementation;
    /** The total number of packets received on the corresponded synchronization source */
    private java.lang.Integer packetsReceived;
    /** The total number of bytes received on the corresponded synchronization source */
    private java.lang.Integer packetsLost;
    /** The corresponded synchronization source reported jitter */
    private java.lang.Double jitter;
    /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
    private java.lang.Integer packetsRepaired;
    /** The total number of packets lost in burst (RFC6958) */
    private java.lang.Integer burstPacketsLost;
    /** The total number of packets discarded in burst (RFC6958) */
    private java.lang.Integer burstPacketsDiscarded;
    /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
    private java.lang.Integer burstLossCount;
    /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
    private java.lang.Integer burstDiscardCount;
    /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstLossRate;
    /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstDiscardRate;
    /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapLossRate;
    /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapDiscardRate;
    /** The number of frames dropped over the corresponded synchronization source */
    private java.lang.Integer framesDropped;
    /** The number of partial frames lost over the corresponded synchronization source */
    private java.lang.Integer partialFramesLost;
    /** The number of full frames lost over the corresponded synchronization source */
    private java.lang.Integer fullFramesLost;
    /** RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
    private java.lang.Double roundTripTime;
    /** The sum of RTT measurements belongs to the corresponded synchronization source */
    private java.lang.Double totalRoundTripTime;
    /** The receiver reported fractional lost belongs to the corresponded synchronization source */
    private java.lang.Double fractionLost;
    /** The total number of RR reports received, which is the base of the remote inbound calculation on this source */
    private java.lang.Integer reportsReceived;
    /** The total number of calculated RR measurements received on this source */
    private java.lang.Integer roundTripTimeMeasurements;
    /** True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
    private java.lang.Boolean relayedSource;
    /** Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameWidth;
    /** Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameHeight;
    /** Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameBitDepth;
    /** Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
    private java.lang.Double encodedFramesPerSecond;
    /** Flag represents if the sender ended the media stream track or not. */
    private java.lang.Boolean ended;
    /** The type of the payload the RTP packet SSRC belongs to */
    private java.lang.Integer payloadType;
    /** the MIME type of the codec (e.g.: video/vp8) */
    private java.lang.String mimeType;
    /** The negotiated clock rate the RTP timestamp is generated of */
    private java.lang.Long clockRate;
    /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
    private java.lang.Integer channels;
    /** The a=fmtp line in the SDP corresponding to the codec */
    private java.lang.String sdpFmtpLine;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.schemas.reports.OutboundVideoTrackReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.sfuStreamId)) {
        this.sfuStreamId = data().deepCopy(fields()[11].schema(), other.sfuStreamId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[12].schema(), other.sampleSeq);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[13].schema(), other.ssrc);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.rid)) {
        this.rid = data().deepCopy(fields()[16].schema(), other.rid);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[17].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[18].schema(), other.headerBytesSent);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[19].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[20].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[21].schema(), other.fecPacketsSent);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[22].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[23].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[24].schema(), other.targetBitrate);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[25].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[26].schema(), other.frameWidth);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[27].schema(), other.frameHeight);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[28].schema(), other.frameBitDepth);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[29].schema(), other.framesPerSecond);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[30].schema(), other.framesSent);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[31].schema(), other.hugeFramesSent);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[32].schema(), other.framesEncoded);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[33].schema(), other.keyFramesEncoded);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.framesDiscardedOnSend)) {
        this.framesDiscardedOnSend = data().deepCopy(fields()[34].schema(), other.framesDiscardedOnSend);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[35].schema(), other.qpSum);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[36].schema(), other.totalEncodeTime);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[37].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[38].schema(), other.averageRtcpInterval);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.qualityLimitationDurationCPU)) {
        this.qualityLimitationDurationCPU = data().deepCopy(fields()[39].schema(), other.qualityLimitationDurationCPU);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.qualityLimitationDurationNone)) {
        this.qualityLimitationDurationNone = data().deepCopy(fields()[40].schema(), other.qualityLimitationDurationNone);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.qualityLimitationDurationBandwidth)) {
        this.qualityLimitationDurationBandwidth = data().deepCopy(fields()[41].schema(), other.qualityLimitationDurationBandwidth);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.qualityLimitationDurationOther)) {
        this.qualityLimitationDurationOther = data().deepCopy(fields()[42].schema(), other.qualityLimitationDurationOther);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[43].schema(), other.qualityLimitationReason);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[44].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[45].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[46].schema(), other.nackCount);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.firCount)) {
        this.firCount = data().deepCopy(fields()[47].schema(), other.firCount);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[48].schema(), other.pliCount);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
      if (isValidValue(fields()[49], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[49].schema(), other.sliCount);
        fieldSetFlags()[49] = other.fieldSetFlags()[49];
      }
      if (isValidValue(fields()[50], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[50].schema(), other.encoderImplementation);
        fieldSetFlags()[50] = other.fieldSetFlags()[50];
      }
      if (isValidValue(fields()[51], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[51].schema(), other.packetsReceived);
        fieldSetFlags()[51] = other.fieldSetFlags()[51];
      }
      if (isValidValue(fields()[52], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[52].schema(), other.packetsLost);
        fieldSetFlags()[52] = other.fieldSetFlags()[52];
      }
      if (isValidValue(fields()[53], other.jitter)) {
        this.jitter = data().deepCopy(fields()[53].schema(), other.jitter);
        fieldSetFlags()[53] = other.fieldSetFlags()[53];
      }
      if (isValidValue(fields()[54], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[54].schema(), other.packetsDiscarded);
        fieldSetFlags()[54] = other.fieldSetFlags()[54];
      }
      if (isValidValue(fields()[55], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[55].schema(), other.packetsRepaired);
        fieldSetFlags()[55] = other.fieldSetFlags()[55];
      }
      if (isValidValue(fields()[56], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[56].schema(), other.burstPacketsLost);
        fieldSetFlags()[56] = other.fieldSetFlags()[56];
      }
      if (isValidValue(fields()[57], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[57].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[57] = other.fieldSetFlags()[57];
      }
      if (isValidValue(fields()[58], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[58].schema(), other.burstLossCount);
        fieldSetFlags()[58] = other.fieldSetFlags()[58];
      }
      if (isValidValue(fields()[59], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[59].schema(), other.burstDiscardCount);
        fieldSetFlags()[59] = other.fieldSetFlags()[59];
      }
      if (isValidValue(fields()[60], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[60].schema(), other.burstLossRate);
        fieldSetFlags()[60] = other.fieldSetFlags()[60];
      }
      if (isValidValue(fields()[61], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[61].schema(), other.burstDiscardRate);
        fieldSetFlags()[61] = other.fieldSetFlags()[61];
      }
      if (isValidValue(fields()[62], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[62].schema(), other.gapLossRate);
        fieldSetFlags()[62] = other.fieldSetFlags()[62];
      }
      if (isValidValue(fields()[63], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[63].schema(), other.gapDiscardRate);
        fieldSetFlags()[63] = other.fieldSetFlags()[63];
      }
      if (isValidValue(fields()[64], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[64].schema(), other.framesDropped);
        fieldSetFlags()[64] = other.fieldSetFlags()[64];
      }
      if (isValidValue(fields()[65], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[65].schema(), other.partialFramesLost);
        fieldSetFlags()[65] = other.fieldSetFlags()[65];
      }
      if (isValidValue(fields()[66], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[66].schema(), other.fullFramesLost);
        fieldSetFlags()[66] = other.fieldSetFlags()[66];
      }
      if (isValidValue(fields()[67], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[67].schema(), other.roundTripTime);
        fieldSetFlags()[67] = other.fieldSetFlags()[67];
      }
      if (isValidValue(fields()[68], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[68].schema(), other.totalRoundTripTime);
        fieldSetFlags()[68] = other.fieldSetFlags()[68];
      }
      if (isValidValue(fields()[69], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[69].schema(), other.fractionLost);
        fieldSetFlags()[69] = other.fieldSetFlags()[69];
      }
      if (isValidValue(fields()[70], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[70].schema(), other.reportsReceived);
        fieldSetFlags()[70] = other.fieldSetFlags()[70];
      }
      if (isValidValue(fields()[71], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[71].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[71] = other.fieldSetFlags()[71];
      }
      if (isValidValue(fields()[72], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[72].schema(), other.relayedSource);
        fieldSetFlags()[72] = other.fieldSetFlags()[72];
      }
      if (isValidValue(fields()[73], other.encodedFrameWidth)) {
        this.encodedFrameWidth = data().deepCopy(fields()[73].schema(), other.encodedFrameWidth);
        fieldSetFlags()[73] = other.fieldSetFlags()[73];
      }
      if (isValidValue(fields()[74], other.encodedFrameHeight)) {
        this.encodedFrameHeight = data().deepCopy(fields()[74].schema(), other.encodedFrameHeight);
        fieldSetFlags()[74] = other.fieldSetFlags()[74];
      }
      if (isValidValue(fields()[75], other.encodedFrameBitDepth)) {
        this.encodedFrameBitDepth = data().deepCopy(fields()[75].schema(), other.encodedFrameBitDepth);
        fieldSetFlags()[75] = other.fieldSetFlags()[75];
      }
      if (isValidValue(fields()[76], other.encodedFramesPerSecond)) {
        this.encodedFramesPerSecond = data().deepCopy(fields()[76].schema(), other.encodedFramesPerSecond);
        fieldSetFlags()[76] = other.fieldSetFlags()[76];
      }
      if (isValidValue(fields()[77], other.ended)) {
        this.ended = data().deepCopy(fields()[77].schema(), other.ended);
        fieldSetFlags()[77] = other.fieldSetFlags()[77];
      }
      if (isValidValue(fields()[78], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[78].schema(), other.payloadType);
        fieldSetFlags()[78] = other.fieldSetFlags()[78];
      }
      if (isValidValue(fields()[79], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[79].schema(), other.mimeType);
        fieldSetFlags()[79] = other.fieldSetFlags()[79];
      }
      if (isValidValue(fields()[80], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[80].schema(), other.clockRate);
        fieldSetFlags()[80] = other.fieldSetFlags()[80];
      }
      if (isValidValue(fields()[81], other.channels)) {
        this.channels = data().deepCopy(fields()[81].schema(), other.channels);
        fieldSetFlags()[81] = other.fieldSetFlags()[81];
      }
      if (isValidValue(fields()[82], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[82].schema(), other.sdpFmtpLine);
        fieldSetFlags()[82] = other.fieldSetFlags()[82];
      }
    }

    /**
     * Creates a Builder by copying an existing OutboundVideoTrackReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.schemas.reports.OutboundVideoTrackReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sfuStreamId)) {
        this.sfuStreamId = data().deepCopy(fields()[11].schema(), other.sfuStreamId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[12].schema(), other.sampleSeq);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[13].schema(), other.ssrc);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.rid)) {
        this.rid = data().deepCopy(fields()[16].schema(), other.rid);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[17].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[18].schema(), other.headerBytesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[19].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[20].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[21].schema(), other.fecPacketsSent);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[22].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[23].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[24].schema(), other.targetBitrate);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[25].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[26].schema(), other.frameWidth);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[27].schema(), other.frameHeight);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[28].schema(), other.frameBitDepth);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[29].schema(), other.framesPerSecond);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[30].schema(), other.framesSent);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[31].schema(), other.hugeFramesSent);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[32].schema(), other.framesEncoded);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[33].schema(), other.keyFramesEncoded);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.framesDiscardedOnSend)) {
        this.framesDiscardedOnSend = data().deepCopy(fields()[34].schema(), other.framesDiscardedOnSend);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[35].schema(), other.qpSum);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[36].schema(), other.totalEncodeTime);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[37].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[38].schema(), other.averageRtcpInterval);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.qualityLimitationDurationCPU)) {
        this.qualityLimitationDurationCPU = data().deepCopy(fields()[39].schema(), other.qualityLimitationDurationCPU);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.qualityLimitationDurationNone)) {
        this.qualityLimitationDurationNone = data().deepCopy(fields()[40].schema(), other.qualityLimitationDurationNone);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.qualityLimitationDurationBandwidth)) {
        this.qualityLimitationDurationBandwidth = data().deepCopy(fields()[41].schema(), other.qualityLimitationDurationBandwidth);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.qualityLimitationDurationOther)) {
        this.qualityLimitationDurationOther = data().deepCopy(fields()[42].schema(), other.qualityLimitationDurationOther);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[43].schema(), other.qualityLimitationReason);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[44].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[45].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[46].schema(), other.nackCount);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.firCount)) {
        this.firCount = data().deepCopy(fields()[47].schema(), other.firCount);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[48].schema(), other.pliCount);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[49].schema(), other.sliCount);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[50].schema(), other.encoderImplementation);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[51].schema(), other.packetsReceived);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[52].schema(), other.packetsLost);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.jitter)) {
        this.jitter = data().deepCopy(fields()[53].schema(), other.jitter);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[54].schema(), other.packetsDiscarded);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[55].schema(), other.packetsRepaired);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[56].schema(), other.burstPacketsLost);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[57].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[58].schema(), other.burstLossCount);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[59].schema(), other.burstDiscardCount);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[60].schema(), other.burstLossRate);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[61].schema(), other.burstDiscardRate);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[62].schema(), other.gapLossRate);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[63].schema(), other.gapDiscardRate);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[64].schema(), other.framesDropped);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[65].schema(), other.partialFramesLost);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[66].schema(), other.fullFramesLost);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[67].schema(), other.roundTripTime);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[68].schema(), other.totalRoundTripTime);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[69].schema(), other.fractionLost);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[70].schema(), other.reportsReceived);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[71].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[72].schema(), other.relayedSource);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.encodedFrameWidth)) {
        this.encodedFrameWidth = data().deepCopy(fields()[73].schema(), other.encodedFrameWidth);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.encodedFrameHeight)) {
        this.encodedFrameHeight = data().deepCopy(fields()[74].schema(), other.encodedFrameHeight);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.encodedFrameBitDepth)) {
        this.encodedFrameBitDepth = data().deepCopy(fields()[75].schema(), other.encodedFrameBitDepth);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.encodedFramesPerSecond)) {
        this.encodedFramesPerSecond = data().deepCopy(fields()[76].schema(), other.encodedFramesPerSecond);
        fieldSetFlags()[76] = true;
      }
      if (isValidValue(fields()[77], other.ended)) {
        this.ended = data().deepCopy(fields()[77].schema(), other.ended);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[78].schema(), other.payloadType);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[79].schema(), other.mimeType);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[80].schema(), other.clockRate);
        fieldSetFlags()[80] = true;
      }
      if (isValidValue(fields()[81], other.channels)) {
        this.channels = data().deepCopy(fields()[81].schema(), other.channels);
        fieldSetFlags()[81] = true;
      }
      if (isValidValue(fields()[82], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[82].schema(), other.sdpFmtpLine);
        fieldSetFlags()[82] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }


    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }


    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }


    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is labeled with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * The id of the track
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[10], value);
      this.trackId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuStreamId' field.
      * The id of the Sfu stream corresponds to the outbound track
      * @return The value.
      */
    public java.lang.String getSfuStreamId() {
      return sfuStreamId;
    }


    /**
      * Sets the value of the 'sfuStreamId' field.
      * The id of the Sfu stream corresponds to the outbound track
      * @param value The value of 'sfuStreamId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setSfuStreamId(java.lang.String value) {
      validate(fields()[11], value);
      this.sfuStreamId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuStreamId' field has been set.
      * The id of the Sfu stream corresponds to the outbound track
      * @return True if the 'sfuStreamId' field has been set, false otherwise.
      */
    public boolean hasSfuStreamId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sfuStreamId' field.
      * The id of the Sfu stream corresponds to the outbound track
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearSfuStreamId() {
      sfuStreamId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public int getSampleSeq() {
      return sampleSeq;
    }


    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setSampleSeq(int value) {
      validate(fields()[12], value);
      this.sampleSeq = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearSampleSeq() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return The value.
      */
    public long getSsrc() {
      return ssrc;
    }


    /**
      * Sets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setSsrc(long value) {
      validate(fields()[13], value);
      this.ssrc = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The RTP SSRC field
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearSsrc() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }


    /**
      * Sets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[14], value);
      this.packetsSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * The total number of packets sent on the corresponded synchronization source
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[15], value);
      this.bytesSent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * The total number of bytes sent on the corresponded synchronization source
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return The value.
      */
    public java.lang.String getRid() {
      return rid;
    }


    /**
      * Sets the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @param value The value of 'rid'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRid(java.lang.String value) {
      validate(fields()[16], value);
      this.rid = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'rid' field has been set.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return True if the 'rid' field has been set, false otherwise.
      */
    public boolean hasRid() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRid() {
      rid = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return The value.
      */
    public java.lang.Long getLastPacketSentTimestamp() {
      return lastPacketSentTimestamp;
    }


    /**
      * Sets the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @param value The value of 'lastPacketSentTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setLastPacketSentTimestamp(java.lang.Long value) {
      validate(fields()[17], value);
      this.lastPacketSentTimestamp = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketSentTimestamp' field has been set.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return True if the 'lastPacketSentTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketSentTimestamp() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearLastPacketSentTimestamp() {
      lastPacketSentTimestamp = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getHeaderBytesSent() {
      return headerBytesSent;
    }


    /**
      * Sets the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setHeaderBytesSent(java.lang.Long value) {
      validate(fields()[18], value);
      this.headerBytesSent = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesSent' field has been set.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesSent' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesSent() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearHeaderBytesSent() {
      headerBytesSent = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscardedOnSend() {
      return packetsDiscardedOnSend;
    }


    /**
      * Sets the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'packetsDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsDiscardedOnSend(java.lang.Integer value) {
      validate(fields()[19], value);
      this.packetsDiscardedOnSend = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscardedOnSend' field has been set.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'packetsDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscardedOnSend() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsDiscardedOnSend() {
      packetsDiscardedOnSend = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getBytesDiscardedOnSend() {
      return bytesDiscardedOnSend;
    }


    /**
      * Sets the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'bytesDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBytesDiscardedOnSend(java.lang.Long value) {
      validate(fields()[20], value);
      this.bytesDiscardedOnSend = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesDiscardedOnSend' field has been set.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'bytesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasBytesDiscardedOnSend() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBytesDiscardedOnSend() {
      bytesDiscardedOnSend = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFecPacketsSent() {
      return fecPacketsSent;
    }


    /**
      * Sets the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFecPacketsSent(java.lang.Integer value) {
      validate(fields()[21], value);
      this.fecPacketsSent = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsSent' field has been set.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsSent' field has been set, false otherwise.
      */
    public boolean hasFecPacketsSent() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFecPacketsSent() {
      fecPacketsSent = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Integer getRetransmittedPacketsSent() {
      return retransmittedPacketsSent;
    }


    /**
      * Sets the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @param value The value of 'retransmittedPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRetransmittedPacketsSent(java.lang.Integer value) {
      validate(fields()[22], value);
      this.retransmittedPacketsSent = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedPacketsSent' field has been set.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return True if the 'retransmittedPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedPacketsSent() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRetransmittedPacketsSent() {
      retransmittedPacketsSent = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Long getRetransmittedBytesSent() {
      return retransmittedBytesSent;
    }


    /**
      * Sets the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
      * @param value The value of 'retransmittedBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRetransmittedBytesSent(java.lang.Long value) {
      validate(fields()[23], value);
      this.retransmittedBytesSent = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedBytesSent' field has been set.
      * Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
      * @return True if the 'retransmittedBytesSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedBytesSent() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponded synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRetransmittedBytesSent() {
      retransmittedBytesSent = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @return The value.
      */
    public java.lang.Long getTargetBitrate() {
      return targetBitrate;
    }


    /**
      * Sets the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @param value The value of 'targetBitrate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTargetBitrate(java.lang.Long value) {
      validate(fields()[24], value);
      this.targetBitrate = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'targetBitrate' field has been set.
      * Reflects the current encoder target in bits per second.
      * @return True if the 'targetBitrate' field has been set, false otherwise.
      */
    public boolean hasTargetBitrate() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTargetBitrate() {
      targetBitrate = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return The value.
      */
    public java.lang.Long getTotalEncodedBytesTarget() {
      return totalEncodedBytesTarget;
    }


    /**
      * Sets the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @param value The value of 'totalEncodedBytesTarget'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTotalEncodedBytesTarget(java.lang.Long value) {
      validate(fields()[25], value);
      this.totalEncodedBytesTarget = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodedBytesTarget' field has been set.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return True if the 'totalEncodedBytesTarget' field has been set, false otherwise.
      */
    public boolean hasTotalEncodedBytesTarget() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTotalEncodedBytesTarget() {
      totalEncodedBytesTarget = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameWidth' field.
      * Represents the height of the last encoded frame sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFrameWidth() {
      return frameWidth;
    }


    /**
      * Sets the value of the 'frameWidth' field.
      * Represents the height of the last encoded frame sent over the corresponded synchronization source
      * @param value The value of 'frameWidth'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFrameWidth(java.lang.Integer value) {
      validate(fields()[26], value);
      this.frameWidth = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'frameWidth' field has been set.
      * Represents the height of the last encoded frame sent over the corresponded synchronization source
      * @return True if the 'frameWidth' field has been set, false otherwise.
      */
    public boolean hasFrameWidth() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'frameWidth' field.
      * Represents the height of the last encoded frame sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFrameWidth() {
      frameWidth = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameHeight' field.
      * Represents the width of the last encoded frame sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFrameHeight() {
      return frameHeight;
    }


    /**
      * Sets the value of the 'frameHeight' field.
      * Represents the width of the last encoded frame sent over the corresponded synchronization source
      * @param value The value of 'frameHeight'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFrameHeight(java.lang.Integer value) {
      validate(fields()[27], value);
      this.frameHeight = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'frameHeight' field has been set.
      * Represents the width of the last encoded frame sent over the corresponded synchronization source
      * @return True if the 'frameHeight' field has been set, false otherwise.
      */
    public boolean hasFrameHeight() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'frameHeight' field.
      * Represents the width of the last encoded frame sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFrameHeight() {
      frameHeight = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameBitDepth' field.
      * Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFrameBitDepth() {
      return frameBitDepth;
    }


    /**
      * Sets the value of the 'frameBitDepth' field.
      * Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
      * @param value The value of 'frameBitDepth'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFrameBitDepth(java.lang.Integer value) {
      validate(fields()[28], value);
      this.frameBitDepth = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'frameBitDepth' field has been set.
      * Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
      * @return True if the 'frameBitDepth' field has been set, false otherwise.
      */
    public boolean hasFrameBitDepth() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'frameBitDepth' field.
      * Represents the bit depth per pixel of the last encoded frame sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFrameBitDepth() {
      frameBitDepth = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesPerSecond' field.
      * The number of encoded frames over the last second sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getFramesPerSecond() {
      return framesPerSecond;
    }


    /**
      * Sets the value of the 'framesPerSecond' field.
      * The number of encoded frames over the last second sent over the corresponded synchronization source
      * @param value The value of 'framesPerSecond'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFramesPerSecond(java.lang.Double value) {
      validate(fields()[29], value);
      this.framesPerSecond = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'framesPerSecond' field has been set.
      * The number of encoded frames over the last second sent over the corresponded synchronization source
      * @return True if the 'framesPerSecond' field has been set, false otherwise.
      */
    public boolean hasFramesPerSecond() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'framesPerSecond' field.
      * The number of encoded frames over the last second sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFramesPerSecond() {
      framesPerSecond = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesSent' field.
      * The number of frames sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesSent() {
      return framesSent;
    }


    /**
      * Sets the value of the 'framesSent' field.
      * The number of frames sent over the corresponded synchronization source
      * @param value The value of 'framesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFramesSent(java.lang.Integer value) {
      validate(fields()[30], value);
      this.framesSent = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'framesSent' field has been set.
      * The number of frames sent over the corresponded synchronization source
      * @return True if the 'framesSent' field has been set, false otherwise.
      */
    public boolean hasFramesSent() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'framesSent' field.
      * The number of frames sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFramesSent() {
      framesSent = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'hugeFramesSent' field.
      * The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getHugeFramesSent() {
      return hugeFramesSent;
    }


    /**
      * Sets the value of the 'hugeFramesSent' field.
      * The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @param value The value of 'hugeFramesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setHugeFramesSent(java.lang.Integer value) {
      validate(fields()[31], value);
      this.hugeFramesSent = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'hugeFramesSent' field has been set.
      * The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return True if the 'hugeFramesSent' field has been set, false otherwise.
      */
    public boolean hasHugeFramesSent() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'hugeFramesSent' field.
      * The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearHugeFramesSent() {
      hugeFramesSent = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesEncoded' field.
      * The number of frames encoded over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesEncoded() {
      return framesEncoded;
    }


    /**
      * Sets the value of the 'framesEncoded' field.
      * The number of frames encoded over the corresponded synchronization source
      * @param value The value of 'framesEncoded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFramesEncoded(java.lang.Integer value) {
      validate(fields()[32], value);
      this.framesEncoded = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'framesEncoded' field has been set.
      * The number of frames encoded over the corresponded synchronization source
      * @return True if the 'framesEncoded' field has been set, false otherwise.
      */
    public boolean hasFramesEncoded() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'framesEncoded' field.
      * The number of frames encoded over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFramesEncoded() {
      framesEncoded = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesEncoded' field.
      * The number of keyframes sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getKeyFramesEncoded() {
      return keyFramesEncoded;
    }


    /**
      * Sets the value of the 'keyFramesEncoded' field.
      * The number of keyframes sent over the corresponded synchronization source
      * @param value The value of 'keyFramesEncoded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setKeyFramesEncoded(java.lang.Integer value) {
      validate(fields()[33], value);
      this.keyFramesEncoded = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesEncoded' field has been set.
      * The number of keyframes sent over the corresponded synchronization source
      * @return True if the 'keyFramesEncoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesEncoded() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'keyFramesEncoded' field.
      * The number of keyframes sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearKeyFramesEncoded() {
      keyFramesEncoded = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDiscardedOnSend' field.
      * The number of frames discarded before sending over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesDiscardedOnSend() {
      return framesDiscardedOnSend;
    }


    /**
      * Sets the value of the 'framesDiscardedOnSend' field.
      * The number of frames discarded before sending over the corresponded synchronization source
      * @param value The value of 'framesDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFramesDiscardedOnSend(java.lang.Integer value) {
      validate(fields()[34], value);
      this.framesDiscardedOnSend = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDiscardedOnSend' field has been set.
      * The number of frames discarded before sending over the corresponded synchronization source
      * @return True if the 'framesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasFramesDiscardedOnSend() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'framesDiscardedOnSend' field.
      * The number of frames discarded before sending over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFramesDiscardedOnSend() {
      framesDiscardedOnSend = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'qpSum' field.
      * The sum of QP values encoded by the encoder corresponded to the synchronization source
      * @return The value.
      */
    public java.lang.Long getQpSum() {
      return qpSum;
    }


    /**
      * Sets the value of the 'qpSum' field.
      * The sum of QP values encoded by the encoder corresponded to the synchronization source
      * @param value The value of 'qpSum'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQpSum(java.lang.Long value) {
      validate(fields()[35], value);
      this.qpSum = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'qpSum' field has been set.
      * The sum of QP values encoded by the encoder corresponded to the synchronization source
      * @return True if the 'qpSum' field has been set, false otherwise.
      */
    public boolean hasQpSum() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'qpSum' field.
      * The sum of QP values encoded by the encoder corresponded to the synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQpSum() {
      qpSum = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodeTime' field.
      * The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalEncodeTime() {
      return totalEncodeTime;
    }


    /**
      * Sets the value of the 'totalEncodeTime' field.
      * The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @param value The value of 'totalEncodeTime'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTotalEncodeTime(java.lang.Double value) {
      validate(fields()[36], value);
      this.totalEncodeTime = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodeTime' field has been set.
      * The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return True if the 'totalEncodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalEncodeTime() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'totalEncodeTime' field.
      * The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTotalEncodeTime() {
      totalEncodeTime = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalPacketSendDelay() {
      return totalPacketSendDelay;
    }


    /**
      * Sets the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @param value The value of 'totalPacketSendDelay'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTotalPacketSendDelay(java.lang.Double value) {
      validate(fields()[37], value);
      this.totalPacketSendDelay = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPacketSendDelay' field has been set.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return True if the 'totalPacketSendDelay' field has been set, false otherwise.
      */
    public boolean hasTotalPacketSendDelay() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTotalPacketSendDelay() {
      totalPacketSendDelay = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getAverageRtcpInterval() {
      return averageRtcpInterval;
    }


    /**
      * Sets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @param value The value of 'averageRtcpInterval'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setAverageRtcpInterval(java.lang.Double value) {
      validate(fields()[38], value);
      this.averageRtcpInterval = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'averageRtcpInterval' field has been set.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return True if the 'averageRtcpInterval' field has been set, false otherwise.
      */
    public boolean hasAverageRtcpInterval() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearAverageRtcpInterval() {
      averageRtcpInterval = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationCPU' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationCPU() {
      return qualityLimitationDurationCPU;
    }


    /**
      * Sets the value of the 'qualityLimitationDurationCPU' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @param value The value of 'qualityLimitationDurationCPU'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationDurationCPU(java.lang.Double value) {
      validate(fields()[39], value);
      this.qualityLimitationDurationCPU = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationCPU' field has been set.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return True if the 'qualityLimitationDurationCPU' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationCPU() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationCPU' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationDurationCPU() {
      qualityLimitationDurationCPU = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationNone' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationNone() {
      return qualityLimitationDurationNone;
    }


    /**
      * Sets the value of the 'qualityLimitationDurationNone' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @param value The value of 'qualityLimitationDurationNone'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationDurationNone(java.lang.Double value) {
      validate(fields()[40], value);
      this.qualityLimitationDurationNone = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationNone' field has been set.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return True if the 'qualityLimitationDurationNone' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationNone() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationNone' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationDurationNone() {
      qualityLimitationDurationNone = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationBandwidth' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationBandwidth() {
      return qualityLimitationDurationBandwidth;
    }


    /**
      * Sets the value of the 'qualityLimitationDurationBandwidth' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @param value The value of 'qualityLimitationDurationBandwidth'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationDurationBandwidth(java.lang.Double value) {
      validate(fields()[41], value);
      this.qualityLimitationDurationBandwidth = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationBandwidth' field has been set.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return True if the 'qualityLimitationDurationBandwidth' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationBandwidth() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationBandwidth' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationDurationBandwidth() {
      qualityLimitationDurationBandwidth = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationOther' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationOther() {
      return qualityLimitationDurationOther;
    }


    /**
      * Sets the value of the 'qualityLimitationDurationOther' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @param value The value of 'qualityLimitationDurationOther'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationDurationOther(java.lang.Double value) {
      validate(fields()[42], value);
      this.qualityLimitationDurationOther = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationOther' field has been set.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return True if the 'qualityLimitationDurationOther' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationOther() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationOther' field.
      * Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationDurationOther() {
      qualityLimitationDurationOther = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationReason' field.
      * Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return The value.
      */
    public java.lang.String getQualityLimitationReason() {
      return qualityLimitationReason;
    }


    /**
      * Sets the value of the 'qualityLimitationReason' field.
      * Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @param value The value of 'qualityLimitationReason'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationReason(java.lang.String value) {
      validate(fields()[43], value);
      this.qualityLimitationReason = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationReason' field has been set.
      * Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return True if the 'qualityLimitationReason' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationReason() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'qualityLimitationReason' field.
      * Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationReason() {
      qualityLimitationReason = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationResolutionChanges' field.
      * The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getQualityLimitationResolutionChanges() {
      return qualityLimitationResolutionChanges;
    }


    /**
      * Sets the value of the 'qualityLimitationResolutionChanges' field.
      * The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @param value The value of 'qualityLimitationResolutionChanges'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setQualityLimitationResolutionChanges(java.lang.Integer value) {
      validate(fields()[44], value);
      this.qualityLimitationResolutionChanges = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationResolutionChanges' field has been set.
      * The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return True if the 'qualityLimitationResolutionChanges' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationResolutionChanges() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'qualityLimitationResolutionChanges' field.
      * The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearQualityLimitationResolutionChanges() {
      qualityLimitationResolutionChanges = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getPerDscpPacketsSent() {
      return perDscpPacketsSent;
    }


    /**
      * Sets the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPerDscpPacketsSent(java.lang.Double value) {
      validate(fields()[45], value);
      this.perDscpPacketsSent = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsSent' field has been set.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsSent' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsSent() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPerDscpPacketsSent() {
      perDscpPacketsSent = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }


    /**
      * Sets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[46], value);
      this.nackCount = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * The number of full inter requests happened over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }


    /**
      * Sets the value of the 'firCount' field.
      * The number of full inter requests happened over the corresponding synchronization source (ssrc)
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[47], value);
      this.firCount = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * The number of full inter requests happened over the corresponding synchronization source (ssrc)
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'firCount' field.
      * The number of full inter requests happened over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }


    /**
      * Sets the value of the 'pliCount' field.
      * The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[48], value);
      this.pliCount = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * The number of picture loss indication happened received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'sliCount' field.
      * The number of slice loss indication happened over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getSliCount() {
      return sliCount;
    }


    /**
      * Sets the value of the 'sliCount' field.
      * The number of slice loss indication happened over the corresponding synchronization source (ssrc)
      * @param value The value of 'sliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setSliCount(java.lang.Integer value) {
      validate(fields()[49], value);
      this.sliCount = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'sliCount' field has been set.
      * The number of slice loss indication happened over the corresponding synchronization source (ssrc)
      * @return True if the 'sliCount' field has been set, false otherwise.
      */
    public boolean hasSliCount() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'sliCount' field.
      * The number of slice loss indication happened over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearSliCount() {
      sliCount = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @return The value.
      */
    public java.lang.String getEncoderImplementation() {
      return encoderImplementation;
    }


    /**
      * Sets the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @param value The value of 'encoderImplementation'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEncoderImplementation(java.lang.String value) {
      validate(fields()[50], value);
      this.encoderImplementation = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'encoderImplementation' field has been set.
      * Indicate the name of the encoder implementation library
      * @return True if the 'encoderImplementation' field has been set, false otherwise.
      */
    public boolean hasEncoderImplementation() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEncoderImplementation() {
      encoderImplementation = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }


    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[51], value);
      this.packetsReceived = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded synchronization source
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }


    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[52], value);
      this.packetsLost = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of bytes received on the corresponded synchronization source
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }


    /**
      * Sets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setJitter(java.lang.Double value) {
      validate(fields()[53], value);
      this.jitter = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The corresponded synchronization source reported jitter
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }


    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[54], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsRepaired() {
      return packetsRepaired;
    }


    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPacketsRepaired(java.lang.Integer value) {
      validate(fields()[55], value);
      this.packetsRepaired = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsLost() {
      return burstPacketsLost;
    }


    /**
      * Sets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @param value The value of 'burstPacketsLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstPacketsLost(java.lang.Integer value) {
      validate(fields()[56], value);
      this.burstPacketsLost = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsLost' field has been set.
      * The total number of packets lost in burst (RFC6958)
      * @return True if the 'burstPacketsLost' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsLost() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstPacketsLost() {
      burstPacketsLost = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsDiscarded() {
      return burstPacketsDiscarded;
    }


    /**
      * Sets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @param value The value of 'burstPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[57], value);
      this.burstPacketsDiscarded = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsDiscarded' field has been set.
      * The total number of packets discarded in burst (RFC6958)
      * @return True if the 'burstPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsDiscarded() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstPacketsDiscarded() {
      burstPacketsDiscarded = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstLossCount() {
      return burstLossCount;
    }


    /**
      * Sets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @param value The value of 'burstLossCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstLossCount(java.lang.Integer value) {
      validate(fields()[58], value);
      this.burstLossCount = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossCount' field has been set.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return True if the 'burstLossCount' field has been set, false otherwise.
      */
    public boolean hasBurstLossCount() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstLossCount() {
      burstLossCount = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstDiscardCount() {
      return burstDiscardCount;
    }


    /**
      * Sets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @param value The value of 'burstDiscardCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstDiscardCount(java.lang.Integer value) {
      validate(fields()[59], value);
      this.burstDiscardCount = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardCount' field has been set.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return True if the 'burstDiscardCount' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardCount() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstDiscardCount() {
      burstDiscardCount = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstLossRate() {
      return burstLossRate;
    }


    /**
      * Sets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstLossRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstLossRate(java.lang.Double value) {
      validate(fields()[60], value);
      this.burstLossRate = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossRate' field has been set.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstLossRate' field has been set, false otherwise.
      */
    public boolean hasBurstLossRate() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstLossRate() {
      burstLossRate = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstDiscardRate() {
      return burstDiscardRate;
    }


    /**
      * Sets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstDiscardRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setBurstDiscardRate(java.lang.Double value) {
      validate(fields()[61], value);
      this.burstDiscardRate = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardRate' field has been set.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstDiscardRate' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardRate() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearBurstDiscardRate() {
      burstDiscardRate = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapLossRate() {
      return gapLossRate;
    }


    /**
      * Sets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapLossRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setGapLossRate(java.lang.Double value) {
      validate(fields()[62], value);
      this.gapLossRate = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'gapLossRate' field has been set.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapLossRate' field has been set, false otherwise.
      */
    public boolean hasGapLossRate() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearGapLossRate() {
      gapLossRate = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapDiscardRate() {
      return gapDiscardRate;
    }


    /**
      * Sets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapDiscardRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setGapDiscardRate(java.lang.Double value) {
      validate(fields()[63], value);
      this.gapDiscardRate = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'gapDiscardRate' field has been set.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapDiscardRate' field has been set, false otherwise.
      */
    public boolean hasGapDiscardRate() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearGapDiscardRate() {
      gapDiscardRate = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDropped' field.
      * The number of frames dropped over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesDropped() {
      return framesDropped;
    }


    /**
      * Sets the value of the 'framesDropped' field.
      * The number of frames dropped over the corresponded synchronization source
      * @param value The value of 'framesDropped'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFramesDropped(java.lang.Integer value) {
      validate(fields()[64], value);
      this.framesDropped = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDropped' field has been set.
      * The number of frames dropped over the corresponded synchronization source
      * @return True if the 'framesDropped' field has been set, false otherwise.
      */
    public boolean hasFramesDropped() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'framesDropped' field.
      * The number of frames dropped over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFramesDropped() {
      framesDropped = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'partialFramesLost' field.
      * The number of partial frames lost over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPartialFramesLost() {
      return partialFramesLost;
    }


    /**
      * Sets the value of the 'partialFramesLost' field.
      * The number of partial frames lost over the corresponded synchronization source
      * @param value The value of 'partialFramesLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPartialFramesLost(java.lang.Integer value) {
      validate(fields()[65], value);
      this.partialFramesLost = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'partialFramesLost' field has been set.
      * The number of partial frames lost over the corresponded synchronization source
      * @return True if the 'partialFramesLost' field has been set, false otherwise.
      */
    public boolean hasPartialFramesLost() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'partialFramesLost' field.
      * The number of partial frames lost over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPartialFramesLost() {
      partialFramesLost = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullFramesLost' field.
      * The number of full frames lost over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFullFramesLost() {
      return fullFramesLost;
    }


    /**
      * Sets the value of the 'fullFramesLost' field.
      * The number of full frames lost over the corresponded synchronization source
      * @param value The value of 'fullFramesLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFullFramesLost(java.lang.Integer value) {
      validate(fields()[66], value);
      this.fullFramesLost = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'fullFramesLost' field has been set.
      * The number of full frames lost over the corresponded synchronization source
      * @return True if the 'fullFramesLost' field has been set, false otherwise.
      */
    public boolean hasFullFramesLost() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'fullFramesLost' field.
      * The number of full frames lost over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFullFramesLost() {
      fullFramesLost = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getRoundTripTime() {
      return roundTripTime;
    }


    /**
      * Sets the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @param value The value of 'roundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRoundTripTime(java.lang.Double value) {
      validate(fields()[67], value);
      this.roundTripTime = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTime' field has been set.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return True if the 'roundTripTime' field has been set, false otherwise.
      */
    public boolean hasRoundTripTime() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRoundTripTime() {
      roundTripTime = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalRoundTripTime() {
      return totalRoundTripTime;
    }


    /**
      * Sets the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @param value The value of 'totalRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setTotalRoundTripTime(java.lang.Double value) {
      validate(fields()[68], value);
      this.totalRoundTripTime = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRoundTripTime' field has been set.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return True if the 'totalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasTotalRoundTripTime() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearTotalRoundTripTime() {
      totalRoundTripTime = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getFractionLost() {
      return fractionLost;
    }


    /**
      * Sets the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @param value The value of 'fractionLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setFractionLost(java.lang.Double value) {
      validate(fields()[69], value);
      this.fractionLost = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'fractionLost' field has been set.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return True if the 'fractionLost' field has been set, false otherwise.
      */
    public boolean hasFractionLost() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearFractionLost() {
      fractionLost = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return The value.
      */
    public java.lang.Integer getReportsReceived() {
      return reportsReceived;
    }


    /**
      * Sets the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @param value The value of 'reportsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setReportsReceived(java.lang.Integer value) {
      validate(fields()[70], value);
      this.reportsReceived = value;
      fieldSetFlags()[70] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsReceived' field has been set.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return True if the 'reportsReceived' field has been set, false otherwise.
      */
    public boolean hasReportsReceived() {
      return fieldSetFlags()[70];
    }


    /**
      * Clears the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearReportsReceived() {
      reportsReceived = null;
      fieldSetFlags()[70] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @return The value.
      */
    public java.lang.Integer getRoundTripTimeMeasurements() {
      return roundTripTimeMeasurements;
    }


    /**
      * Sets the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @param value The value of 'roundTripTimeMeasurements'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRoundTripTimeMeasurements(java.lang.Integer value) {
      validate(fields()[71], value);
      this.roundTripTimeMeasurements = value;
      fieldSetFlags()[71] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTimeMeasurements' field has been set.
      * The total number of calculated RR measurements received on this source
      * @return True if the 'roundTripTimeMeasurements' field has been set, false otherwise.
      */
    public boolean hasRoundTripTimeMeasurements() {
      return fieldSetFlags()[71];
    }


    /**
      * Clears the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRoundTripTimeMeasurements() {
      roundTripTimeMeasurements = null;
      fieldSetFlags()[71] = false;
      return this;
    }

    /**
      * Gets the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return The value.
      */
    public java.lang.Boolean getRelayedSource() {
      return relayedSource;
    }


    /**
      * Sets the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @param value The value of 'relayedSource'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setRelayedSource(java.lang.Boolean value) {
      validate(fields()[72], value);
      this.relayedSource = value;
      fieldSetFlags()[72] = true;
      return this;
    }

    /**
      * Checks whether the 'relayedSource' field has been set.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return True if the 'relayedSource' field has been set, false otherwise.
      */
    public boolean hasRelayedSource() {
      return fieldSetFlags()[72];
    }


    /**
      * Clears the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearRelayedSource() {
      relayedSource = null;
      fieldSetFlags()[72] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameWidth' field.
      * Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameWidth() {
      return encodedFrameWidth;
    }


    /**
      * Sets the value of the 'encodedFrameWidth' field.
      * Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameWidth'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEncodedFrameWidth(java.lang.Integer value) {
      validate(fields()[73], value);
      this.encodedFrameWidth = value;
      fieldSetFlags()[73] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameWidth' field has been set.
      * Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameWidth' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameWidth() {
      return fieldSetFlags()[73];
    }


    /**
      * Clears the value of the 'encodedFrameWidth' field.
      * Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEncodedFrameWidth() {
      encodedFrameWidth = null;
      fieldSetFlags()[73] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameHeight' field.
      * Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameHeight() {
      return encodedFrameHeight;
    }


    /**
      * Sets the value of the 'encodedFrameHeight' field.
      * Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameHeight'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEncodedFrameHeight(java.lang.Integer value) {
      validate(fields()[74], value);
      this.encodedFrameHeight = value;
      fieldSetFlags()[74] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameHeight' field has been set.
      * Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameHeight' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameHeight() {
      return fieldSetFlags()[74];
    }


    /**
      * Clears the value of the 'encodedFrameHeight' field.
      * Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEncodedFrameHeight() {
      encodedFrameHeight = null;
      fieldSetFlags()[74] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameBitDepth' field.
      * Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameBitDepth() {
      return encodedFrameBitDepth;
    }


    /**
      * Sets the value of the 'encodedFrameBitDepth' field.
      * Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameBitDepth'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEncodedFrameBitDepth(java.lang.Integer value) {
      validate(fields()[75], value);
      this.encodedFrameBitDepth = value;
      fieldSetFlags()[75] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameBitDepth' field has been set.
      * Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameBitDepth' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameBitDepth() {
      return fieldSetFlags()[75];
    }


    /**
      * Clears the value of the 'encodedFrameBitDepth' field.
      * Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEncodedFrameBitDepth() {
      encodedFrameBitDepth = null;
      fieldSetFlags()[75] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFramesPerSecond' field.
      * Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getEncodedFramesPerSecond() {
      return encodedFramesPerSecond;
    }


    /**
      * Sets the value of the 'encodedFramesPerSecond' field.
      * Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFramesPerSecond'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEncodedFramesPerSecond(java.lang.Double value) {
      validate(fields()[76], value);
      this.encodedFramesPerSecond = value;
      fieldSetFlags()[76] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFramesPerSecond' field has been set.
      * Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFramesPerSecond' field has been set, false otherwise.
      */
    public boolean hasEncodedFramesPerSecond() {
      return fieldSetFlags()[76];
    }


    /**
      * Clears the value of the 'encodedFramesPerSecond' field.
      * Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEncodedFramesPerSecond() {
      encodedFramesPerSecond = null;
      fieldSetFlags()[76] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @return The value.
      */
    public java.lang.Boolean getEnded() {
      return ended;
    }


    /**
      * Sets the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setEnded(java.lang.Boolean value) {
      validate(fields()[77], value);
      this.ended = value;
      fieldSetFlags()[77] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * Flag represents if the sender ended the media stream track or not.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[77];
    }


    /**
      * Clears the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearEnded() {
      ended = null;
      fieldSetFlags()[77] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }


    /**
      * Sets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[78], value);
      this.payloadType = value;
      fieldSetFlags()[78] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The type of the payload the RTP packet SSRC belongs to
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[78];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[78] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }


    /**
      * Sets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[79], value);
      this.mimeType = value;
      fieldSetFlags()[79] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[79];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[79] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }


    /**
      * Sets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[80], value);
      this.clockRate = value;
      fieldSetFlags()[80] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[80];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[80] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return The value.
      */
    public java.lang.Integer getChannels() {
      return channels;
    }


    /**
      * Sets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setChannels(java.lang.Integer value) {
      validate(fields()[81], value);
      this.channels = value;
      fieldSetFlags()[81] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[81];
    }


    /**
      * Clears the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[81] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }


    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[82], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[82] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[82];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return This builder.
      */
    public org.observertc.schemas.reports.OutboundVideoTrackReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[82] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OutboundVideoTrackReport build() {
      try {
        OutboundVideoTrackReport record = new OutboundVideoTrackReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.trackId = fieldSetFlags()[10] ? this.trackId : (java.lang.String) defaultValue(fields()[10]);
        record.sfuStreamId = fieldSetFlags()[11] ? this.sfuStreamId : (java.lang.String) defaultValue(fields()[11]);
        record.sampleSeq = fieldSetFlags()[12] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[12]);
        record.ssrc = fieldSetFlags()[13] ? this.ssrc : (java.lang.Long) defaultValue(fields()[13]);
        record.packetsSent = fieldSetFlags()[14] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[14]);
        record.bytesSent = fieldSetFlags()[15] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[15]);
        record.rid = fieldSetFlags()[16] ? this.rid : (java.lang.String) defaultValue(fields()[16]);
        record.lastPacketSentTimestamp = fieldSetFlags()[17] ? this.lastPacketSentTimestamp : (java.lang.Long) defaultValue(fields()[17]);
        record.headerBytesSent = fieldSetFlags()[18] ? this.headerBytesSent : (java.lang.Long) defaultValue(fields()[18]);
        record.packetsDiscardedOnSend = fieldSetFlags()[19] ? this.packetsDiscardedOnSend : (java.lang.Integer) defaultValue(fields()[19]);
        record.bytesDiscardedOnSend = fieldSetFlags()[20] ? this.bytesDiscardedOnSend : (java.lang.Long) defaultValue(fields()[20]);
        record.fecPacketsSent = fieldSetFlags()[21] ? this.fecPacketsSent : (java.lang.Integer) defaultValue(fields()[21]);
        record.retransmittedPacketsSent = fieldSetFlags()[22] ? this.retransmittedPacketsSent : (java.lang.Integer) defaultValue(fields()[22]);
        record.retransmittedBytesSent = fieldSetFlags()[23] ? this.retransmittedBytesSent : (java.lang.Long) defaultValue(fields()[23]);
        record.targetBitrate = fieldSetFlags()[24] ? this.targetBitrate : (java.lang.Long) defaultValue(fields()[24]);
        record.totalEncodedBytesTarget = fieldSetFlags()[25] ? this.totalEncodedBytesTarget : (java.lang.Long) defaultValue(fields()[25]);
        record.frameWidth = fieldSetFlags()[26] ? this.frameWidth : (java.lang.Integer) defaultValue(fields()[26]);
        record.frameHeight = fieldSetFlags()[27] ? this.frameHeight : (java.lang.Integer) defaultValue(fields()[27]);
        record.frameBitDepth = fieldSetFlags()[28] ? this.frameBitDepth : (java.lang.Integer) defaultValue(fields()[28]);
        record.framesPerSecond = fieldSetFlags()[29] ? this.framesPerSecond : (java.lang.Double) defaultValue(fields()[29]);
        record.framesSent = fieldSetFlags()[30] ? this.framesSent : (java.lang.Integer) defaultValue(fields()[30]);
        record.hugeFramesSent = fieldSetFlags()[31] ? this.hugeFramesSent : (java.lang.Integer) defaultValue(fields()[31]);
        record.framesEncoded = fieldSetFlags()[32] ? this.framesEncoded : (java.lang.Integer) defaultValue(fields()[32]);
        record.keyFramesEncoded = fieldSetFlags()[33] ? this.keyFramesEncoded : (java.lang.Integer) defaultValue(fields()[33]);
        record.framesDiscardedOnSend = fieldSetFlags()[34] ? this.framesDiscardedOnSend : (java.lang.Integer) defaultValue(fields()[34]);
        record.qpSum = fieldSetFlags()[35] ? this.qpSum : (java.lang.Long) defaultValue(fields()[35]);
        record.totalEncodeTime = fieldSetFlags()[36] ? this.totalEncodeTime : (java.lang.Double) defaultValue(fields()[36]);
        record.totalPacketSendDelay = fieldSetFlags()[37] ? this.totalPacketSendDelay : (java.lang.Double) defaultValue(fields()[37]);
        record.averageRtcpInterval = fieldSetFlags()[38] ? this.averageRtcpInterval : (java.lang.Double) defaultValue(fields()[38]);
        record.qualityLimitationDurationCPU = fieldSetFlags()[39] ? this.qualityLimitationDurationCPU : (java.lang.Double) defaultValue(fields()[39]);
        record.qualityLimitationDurationNone = fieldSetFlags()[40] ? this.qualityLimitationDurationNone : (java.lang.Double) defaultValue(fields()[40]);
        record.qualityLimitationDurationBandwidth = fieldSetFlags()[41] ? this.qualityLimitationDurationBandwidth : (java.lang.Double) defaultValue(fields()[41]);
        record.qualityLimitationDurationOther = fieldSetFlags()[42] ? this.qualityLimitationDurationOther : (java.lang.Double) defaultValue(fields()[42]);
        record.qualityLimitationReason = fieldSetFlags()[43] ? this.qualityLimitationReason : (java.lang.String) defaultValue(fields()[43]);
        record.qualityLimitationResolutionChanges = fieldSetFlags()[44] ? this.qualityLimitationResolutionChanges : (java.lang.Integer) defaultValue(fields()[44]);
        record.perDscpPacketsSent = fieldSetFlags()[45] ? this.perDscpPacketsSent : (java.lang.Double) defaultValue(fields()[45]);
        record.nackCount = fieldSetFlags()[46] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[46]);
        record.firCount = fieldSetFlags()[47] ? this.firCount : (java.lang.Integer) defaultValue(fields()[47]);
        record.pliCount = fieldSetFlags()[48] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[48]);
        record.sliCount = fieldSetFlags()[49] ? this.sliCount : (java.lang.Integer) defaultValue(fields()[49]);
        record.encoderImplementation = fieldSetFlags()[50] ? this.encoderImplementation : (java.lang.String) defaultValue(fields()[50]);
        record.packetsReceived = fieldSetFlags()[51] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[51]);
        record.packetsLost = fieldSetFlags()[52] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[52]);
        record.jitter = fieldSetFlags()[53] ? this.jitter : (java.lang.Double) defaultValue(fields()[53]);
        record.packetsDiscarded = fieldSetFlags()[54] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[54]);
        record.packetsRepaired = fieldSetFlags()[55] ? this.packetsRepaired : (java.lang.Integer) defaultValue(fields()[55]);
        record.burstPacketsLost = fieldSetFlags()[56] ? this.burstPacketsLost : (java.lang.Integer) defaultValue(fields()[56]);
        record.burstPacketsDiscarded = fieldSetFlags()[57] ? this.burstPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[57]);
        record.burstLossCount = fieldSetFlags()[58] ? this.burstLossCount : (java.lang.Integer) defaultValue(fields()[58]);
        record.burstDiscardCount = fieldSetFlags()[59] ? this.burstDiscardCount : (java.lang.Integer) defaultValue(fields()[59]);
        record.burstLossRate = fieldSetFlags()[60] ? this.burstLossRate : (java.lang.Double) defaultValue(fields()[60]);
        record.burstDiscardRate = fieldSetFlags()[61] ? this.burstDiscardRate : (java.lang.Double) defaultValue(fields()[61]);
        record.gapLossRate = fieldSetFlags()[62] ? this.gapLossRate : (java.lang.Double) defaultValue(fields()[62]);
        record.gapDiscardRate = fieldSetFlags()[63] ? this.gapDiscardRate : (java.lang.Double) defaultValue(fields()[63]);
        record.framesDropped = fieldSetFlags()[64] ? this.framesDropped : (java.lang.Integer) defaultValue(fields()[64]);
        record.partialFramesLost = fieldSetFlags()[65] ? this.partialFramesLost : (java.lang.Integer) defaultValue(fields()[65]);
        record.fullFramesLost = fieldSetFlags()[66] ? this.fullFramesLost : (java.lang.Integer) defaultValue(fields()[66]);
        record.roundTripTime = fieldSetFlags()[67] ? this.roundTripTime : (java.lang.Double) defaultValue(fields()[67]);
        record.totalRoundTripTime = fieldSetFlags()[68] ? this.totalRoundTripTime : (java.lang.Double) defaultValue(fields()[68]);
        record.fractionLost = fieldSetFlags()[69] ? this.fractionLost : (java.lang.Double) defaultValue(fields()[69]);
        record.reportsReceived = fieldSetFlags()[70] ? this.reportsReceived : (java.lang.Integer) defaultValue(fields()[70]);
        record.roundTripTimeMeasurements = fieldSetFlags()[71] ? this.roundTripTimeMeasurements : (java.lang.Integer) defaultValue(fields()[71]);
        record.relayedSource = fieldSetFlags()[72] ? this.relayedSource : (java.lang.Boolean) defaultValue(fields()[72]);
        record.encodedFrameWidth = fieldSetFlags()[73] ? this.encodedFrameWidth : (java.lang.Integer) defaultValue(fields()[73]);
        record.encodedFrameHeight = fieldSetFlags()[74] ? this.encodedFrameHeight : (java.lang.Integer) defaultValue(fields()[74]);
        record.encodedFrameBitDepth = fieldSetFlags()[75] ? this.encodedFrameBitDepth : (java.lang.Integer) defaultValue(fields()[75]);
        record.encodedFramesPerSecond = fieldSetFlags()[76] ? this.encodedFramesPerSecond : (java.lang.Double) defaultValue(fields()[76]);
        record.ended = fieldSetFlags()[77] ? this.ended : (java.lang.Boolean) defaultValue(fields()[77]);
        record.payloadType = fieldSetFlags()[78] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[78]);
        record.mimeType = fieldSetFlags()[79] ? this.mimeType : (java.lang.String) defaultValue(fields()[79]);
        record.clockRate = fieldSetFlags()[80] ? this.clockRate : (java.lang.Long) defaultValue(fields()[80]);
        record.channels = fieldSetFlags()[81] ? this.channels : (java.lang.Integer) defaultValue(fields()[81]);
        record.sdpFmtpLine = fieldSetFlags()[82] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[82]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OutboundVideoTrackReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<OutboundVideoTrackReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OutboundVideoTrackReport>
    READER$ = (org.apache.avro.io.DatumReader<OutboundVideoTrackReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.serviceId);

    out.writeString(this.mediaUnitId);

    if (this.marker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marker);
    }

    out.writeLong(this.timestamp);

    out.writeString(this.callId);

    if (this.roomId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.roomId);
    }

    out.writeString(this.clientId);

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    out.writeString(this.peerConnectionId);

    if (this.label == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.label);
    }

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

    if (this.sfuStreamId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sfuStreamId);
    }

    out.writeInt(this.sampleSeq);

    out.writeLong(this.ssrc);

    if (this.packetsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsSent);
    }

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.rid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.rid);
    }

    if (this.lastPacketSentTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.lastPacketSentTimestamp);
    }

    if (this.headerBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.headerBytesSent);
    }

    if (this.packetsDiscardedOnSend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDiscardedOnSend);
    }

    if (this.bytesDiscardedOnSend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesDiscardedOnSend);
    }

    if (this.fecPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsSent);
    }

    if (this.retransmittedPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.retransmittedPacketsSent);
    }

    if (this.retransmittedBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.retransmittedBytesSent);
    }

    if (this.targetBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.targetBitrate);
    }

    if (this.totalEncodedBytesTarget == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.totalEncodedBytesTarget);
    }

    if (this.frameWidth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.frameWidth);
    }

    if (this.frameHeight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.frameHeight);
    }

    if (this.frameBitDepth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.frameBitDepth);
    }

    if (this.framesPerSecond == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.framesPerSecond);
    }

    if (this.framesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesSent);
    }

    if (this.hugeFramesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.hugeFramesSent);
    }

    if (this.framesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesEncoded);
    }

    if (this.keyFramesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.keyFramesEncoded);
    }

    if (this.framesDiscardedOnSend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDiscardedOnSend);
    }

    if (this.qpSum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.qpSum);
    }

    if (this.totalEncodeTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalEncodeTime);
    }

    if (this.totalPacketSendDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalPacketSendDelay);
    }

    if (this.averageRtcpInterval == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.averageRtcpInterval);
    }

    if (this.qualityLimitationDurationCPU == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qualityLimitationDurationCPU);
    }

    if (this.qualityLimitationDurationNone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qualityLimitationDurationNone);
    }

    if (this.qualityLimitationDurationBandwidth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qualityLimitationDurationBandwidth);
    }

    if (this.qualityLimitationDurationOther == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qualityLimitationDurationOther);
    }

    if (this.qualityLimitationReason == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qualityLimitationReason);
    }

    if (this.qualityLimitationResolutionChanges == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.qualityLimitationResolutionChanges);
    }

    if (this.perDscpPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.perDscpPacketsSent);
    }

    if (this.nackCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nackCount);
    }

    if (this.firCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.firCount);
    }

    if (this.pliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pliCount);
    }

    if (this.sliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sliCount);
    }

    if (this.encoderImplementation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.encoderImplementation);
    }

    if (this.packetsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsReceived);
    }

    if (this.packetsLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsLost);
    }

    if (this.jitter == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.jitter);
    }

    if (this.packetsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDiscarded);
    }

    if (this.packetsRepaired == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsRepaired);
    }

    if (this.burstPacketsLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.burstPacketsLost);
    }

    if (this.burstPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.burstPacketsDiscarded);
    }

    if (this.burstLossCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.burstLossCount);
    }

    if (this.burstDiscardCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.burstDiscardCount);
    }

    if (this.burstLossRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.burstLossRate);
    }

    if (this.burstDiscardRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.burstDiscardRate);
    }

    if (this.gapLossRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.gapLossRate);
    }

    if (this.gapDiscardRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.gapDiscardRate);
    }

    if (this.framesDropped == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDropped);
    }

    if (this.partialFramesLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.partialFramesLost);
    }

    if (this.fullFramesLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fullFramesLost);
    }

    if (this.roundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.roundTripTime);
    }

    if (this.totalRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalRoundTripTime);
    }

    if (this.fractionLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.fractionLost);
    }

    if (this.reportsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.reportsReceived);
    }

    if (this.roundTripTimeMeasurements == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.roundTripTimeMeasurements);
    }

    if (this.relayedSource == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.relayedSource);
    }

    if (this.encodedFrameWidth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.encodedFrameWidth);
    }

    if (this.encodedFrameHeight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.encodedFrameHeight);
    }

    if (this.encodedFrameBitDepth == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.encodedFrameBitDepth);
    }

    if (this.encodedFramesPerSecond == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.encodedFramesPerSecond);
    }

    if (this.ended == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.ended);
    }

    if (this.payloadType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.payloadType);
    }

    if (this.mimeType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mimeType);
    }

    if (this.clockRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.clockRate);
    }

    if (this.channels == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.channels);
    }

    if (this.sdpFmtpLine == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sdpFmtpLine);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.serviceId = in.readString();

      this.mediaUnitId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.marker = null;
      } else {
        this.marker = in.readString();
      }

      this.timestamp = in.readLong();

      this.callId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.roomId = null;
      } else {
        this.roomId = in.readString();
      }

      this.clientId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      this.peerConnectionId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.label = null;
      } else {
        this.label = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sfuStreamId = null;
      } else {
        this.sfuStreamId = in.readString();
      }

      this.sampleSeq = in.readInt();

      this.ssrc = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsSent = null;
      } else {
        this.packetsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rid = null;
      } else {
        this.rid = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastPacketSentTimestamp = null;
      } else {
        this.lastPacketSentTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.headerBytesSent = null;
      } else {
        this.headerBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDiscardedOnSend = null;
      } else {
        this.packetsDiscardedOnSend = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesDiscardedOnSend = null;
      } else {
        this.bytesDiscardedOnSend = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsSent = null;
      } else {
        this.fecPacketsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.retransmittedPacketsSent = null;
      } else {
        this.retransmittedPacketsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.retransmittedBytesSent = null;
      } else {
        this.retransmittedBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.targetBitrate = null;
      } else {
        this.targetBitrate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalEncodedBytesTarget = null;
      } else {
        this.totalEncodedBytesTarget = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.frameWidth = null;
      } else {
        this.frameWidth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.frameHeight = null;
      } else {
        this.frameHeight = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.frameBitDepth = null;
      } else {
        this.frameBitDepth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesPerSecond = null;
      } else {
        this.framesPerSecond = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesSent = null;
      } else {
        this.framesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hugeFramesSent = null;
      } else {
        this.hugeFramesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesEncoded = null;
      } else {
        this.framesEncoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyFramesEncoded = null;
      } else {
        this.keyFramesEncoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDiscardedOnSend = null;
      } else {
        this.framesDiscardedOnSend = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qpSum = null;
      } else {
        this.qpSum = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalEncodeTime = null;
      } else {
        this.totalEncodeTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalPacketSendDelay = null;
      } else {
        this.totalPacketSendDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.averageRtcpInterval = null;
      } else {
        this.averageRtcpInterval = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationDurationCPU = null;
      } else {
        this.qualityLimitationDurationCPU = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationDurationNone = null;
      } else {
        this.qualityLimitationDurationNone = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationDurationBandwidth = null;
      } else {
        this.qualityLimitationDurationBandwidth = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationDurationOther = null;
      } else {
        this.qualityLimitationDurationOther = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationReason = null;
      } else {
        this.qualityLimitationReason = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualityLimitationResolutionChanges = null;
      } else {
        this.qualityLimitationResolutionChanges = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.perDscpPacketsSent = null;
      } else {
        this.perDscpPacketsSent = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nackCount = null;
      } else {
        this.nackCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firCount = null;
      } else {
        this.firCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pliCount = null;
      } else {
        this.pliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sliCount = null;
      } else {
        this.sliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encoderImplementation = null;
      } else {
        this.encoderImplementation = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsReceived = null;
      } else {
        this.packetsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsLost = null;
      } else {
        this.packetsLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitter = null;
      } else {
        this.jitter = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDiscarded = null;
      } else {
        this.packetsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsRepaired = null;
      } else {
        this.packetsRepaired = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstPacketsLost = null;
      } else {
        this.burstPacketsLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstPacketsDiscarded = null;
      } else {
        this.burstPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstLossCount = null;
      } else {
        this.burstLossCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstDiscardCount = null;
      } else {
        this.burstDiscardCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstLossRate = null;
      } else {
        this.burstLossRate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.burstDiscardRate = null;
      } else {
        this.burstDiscardRate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gapLossRate = null;
      } else {
        this.gapLossRate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gapDiscardRate = null;
      } else {
        this.gapDiscardRate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDropped = null;
      } else {
        this.framesDropped = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.partialFramesLost = null;
      } else {
        this.partialFramesLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fullFramesLost = null;
      } else {
        this.fullFramesLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.roundTripTime = null;
      } else {
        this.roundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalRoundTripTime = null;
      } else {
        this.totalRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fractionLost = null;
      } else {
        this.fractionLost = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.reportsReceived = null;
      } else {
        this.reportsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.roundTripTimeMeasurements = null;
      } else {
        this.roundTripTimeMeasurements = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.relayedSource = null;
      } else {
        this.relayedSource = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encodedFrameWidth = null;
      } else {
        this.encodedFrameWidth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encodedFrameHeight = null;
      } else {
        this.encodedFrameHeight = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encodedFrameBitDepth = null;
      } else {
        this.encodedFrameBitDepth = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.encodedFramesPerSecond = null;
      } else {
        this.encodedFramesPerSecond = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ended = null;
      } else {
        this.ended = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payloadType = null;
      } else {
        this.payloadType = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mimeType = null;
      } else {
        this.mimeType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clockRate = null;
      } else {
        this.clockRate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.channels = null;
      } else {
        this.channels = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sdpFmtpLine = null;
      } else {
        this.sdpFmtpLine = in.readString();
      }

    } else {
      for (int i = 0; i < 83; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.serviceId = in.readString();
          break;

        case 1:
          this.mediaUnitId = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marker = null;
          } else {
            this.marker = in.readString();
          }
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          this.callId = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roomId = null;
          } else {
            this.roomId = in.readString();
          }
          break;

        case 6:
          this.clientId = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 8:
          this.peerConnectionId = in.readString();
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.label = null;
          } else {
            this.label = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sfuStreamId = null;
          } else {
            this.sfuStreamId = in.readString();
          }
          break;

        case 12:
          this.sampleSeq = in.readInt();
          break;

        case 13:
          this.ssrc = in.readLong();
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsSent = null;
          } else {
            this.packetsSent = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rid = null;
          } else {
            this.rid = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastPacketSentTimestamp = null;
          } else {
            this.lastPacketSentTimestamp = in.readLong();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.headerBytesSent = null;
          } else {
            this.headerBytesSent = in.readLong();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDiscardedOnSend = null;
          } else {
            this.packetsDiscardedOnSend = in.readInt();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesDiscardedOnSend = null;
          } else {
            this.bytesDiscardedOnSend = in.readLong();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsSent = null;
          } else {
            this.fecPacketsSent = in.readInt();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.retransmittedPacketsSent = null;
          } else {
            this.retransmittedPacketsSent = in.readInt();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.retransmittedBytesSent = null;
          } else {
            this.retransmittedBytesSent = in.readLong();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.targetBitrate = null;
          } else {
            this.targetBitrate = in.readLong();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalEncodedBytesTarget = null;
          } else {
            this.totalEncodedBytesTarget = in.readLong();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.frameWidth = null;
          } else {
            this.frameWidth = in.readInt();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.frameHeight = null;
          } else {
            this.frameHeight = in.readInt();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.frameBitDepth = null;
          } else {
            this.frameBitDepth = in.readInt();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesPerSecond = null;
          } else {
            this.framesPerSecond = in.readDouble();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesSent = null;
          } else {
            this.framesSent = in.readInt();
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hugeFramesSent = null;
          } else {
            this.hugeFramesSent = in.readInt();
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesEncoded = null;
          } else {
            this.framesEncoded = in.readInt();
          }
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyFramesEncoded = null;
          } else {
            this.keyFramesEncoded = in.readInt();
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDiscardedOnSend = null;
          } else {
            this.framesDiscardedOnSend = in.readInt();
          }
          break;

        case 35:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qpSum = null;
          } else {
            this.qpSum = in.readLong();
          }
          break;

        case 36:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalEncodeTime = null;
          } else {
            this.totalEncodeTime = in.readDouble();
          }
          break;

        case 37:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalPacketSendDelay = null;
          } else {
            this.totalPacketSendDelay = in.readDouble();
          }
          break;

        case 38:
          if (in.readIndex() != 1) {
            in.readNull();
            this.averageRtcpInterval = null;
          } else {
            this.averageRtcpInterval = in.readDouble();
          }
          break;

        case 39:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationDurationCPU = null;
          } else {
            this.qualityLimitationDurationCPU = in.readDouble();
          }
          break;

        case 40:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationDurationNone = null;
          } else {
            this.qualityLimitationDurationNone = in.readDouble();
          }
          break;

        case 41:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationDurationBandwidth = null;
          } else {
            this.qualityLimitationDurationBandwidth = in.readDouble();
          }
          break;

        case 42:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationDurationOther = null;
          } else {
            this.qualityLimitationDurationOther = in.readDouble();
          }
          break;

        case 43:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationReason = null;
          } else {
            this.qualityLimitationReason = in.readString();
          }
          break;

        case 44:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualityLimitationResolutionChanges = null;
          } else {
            this.qualityLimitationResolutionChanges = in.readInt();
          }
          break;

        case 45:
          if (in.readIndex() != 1) {
            in.readNull();
            this.perDscpPacketsSent = null;
          } else {
            this.perDscpPacketsSent = in.readDouble();
          }
          break;

        case 46:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nackCount = null;
          } else {
            this.nackCount = in.readInt();
          }
          break;

        case 47:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firCount = null;
          } else {
            this.firCount = in.readInt();
          }
          break;

        case 48:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pliCount = null;
          } else {
            this.pliCount = in.readInt();
          }
          break;

        case 49:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sliCount = null;
          } else {
            this.sliCount = in.readInt();
          }
          break;

        case 50:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encoderImplementation = null;
          } else {
            this.encoderImplementation = in.readString();
          }
          break;

        case 51:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsReceived = null;
          } else {
            this.packetsReceived = in.readInt();
          }
          break;

        case 52:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsLost = null;
          } else {
            this.packetsLost = in.readInt();
          }
          break;

        case 53:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitter = null;
          } else {
            this.jitter = in.readDouble();
          }
          break;

        case 54:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDiscarded = null;
          } else {
            this.packetsDiscarded = in.readInt();
          }
          break;

        case 55:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsRepaired = null;
          } else {
            this.packetsRepaired = in.readInt();
          }
          break;

        case 56:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstPacketsLost = null;
          } else {
            this.burstPacketsLost = in.readInt();
          }
          break;

        case 57:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstPacketsDiscarded = null;
          } else {
            this.burstPacketsDiscarded = in.readInt();
          }
          break;

        case 58:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstLossCount = null;
          } else {
            this.burstLossCount = in.readInt();
          }
          break;

        case 59:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstDiscardCount = null;
          } else {
            this.burstDiscardCount = in.readInt();
          }
          break;

        case 60:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstLossRate = null;
          } else {
            this.burstLossRate = in.readDouble();
          }
          break;

        case 61:
          if (in.readIndex() != 1) {
            in.readNull();
            this.burstDiscardRate = null;
          } else {
            this.burstDiscardRate = in.readDouble();
          }
          break;

        case 62:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gapLossRate = null;
          } else {
            this.gapLossRate = in.readDouble();
          }
          break;

        case 63:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gapDiscardRate = null;
          } else {
            this.gapDiscardRate = in.readDouble();
          }
          break;

        case 64:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDropped = null;
          } else {
            this.framesDropped = in.readInt();
          }
          break;

        case 65:
          if (in.readIndex() != 1) {
            in.readNull();
            this.partialFramesLost = null;
          } else {
            this.partialFramesLost = in.readInt();
          }
          break;

        case 66:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fullFramesLost = null;
          } else {
            this.fullFramesLost = in.readInt();
          }
          break;

        case 67:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roundTripTime = null;
          } else {
            this.roundTripTime = in.readDouble();
          }
          break;

        case 68:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalRoundTripTime = null;
          } else {
            this.totalRoundTripTime = in.readDouble();
          }
          break;

        case 69:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fractionLost = null;
          } else {
            this.fractionLost = in.readDouble();
          }
          break;

        case 70:
          if (in.readIndex() != 1) {
            in.readNull();
            this.reportsReceived = null;
          } else {
            this.reportsReceived = in.readInt();
          }
          break;

        case 71:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roundTripTimeMeasurements = null;
          } else {
            this.roundTripTimeMeasurements = in.readInt();
          }
          break;

        case 72:
          if (in.readIndex() != 1) {
            in.readNull();
            this.relayedSource = null;
          } else {
            this.relayedSource = in.readBoolean();
          }
          break;

        case 73:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encodedFrameWidth = null;
          } else {
            this.encodedFrameWidth = in.readInt();
          }
          break;

        case 74:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encodedFrameHeight = null;
          } else {
            this.encodedFrameHeight = in.readInt();
          }
          break;

        case 75:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encodedFrameBitDepth = null;
          } else {
            this.encodedFrameBitDepth = in.readInt();
          }
          break;

        case 76:
          if (in.readIndex() != 1) {
            in.readNull();
            this.encodedFramesPerSecond = null;
          } else {
            this.encodedFramesPerSecond = in.readDouble();
          }
          break;

        case 77:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ended = null;
          } else {
            this.ended = in.readBoolean();
          }
          break;

        case 78:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payloadType = null;
          } else {
            this.payloadType = in.readInt();
          }
          break;

        case 79:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mimeType = null;
          } else {
            this.mimeType = in.readString();
          }
          break;

        case 80:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clockRate = null;
          } else {
            this.clockRate = in.readLong();
          }
          break;

        case 81:
          if (in.readIndex() != 1) {
            in.readNull();
            this.channels = null;
          } else {
            this.channels = in.readInt();
          }
          break;

        case 82:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sdpFmtpLine = null;
          } else {
            this.sdpFmtpLine = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










