/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for Outbound Audio Tracks. A combination of Audio source, Codec metadata carrying outbound and remote inbound RTP stat measurements */
@org.apache.avro.specific.AvroGenerated
public class OutboundAudioTrackReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1119814200896612428L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutboundAudioTrackReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for Outbound Audio Tracks. A combination of Audio source, Codec metadata carrying outbound and remote inbound RTP stat measurements\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is labeled with\",\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track\",\"default\":null},{\"name\":\"rtpStreamId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the RTP stream connected to a remote media unit (such as an SFU)\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The RTP SSRC field\"},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets sent on the corresponded synchronization source\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes sent on the corresponded synchronization source\",\"default\":null},{\"name\":\"rid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" The rid encoding parameter of the corresponded synchronization source\",\"default\":null},{\"name\":\"lastPacketSentTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\" the timestamp the last packet was sent. (UTC epoch in ms)\",\"default\":null},{\"name\":\"headerBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"packetsDiscardedOnSend\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"bytesDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"retransmittedPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"retransmittedBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"targetBitrate\",\"type\":[\"null\",\"long\"],\"doc\":\"Reflects the current encoder target in bits per second.\",\"default\":null},{\"name\":\"totalEncodedBytesTarget\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets\",\"default\":null},{\"name\":\"totalSamplesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of samples sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"samplesEncodedWithSilk\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"samplesEncodedWithCelt\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"voiceActivityFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header\",\"default\":null},{\"name\":\"totalPacketSendDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source\",\"default\":null},{\"name\":\"averageRtcpInterval\",\"type\":[\"null\",\"double\"],\"doc\":\"The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"perDscpPacketsSent\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"encoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Indicate the name of the encoder implementation library\",\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded synchronization source\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of bytes received on the corresponded synchronization source\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The corresponded synchronization source reported jitter\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets missed the playout point and therefore discarded by the jitterbuffer\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source\",\"default\":null},{\"name\":\"burstPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost in burst (RFC6958)\",\"default\":null},{\"name\":\"burstPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets discarded in burst (RFC6958)\",\"default\":null},{\"name\":\"burstLossCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsLost on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"roundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"RTT measurement in seconds based on (mo","st likely) SR, and RR belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"totalRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of RTT measurements belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"fractionLost\",\"type\":[\"null\",\"double\"],\"doc\":\"The receiver reported fractional lost belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"reportsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of RR reports received, which is the base of the remote inbound calculation on this source\",\"default\":null},{\"name\":\"roundTripTimeMeasurements\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of calculated RR measurements received on this source\",\"default\":null},{\"name\":\"relayedSource\",\"type\":[\"null\",\"boolean\"],\"doc\":\"True if the corresponded media source is remote, false otherwise (or null depending on browser and version)\",\"default\":null},{\"name\":\"audioLevel\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the audio level reported by the media source\",\"default\":null},{\"name\":\"totalAudioEnergy\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the energy level reported by the media source\",\"default\":null},{\"name\":\"totalSamplesDuration\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the total duration of the audio samples the media source actually transconverted in seconds\",\"default\":null},{\"name\":\"echoReturnLoss\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the echo cancellation in decibels corresponded to the media source.\",\"default\":null},{\"name\":\"echoReturnLossEnhancement\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.\",\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Flag represents if the sender ended the media stream track or not.\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The type of the payload the RTP packet SSRC belongs to\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the MIME type of the codec (e.g.: video/vp8)\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The negotiated clock rate the RTP timestamp is generated of\",\"default\":null},{\"name\":\"channels\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The a=fmtp line in the SDP corresponding to the codec\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** webrtc app provided user identifier */
   private java.lang.String userId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The webrtc app provided label the peer connection is labeled with */
   private java.lang.String label;
  /** The id of the track */
   private java.lang.String trackId;
  /** The id of the RTP stream connected to a remote media unit (such as an SFU) */
   private java.lang.String rtpStreamId;
  /** The sequence number of the sample the report is generated from */
   private int sampleSeq;
  /** The RTP SSRC field */
   private long ssrc;
  /** The total number of packets sent on the corresponded synchronization source */
   private java.lang.Integer packetsSent;
  /** The total number of bytes sent on the corresponded synchronization source */
   private java.lang.Long bytesSent;
  /**  The rid encoding parameter of the corresponded synchronization source */
   private java.lang.String rid;
  /**  the timestamp the last packet was sent. (UTC epoch in ms) */
   private java.lang.Long lastPacketSentTimestamp;
  /** Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
   private java.lang.Long headerBytesSent;
  /** Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
   private java.lang.Integer packetsDiscardedOnSend;
  /** Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
   private java.lang.Long bytesDiscardedOnSend;
  /** Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
   private java.lang.Integer fecPacketsSent;
  /** Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
   private java.lang.Integer retransmittedPacketsSent;
  /** Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc). */
   private java.lang.Long retransmittedBytesSent;
  /** Reflects the current encoder target in bits per second. */
   private java.lang.Long targetBitrate;
  /** The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
   private java.lang.Long totalEncodedBytesTarget;
  /** The total number of samples sent over the corresponding synchronization source */
   private java.lang.Integer totalSamplesSent;
  /** The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source */
   private java.lang.Integer samplesEncodedWithSilk;
  /** The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source */
   private java.lang.Integer samplesEncodedWithCelt;
  /** Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header */
   private java.lang.Boolean voiceActivityFlag;
  /** The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
   private java.lang.Double totalPacketSendDelay;
  /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
   private java.lang.Double averageRtcpInterval;
  /** The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
   private java.lang.Double perDscpPacketsSent;
  /** Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc) */
   private java.lang.Integer nackCount;
  /** Indicate the name of the encoder implementation library */
   private java.lang.String encoderImplementation;
  /** The total number of packets received on the corresponded synchronization source */
   private java.lang.Integer packetsReceived;
  /** The total number of bytes received on the corresponded synchronization source */
   private java.lang.Integer packetsLost;
  /** The corresponded synchronization source reported jitter */
   private java.lang.Double jitter;
  /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
   private java.lang.Integer packetsDiscarded;
  /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
   private java.lang.Integer packetsRepaired;
  /** The total number of packets lost in burst (RFC6958) */
   private java.lang.Integer burstPacketsLost;
  /** The total number of packets discarded in burst (RFC6958) */
   private java.lang.Integer burstPacketsDiscarded;
  /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
   private java.lang.Integer burstLossCount;
  /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
   private java.lang.Integer burstDiscardCount;
  /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstLossRate;
  /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstDiscardRate;
  /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapLossRate;
  /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapDiscardRate;
  /** RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
   private java.lang.Double roundTripTime;
  /** The sum of RTT measurements belongs to the corresponded synchronization source */
   private java.lang.Double totalRoundTripTime;
  /** The receiver reported fractional lost belongs to the corresponded synchronization source */
   private java.lang.Double fractionLost;
  /** The total number of RR reports received, which is the base of the remote inbound calculation on this source */
   private java.lang.Integer reportsReceived;
  /** The total number of calculated RR measurements received on this source */
   private java.lang.Integer roundTripTimeMeasurements;
  /** True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
   private java.lang.Boolean relayedSource;
  /** Represents the audio level reported by the media source */
   private java.lang.Double audioLevel;
  /** Represents the energy level reported by the media source */
   private java.lang.Double totalAudioEnergy;
  /** Represents the total duration of the audio samples the media source actually transconverted in seconds */
   private java.lang.Double totalSamplesDuration;
  /** Represents the echo cancellation in decibels corresponded to the media source. */
   private java.lang.Double echoReturnLoss;
  /** Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source. */
   private java.lang.Double echoReturnLossEnhancement;
  /** Flag represents if the sender ended the media stream track or not. */
   private java.lang.Boolean ended;
  /** The type of the payload the RTP packet SSRC belongs to */
   private java.lang.Integer payloadType;
  /** the MIME type of the codec (e.g.: video/vp8) */
   private java.lang.String mimeType;
  /** The negotiated clock rate the RTP timestamp is generated of */
   private java.lang.Long clockRate;
  /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
   private java.lang.Integer channels;
  /** The a=fmtp line in the SDP corresponding to the codec */
   private java.lang.String sdpFmtpLine;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OutboundAudioTrackReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is labeled with
   * @param trackId The id of the track
   * @param rtpStreamId The id of the RTP stream connected to a remote media unit (such as an SFU)
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param ssrc The RTP SSRC field
   * @param packetsSent The total number of packets sent on the corresponded synchronization source
   * @param bytesSent The total number of bytes sent on the corresponded synchronization source
   * @param rid  The rid encoding parameter of the corresponded synchronization source
   * @param lastPacketSentTimestamp  the timestamp the last packet was sent. (UTC epoch in ms)
   * @param headerBytesSent Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   * @param packetsDiscardedOnSend Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   * @param bytesDiscardedOnSend Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   * @param fecPacketsSent Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   * @param retransmittedPacketsSent Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   * @param retransmittedBytesSent Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
   * @param targetBitrate Reflects the current encoder target in bits per second.
   * @param totalEncodedBytesTarget The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   * @param totalSamplesSent The total number of samples sent over the corresponding synchronization source
   * @param samplesEncodedWithSilk The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
   * @param samplesEncodedWithCelt The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
   * @param voiceActivityFlag Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
   * @param totalPacketSendDelay The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   * @param averageRtcpInterval The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   * @param perDscpPacketsSent The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   * @param nackCount Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
   * @param encoderImplementation Indicate the name of the encoder implementation library
   * @param packetsReceived The total number of packets received on the corresponded synchronization source
   * @param packetsLost The total number of bytes received on the corresponded synchronization source
   * @param jitter The corresponded synchronization source reported jitter
   * @param packetsDiscarded The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   * @param packetsRepaired The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   * @param burstPacketsLost The total number of packets lost in burst (RFC6958)
   * @param burstPacketsDiscarded The total number of packets discarded in burst (RFC6958)
   * @param burstLossCount The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   * @param burstDiscardCount The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   * @param burstLossRate The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param burstDiscardRate The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapLossRate The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapDiscardRate The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param roundTripTime RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   * @param totalRoundTripTime The sum of RTT measurements belongs to the corresponded synchronization source
   * @param fractionLost The receiver reported fractional lost belongs to the corresponded synchronization source
   * @param reportsReceived The total number of RR reports received, which is the base of the remote inbound calculation on this source
   * @param roundTripTimeMeasurements The total number of calculated RR measurements received on this source
   * @param relayedSource True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   * @param audioLevel Represents the audio level reported by the media source
   * @param totalAudioEnergy Represents the energy level reported by the media source
   * @param totalSamplesDuration Represents the total duration of the audio samples the media source actually transconverted in seconds
   * @param echoReturnLoss Represents the echo cancellation in decibels corresponded to the media source.
   * @param echoReturnLossEnhancement Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
   * @param ended Flag represents if the sender ended the media stream track or not.
   * @param payloadType The type of the payload the RTP packet SSRC belongs to
   * @param mimeType the MIME type of the codec (e.g.: video/vp8)
   * @param clockRate The negotiated clock rate the RTP timestamp is generated of
   * @param channels The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   * @param sdpFmtpLine The a=fmtp line in the SDP corresponding to the codec
   */
  public OutboundAudioTrackReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String label, java.lang.String trackId, java.lang.String rtpStreamId, java.lang.Integer sampleSeq, java.lang.Long ssrc, java.lang.Integer packetsSent, java.lang.Long bytesSent, java.lang.String rid, java.lang.Long lastPacketSentTimestamp, java.lang.Long headerBytesSent, java.lang.Integer packetsDiscardedOnSend, java.lang.Long bytesDiscardedOnSend, java.lang.Integer fecPacketsSent, java.lang.Integer retransmittedPacketsSent, java.lang.Long retransmittedBytesSent, java.lang.Long targetBitrate, java.lang.Long totalEncodedBytesTarget, java.lang.Integer totalSamplesSent, java.lang.Integer samplesEncodedWithSilk, java.lang.Integer samplesEncodedWithCelt, java.lang.Boolean voiceActivityFlag, java.lang.Double totalPacketSendDelay, java.lang.Double averageRtcpInterval, java.lang.Double perDscpPacketsSent, java.lang.Integer nackCount, java.lang.String encoderImplementation, java.lang.Integer packetsReceived, java.lang.Integer packetsLost, java.lang.Double jitter, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRepaired, java.lang.Integer burstPacketsLost, java.lang.Integer burstPacketsDiscarded, java.lang.Integer burstLossCount, java.lang.Integer burstDiscardCount, java.lang.Double burstLossRate, java.lang.Double burstDiscardRate, java.lang.Double gapLossRate, java.lang.Double gapDiscardRate, java.lang.Double roundTripTime, java.lang.Double totalRoundTripTime, java.lang.Double fractionLost, java.lang.Integer reportsReceived, java.lang.Integer roundTripTimeMeasurements, java.lang.Boolean relayedSource, java.lang.Double audioLevel, java.lang.Double totalAudioEnergy, java.lang.Double totalSamplesDuration, java.lang.Double echoReturnLoss, java.lang.Double echoReturnLossEnhancement, java.lang.Boolean ended, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.Integer channels, java.lang.String sdpFmtpLine) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.trackId = trackId;
    this.rtpStreamId = rtpStreamId;
    this.sampleSeq = sampleSeq;
    this.ssrc = ssrc;
    this.packetsSent = packetsSent;
    this.bytesSent = bytesSent;
    this.rid = rid;
    this.lastPacketSentTimestamp = lastPacketSentTimestamp;
    this.headerBytesSent = headerBytesSent;
    this.packetsDiscardedOnSend = packetsDiscardedOnSend;
    this.bytesDiscardedOnSend = bytesDiscardedOnSend;
    this.fecPacketsSent = fecPacketsSent;
    this.retransmittedPacketsSent = retransmittedPacketsSent;
    this.retransmittedBytesSent = retransmittedBytesSent;
    this.targetBitrate = targetBitrate;
    this.totalEncodedBytesTarget = totalEncodedBytesTarget;
    this.totalSamplesSent = totalSamplesSent;
    this.samplesEncodedWithSilk = samplesEncodedWithSilk;
    this.samplesEncodedWithCelt = samplesEncodedWithCelt;
    this.voiceActivityFlag = voiceActivityFlag;
    this.totalPacketSendDelay = totalPacketSendDelay;
    this.averageRtcpInterval = averageRtcpInterval;
    this.perDscpPacketsSent = perDscpPacketsSent;
    this.nackCount = nackCount;
    this.encoderImplementation = encoderImplementation;
    this.packetsReceived = packetsReceived;
    this.packetsLost = packetsLost;
    this.jitter = jitter;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.burstPacketsLost = burstPacketsLost;
    this.burstPacketsDiscarded = burstPacketsDiscarded;
    this.burstLossCount = burstLossCount;
    this.burstDiscardCount = burstDiscardCount;
    this.burstLossRate = burstLossRate;
    this.burstDiscardRate = burstDiscardRate;
    this.gapLossRate = gapLossRate;
    this.gapDiscardRate = gapDiscardRate;
    this.roundTripTime = roundTripTime;
    this.totalRoundTripTime = totalRoundTripTime;
    this.fractionLost = fractionLost;
    this.reportsReceived = reportsReceived;
    this.roundTripTimeMeasurements = roundTripTimeMeasurements;
    this.relayedSource = relayedSource;
    this.audioLevel = audioLevel;
    this.totalAudioEnergy = totalAudioEnergy;
    this.totalSamplesDuration = totalSamplesDuration;
    this.echoReturnLoss = echoReturnLoss;
    this.echoReturnLossEnhancement = echoReturnLossEnhancement;
    this.ended = ended;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.channels = channels;
    this.sdpFmtpLine = sdpFmtpLine;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return label;
    case 10: return trackId;
    case 11: return rtpStreamId;
    case 12: return sampleSeq;
    case 13: return ssrc;
    case 14: return packetsSent;
    case 15: return bytesSent;
    case 16: return rid;
    case 17: return lastPacketSentTimestamp;
    case 18: return headerBytesSent;
    case 19: return packetsDiscardedOnSend;
    case 20: return bytesDiscardedOnSend;
    case 21: return fecPacketsSent;
    case 22: return retransmittedPacketsSent;
    case 23: return retransmittedBytesSent;
    case 24: return targetBitrate;
    case 25: return totalEncodedBytesTarget;
    case 26: return totalSamplesSent;
    case 27: return samplesEncodedWithSilk;
    case 28: return samplesEncodedWithCelt;
    case 29: return voiceActivityFlag;
    case 30: return totalPacketSendDelay;
    case 31: return averageRtcpInterval;
    case 32: return perDscpPacketsSent;
    case 33: return nackCount;
    case 34: return encoderImplementation;
    case 35: return packetsReceived;
    case 36: return packetsLost;
    case 37: return jitter;
    case 38: return packetsDiscarded;
    case 39: return packetsRepaired;
    case 40: return burstPacketsLost;
    case 41: return burstPacketsDiscarded;
    case 42: return burstLossCount;
    case 43: return burstDiscardCount;
    case 44: return burstLossRate;
    case 45: return burstDiscardRate;
    case 46: return gapLossRate;
    case 47: return gapDiscardRate;
    case 48: return roundTripTime;
    case 49: return totalRoundTripTime;
    case 50: return fractionLost;
    case 51: return reportsReceived;
    case 52: return roundTripTimeMeasurements;
    case 53: return relayedSource;
    case 54: return audioLevel;
    case 55: return totalAudioEnergy;
    case 56: return totalSamplesDuration;
    case 57: return echoReturnLoss;
    case 58: return echoReturnLossEnhancement;
    case 59: return ended;
    case 60: return payloadType;
    case 61: return mimeType;
    case 62: return clockRate;
    case 63: return channels;
    case 64: return sdpFmtpLine;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = (java.lang.String)value$; break;
    case 5: roomId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: userId = (java.lang.String)value$; break;
    case 8: peerConnectionId = (java.lang.String)value$; break;
    case 9: label = (java.lang.String)value$; break;
    case 10: trackId = (java.lang.String)value$; break;
    case 11: rtpStreamId = (java.lang.String)value$; break;
    case 12: sampleSeq = (java.lang.Integer)value$; break;
    case 13: ssrc = (java.lang.Long)value$; break;
    case 14: packetsSent = (java.lang.Integer)value$; break;
    case 15: bytesSent = (java.lang.Long)value$; break;
    case 16: rid = (java.lang.String)value$; break;
    case 17: lastPacketSentTimestamp = (java.lang.Long)value$; break;
    case 18: headerBytesSent = (java.lang.Long)value$; break;
    case 19: packetsDiscardedOnSend = (java.lang.Integer)value$; break;
    case 20: bytesDiscardedOnSend = (java.lang.Long)value$; break;
    case 21: fecPacketsSent = (java.lang.Integer)value$; break;
    case 22: retransmittedPacketsSent = (java.lang.Integer)value$; break;
    case 23: retransmittedBytesSent = (java.lang.Long)value$; break;
    case 24: targetBitrate = (java.lang.Long)value$; break;
    case 25: totalEncodedBytesTarget = (java.lang.Long)value$; break;
    case 26: totalSamplesSent = (java.lang.Integer)value$; break;
    case 27: samplesEncodedWithSilk = (java.lang.Integer)value$; break;
    case 28: samplesEncodedWithCelt = (java.lang.Integer)value$; break;
    case 29: voiceActivityFlag = (java.lang.Boolean)value$; break;
    case 30: totalPacketSendDelay = (java.lang.Double)value$; break;
    case 31: averageRtcpInterval = (java.lang.Double)value$; break;
    case 32: perDscpPacketsSent = (java.lang.Double)value$; break;
    case 33: nackCount = (java.lang.Integer)value$; break;
    case 34: encoderImplementation = (java.lang.String)value$; break;
    case 35: packetsReceived = (java.lang.Integer)value$; break;
    case 36: packetsLost = (java.lang.Integer)value$; break;
    case 37: jitter = (java.lang.Double)value$; break;
    case 38: packetsDiscarded = (java.lang.Integer)value$; break;
    case 39: packetsRepaired = (java.lang.Integer)value$; break;
    case 40: burstPacketsLost = (java.lang.Integer)value$; break;
    case 41: burstPacketsDiscarded = (java.lang.Integer)value$; break;
    case 42: burstLossCount = (java.lang.Integer)value$; break;
    case 43: burstDiscardCount = (java.lang.Integer)value$; break;
    case 44: burstLossRate = (java.lang.Double)value$; break;
    case 45: burstDiscardRate = (java.lang.Double)value$; break;
    case 46: gapLossRate = (java.lang.Double)value$; break;
    case 47: gapDiscardRate = (java.lang.Double)value$; break;
    case 48: roundTripTime = (java.lang.Double)value$; break;
    case 49: totalRoundTripTime = (java.lang.Double)value$; break;
    case 50: fractionLost = (java.lang.Double)value$; break;
    case 51: reportsReceived = (java.lang.Integer)value$; break;
    case 52: roundTripTimeMeasurements = (java.lang.Integer)value$; break;
    case 53: relayedSource = (java.lang.Boolean)value$; break;
    case 54: audioLevel = (java.lang.Double)value$; break;
    case 55: totalAudioEnergy = (java.lang.Double)value$; break;
    case 56: totalSamplesDuration = (java.lang.Double)value$; break;
    case 57: echoReturnLoss = (java.lang.Double)value$; break;
    case 58: echoReturnLossEnhancement = (java.lang.Double)value$; break;
    case 59: ended = (java.lang.Boolean)value$; break;
    case 60: payloadType = (java.lang.Integer)value$; break;
    case 61: mimeType = (java.lang.String)value$; break;
    case 62: clockRate = (java.lang.Long)value$; break;
    case 63: channels = (java.lang.Integer)value$; break;
    case 64: sdpFmtpLine = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is labeled with
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track
   */
  public java.lang.String getTrackId() {
    return trackId;
  }


  /**
   * Gets the value of the 'rtpStreamId' field.
   * @return The id of the RTP stream connected to a remote media unit (such as an SFU)
   */
  public java.lang.String getRtpStreamId() {
    return rtpStreamId;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'ssrc' field.
   * @return The RTP SSRC field
   */
  public java.lang.Long getSsrc() {
    return ssrc;
  }


  /**
   * Gets the value of the 'packetsSent' field.
   * @return The total number of packets sent on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return The total number of bytes sent on the corresponded synchronization source
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'rid' field.
   * @return  The rid encoding parameter of the corresponded synchronization source
   */
  public java.lang.String getRid() {
    return rid;
  }


  /**
   * Gets the value of the 'lastPacketSentTimestamp' field.
   * @return  the timestamp the last packet was sent. (UTC epoch in ms)
   */
  public java.lang.Long getLastPacketSentTimestamp() {
    return lastPacketSentTimestamp;
  }


  /**
   * Gets the value of the 'headerBytesSent' field.
   * @return Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getHeaderBytesSent() {
    return headerBytesSent;
  }


  /**
   * Gets the value of the 'packetsDiscardedOnSend' field.
   * @return Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getPacketsDiscardedOnSend() {
    return packetsDiscardedOnSend;
  }


  /**
   * Gets the value of the 'bytesDiscardedOnSend' field.
   * @return Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getBytesDiscardedOnSend() {
    return bytesDiscardedOnSend;
  }


  /**
   * Gets the value of the 'fecPacketsSent' field.
   * @return Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFecPacketsSent() {
    return fecPacketsSent;
  }


  /**
   * Gets the value of the 'retransmittedPacketsSent' field.
   * @return Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   */
  public java.lang.Integer getRetransmittedPacketsSent() {
    return retransmittedPacketsSent;
  }


  /**
   * Gets the value of the 'retransmittedBytesSent' field.
   * @return Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
   */
  public java.lang.Long getRetransmittedBytesSent() {
    return retransmittedBytesSent;
  }


  /**
   * Gets the value of the 'targetBitrate' field.
   * @return Reflects the current encoder target in bits per second.
   */
  public java.lang.Long getTargetBitrate() {
    return targetBitrate;
  }


  /**
   * Gets the value of the 'totalEncodedBytesTarget' field.
   * @return The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   */
  public java.lang.Long getTotalEncodedBytesTarget() {
    return totalEncodedBytesTarget;
  }


  /**
   * Gets the value of the 'totalSamplesSent' field.
   * @return The total number of samples sent over the corresponding synchronization source
   */
  public java.lang.Integer getTotalSamplesSent() {
    return totalSamplesSent;
  }


  /**
   * Gets the value of the 'samplesEncodedWithSilk' field.
   * @return The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
   */
  public java.lang.Integer getSamplesEncodedWithSilk() {
    return samplesEncodedWithSilk;
  }


  /**
   * Gets the value of the 'samplesEncodedWithCelt' field.
   * @return The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
   */
  public java.lang.Integer getSamplesEncodedWithCelt() {
    return samplesEncodedWithCelt;
  }


  /**
   * Gets the value of the 'voiceActivityFlag' field.
   * @return Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
   */
  public java.lang.Boolean getVoiceActivityFlag() {
    return voiceActivityFlag;
  }


  /**
   * Gets the value of the 'totalPacketSendDelay' field.
   * @return The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   */
  public java.lang.Double getTotalPacketSendDelay() {
    return totalPacketSendDelay;
  }


  /**
   * Gets the value of the 'averageRtcpInterval' field.
   * @return The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getAverageRtcpInterval() {
    return averageRtcpInterval;
  }


  /**
   * Gets the value of the 'perDscpPacketsSent' field.
   * @return The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getPerDscpPacketsSent() {
    return perDscpPacketsSent;
  }


  /**
   * Gets the value of the 'nackCount' field.
   * @return Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }


  /**
   * Gets the value of the 'encoderImplementation' field.
   * @return Indicate the name of the encoder implementation library
   */
  public java.lang.String getEncoderImplementation() {
    return encoderImplementation;
  }


  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }


  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of bytes received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }


  /**
   * Gets the value of the 'jitter' field.
   * @return The corresponded synchronization source reported jitter
   */
  public java.lang.Double getJitter() {
    return jitter;
  }


  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }


  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsRepaired() {
    return packetsRepaired;
  }


  /**
   * Gets the value of the 'burstPacketsLost' field.
   * @return The total number of packets lost in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsLost() {
    return burstPacketsLost;
  }


  /**
   * Gets the value of the 'burstPacketsDiscarded' field.
   * @return The total number of packets discarded in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsDiscarded() {
    return burstPacketsDiscarded;
  }


  /**
   * Gets the value of the 'burstLossCount' field.
   * @return The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   */
  public java.lang.Integer getBurstLossCount() {
    return burstLossCount;
  }


  /**
   * Gets the value of the 'burstDiscardCount' field.
   * @return The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   */
  public java.lang.Integer getBurstDiscardCount() {
    return burstDiscardCount;
  }


  /**
   * Gets the value of the 'burstLossRate' field.
   * @return The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstLossRate() {
    return burstLossRate;
  }


  /**
   * Gets the value of the 'burstDiscardRate' field.
   * @return The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstDiscardRate() {
    return burstDiscardRate;
  }


  /**
   * Gets the value of the 'gapLossRate' field.
   * @return The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapLossRate() {
    return gapLossRate;
  }


  /**
   * Gets the value of the 'gapDiscardRate' field.
   * @return The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapDiscardRate() {
    return gapDiscardRate;
  }


  /**
   * Gets the value of the 'roundTripTime' field.
   * @return RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   */
  public java.lang.Double getRoundTripTime() {
    return roundTripTime;
  }


  /**
   * Gets the value of the 'totalRoundTripTime' field.
   * @return The sum of RTT measurements belongs to the corresponded synchronization source
   */
  public java.lang.Double getTotalRoundTripTime() {
    return totalRoundTripTime;
  }


  /**
   * Gets the value of the 'fractionLost' field.
   * @return The receiver reported fractional lost belongs to the corresponded synchronization source
   */
  public java.lang.Double getFractionLost() {
    return fractionLost;
  }


  /**
   * Gets the value of the 'reportsReceived' field.
   * @return The total number of RR reports received, which is the base of the remote inbound calculation on this source
   */
  public java.lang.Integer getReportsReceived() {
    return reportsReceived;
  }


  /**
   * Gets the value of the 'roundTripTimeMeasurements' field.
   * @return The total number of calculated RR measurements received on this source
   */
  public java.lang.Integer getRoundTripTimeMeasurements() {
    return roundTripTimeMeasurements;
  }


  /**
   * Gets the value of the 'relayedSource' field.
   * @return True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   */
  public java.lang.Boolean getRelayedSource() {
    return relayedSource;
  }


  /**
   * Gets the value of the 'audioLevel' field.
   * @return Represents the audio level reported by the media source
   */
  public java.lang.Double getAudioLevel() {
    return audioLevel;
  }


  /**
   * Gets the value of the 'totalAudioEnergy' field.
   * @return Represents the energy level reported by the media source
   */
  public java.lang.Double getTotalAudioEnergy() {
    return totalAudioEnergy;
  }


  /**
   * Gets the value of the 'totalSamplesDuration' field.
   * @return Represents the total duration of the audio samples the media source actually transconverted in seconds
   */
  public java.lang.Double getTotalSamplesDuration() {
    return totalSamplesDuration;
  }


  /**
   * Gets the value of the 'echoReturnLoss' field.
   * @return Represents the echo cancellation in decibels corresponded to the media source.
   */
  public java.lang.Double getEchoReturnLoss() {
    return echoReturnLoss;
  }


  /**
   * Gets the value of the 'echoReturnLossEnhancement' field.
   * @return Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
   */
  public java.lang.Double getEchoReturnLossEnhancement() {
    return echoReturnLossEnhancement;
  }


  /**
   * Gets the value of the 'ended' field.
   * @return Flag represents if the sender ended the media stream track or not.
   */
  public java.lang.Boolean getEnded() {
    return ended;
  }


  /**
   * Gets the value of the 'payloadType' field.
   * @return The type of the payload the RTP packet SSRC belongs to
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }


  /**
   * Gets the value of the 'mimeType' field.
   * @return the MIME type of the codec (e.g.: video/vp8)
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }


  /**
   * Gets the value of the 'clockRate' field.
   * @return The negotiated clock rate the RTP timestamp is generated of
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }


  /**
   * Gets the value of the 'channels' field.
   * @return The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   */
  public java.lang.Integer getChannels() {
    return channels;
  }


  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The a=fmtp line in the SDP corresponding to the codec
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }


  /**
   * Creates a new OutboundAudioTrackReport RecordBuilder.
   * @return A new OutboundAudioTrackReport RecordBuilder
   */
  public static OutboundAudioTrackReport.Builder newBuilder() {
    return new OutboundAudioTrackReport.Builder();
  }

  /**
   * Creates a new OutboundAudioTrackReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OutboundAudioTrackReport RecordBuilder
   */
  public static OutboundAudioTrackReport.Builder newBuilder(OutboundAudioTrackReport.Builder other) {
    return new OutboundAudioTrackReport.Builder(other);
  }

  /**
   * Creates a new OutboundAudioTrackReport RecordBuilder by copying an existing OutboundAudioTrackReport instance.
   * @param other The existing instance to copy.
   * @return A new OutboundAudioTrackReport RecordBuilder
   */
  public static OutboundAudioTrackReport.Builder newBuilder(OutboundAudioTrackReport other) {
    return new OutboundAudioTrackReport.Builder(other);
  }

  /**
   * RecordBuilder for OutboundAudioTrackReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutboundAudioTrackReport>
    implements org.apache.avro.data.RecordBuilder<OutboundAudioTrackReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label the peer connection is labeled with */
    private java.lang.String label;
    /** The id of the track */
    private java.lang.String trackId;
    /** The id of the RTP stream connected to a remote media unit (such as an SFU) */
    private java.lang.String rtpStreamId;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The RTP SSRC field */
    private long ssrc;
    /** The total number of packets sent on the corresponded synchronization source */
    private java.lang.Integer packetsSent;
    /** The total number of bytes sent on the corresponded synchronization source */
    private java.lang.Long bytesSent;
    /**  The rid encoding parameter of the corresponded synchronization source */
    private java.lang.String rid;
    /**  the timestamp the last packet was sent. (UTC epoch in ms) */
    private java.lang.Long lastPacketSentTimestamp;
    /** Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
    private java.lang.Long headerBytesSent;
    /** Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Integer packetsDiscardedOnSend;
    /** Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Long bytesDiscardedOnSend;
    /** Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Integer fecPacketsSent;
    /** Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
    private java.lang.Integer retransmittedPacketsSent;
    /** Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc). */
    private java.lang.Long retransmittedBytesSent;
    /** Reflects the current encoder target in bits per second. */
    private java.lang.Long targetBitrate;
    /** The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
    private java.lang.Long totalEncodedBytesTarget;
    /** The total number of samples sent over the corresponding synchronization source */
    private java.lang.Integer totalSamplesSent;
    /** The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source */
    private java.lang.Integer samplesEncodedWithSilk;
    /** The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source */
    private java.lang.Integer samplesEncodedWithCelt;
    /** Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header */
    private java.lang.Boolean voiceActivityFlag;
    /** The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
    private java.lang.Double totalPacketSendDelay;
    /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
    private java.lang.Double averageRtcpInterval;
    /** The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Double perDscpPacketsSent;
    /** Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Integer nackCount;
    /** Indicate the name of the encoder implementation library */
    private java.lang.String encoderImplementation;
    /** The total number of packets received on the corresponded synchronization source */
    private java.lang.Integer packetsReceived;
    /** The total number of bytes received on the corresponded synchronization source */
    private java.lang.Integer packetsLost;
    /** The corresponded synchronization source reported jitter */
    private java.lang.Double jitter;
    /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
    private java.lang.Integer packetsRepaired;
    /** The total number of packets lost in burst (RFC6958) */
    private java.lang.Integer burstPacketsLost;
    /** The total number of packets discarded in burst (RFC6958) */
    private java.lang.Integer burstPacketsDiscarded;
    /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
    private java.lang.Integer burstLossCount;
    /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
    private java.lang.Integer burstDiscardCount;
    /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstLossRate;
    /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstDiscardRate;
    /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapLossRate;
    /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapDiscardRate;
    /** RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
    private java.lang.Double roundTripTime;
    /** The sum of RTT measurements belongs to the corresponded synchronization source */
    private java.lang.Double totalRoundTripTime;
    /** The receiver reported fractional lost belongs to the corresponded synchronization source */
    private java.lang.Double fractionLost;
    /** The total number of RR reports received, which is the base of the remote inbound calculation on this source */
    private java.lang.Integer reportsReceived;
    /** The total number of calculated RR measurements received on this source */
    private java.lang.Integer roundTripTimeMeasurements;
    /** True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
    private java.lang.Boolean relayedSource;
    /** Represents the audio level reported by the media source */
    private java.lang.Double audioLevel;
    /** Represents the energy level reported by the media source */
    private java.lang.Double totalAudioEnergy;
    /** Represents the total duration of the audio samples the media source actually transconverted in seconds */
    private java.lang.Double totalSamplesDuration;
    /** Represents the echo cancellation in decibels corresponded to the media source. */
    private java.lang.Double echoReturnLoss;
    /** Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source. */
    private java.lang.Double echoReturnLossEnhancement;
    /** Flag represents if the sender ended the media stream track or not. */
    private java.lang.Boolean ended;
    /** The type of the payload the RTP packet SSRC belongs to */
    private java.lang.Integer payloadType;
    /** the MIME type of the codec (e.g.: video/vp8) */
    private java.lang.String mimeType;
    /** The negotiated clock rate the RTP timestamp is generated of */
    private java.lang.Long clockRate;
    /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
    private java.lang.Integer channels;
    /** The a=fmtp line in the SDP corresponding to the codec */
    private java.lang.String sdpFmtpLine;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(OutboundAudioTrackReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[11].schema(), other.rtpStreamId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[12].schema(), other.sampleSeq);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[13].schema(), other.ssrc);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.rid)) {
        this.rid = data().deepCopy(fields()[16].schema(), other.rid);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[17].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[18].schema(), other.headerBytesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[19].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[20].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[21].schema(), other.fecPacketsSent);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[22].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[23].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[24].schema(), other.targetBitrate);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[25].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.totalSamplesSent)) {
        this.totalSamplesSent = data().deepCopy(fields()[26].schema(), other.totalSamplesSent);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.samplesEncodedWithSilk)) {
        this.samplesEncodedWithSilk = data().deepCopy(fields()[27].schema(), other.samplesEncodedWithSilk);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.samplesEncodedWithCelt)) {
        this.samplesEncodedWithCelt = data().deepCopy(fields()[28].schema(), other.samplesEncodedWithCelt);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[29].schema(), other.voiceActivityFlag);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[30].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[31].schema(), other.averageRtcpInterval);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[32].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[33].schema(), other.nackCount);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[34].schema(), other.encoderImplementation);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[35].schema(), other.packetsReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[36].schema(), other.packetsLost);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.jitter)) {
        this.jitter = data().deepCopy(fields()[37].schema(), other.jitter);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[38].schema(), other.packetsDiscarded);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[39].schema(), other.packetsRepaired);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[40].schema(), other.burstPacketsLost);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[41].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[42].schema(), other.burstLossCount);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[43].schema(), other.burstDiscardCount);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[44].schema(), other.burstLossRate);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[45].schema(), other.burstDiscardRate);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[46].schema(), other.gapLossRate);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[47].schema(), other.gapDiscardRate);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[48].schema(), other.roundTripTime);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[49].schema(), other.totalRoundTripTime);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[50].schema(), other.fractionLost);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[51].schema(), other.reportsReceived);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[52].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[53].schema(), other.relayedSource);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[54].schema(), other.audioLevel);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[55].schema(), other.totalAudioEnergy);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[56].schema(), other.totalSamplesDuration);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.echoReturnLoss)) {
        this.echoReturnLoss = data().deepCopy(fields()[57].schema(), other.echoReturnLoss);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.echoReturnLossEnhancement)) {
        this.echoReturnLossEnhancement = data().deepCopy(fields()[58].schema(), other.echoReturnLossEnhancement);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.ended)) {
        this.ended = data().deepCopy(fields()[59].schema(), other.ended);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[60].schema(), other.payloadType);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[61].schema(), other.mimeType);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[62].schema(), other.clockRate);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.channels)) {
        this.channels = data().deepCopy(fields()[63].schema(), other.channels);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[64].schema(), other.sdpFmtpLine);
        fieldSetFlags()[64] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OutboundAudioTrackReport instance
     * @param other The existing instance to copy.
     */
    private Builder(OutboundAudioTrackReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[11].schema(), other.rtpStreamId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[12].schema(), other.sampleSeq);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[13].schema(), other.ssrc);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[14].schema(), other.packetsSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.rid)) {
        this.rid = data().deepCopy(fields()[16].schema(), other.rid);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[17].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[18].schema(), other.headerBytesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[19].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[20].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[21].schema(), other.fecPacketsSent);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[22].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[23].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[24].schema(), other.targetBitrate);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[25].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.totalSamplesSent)) {
        this.totalSamplesSent = data().deepCopy(fields()[26].schema(), other.totalSamplesSent);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.samplesEncodedWithSilk)) {
        this.samplesEncodedWithSilk = data().deepCopy(fields()[27].schema(), other.samplesEncodedWithSilk);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.samplesEncodedWithCelt)) {
        this.samplesEncodedWithCelt = data().deepCopy(fields()[28].schema(), other.samplesEncodedWithCelt);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[29].schema(), other.voiceActivityFlag);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[30].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[31].schema(), other.averageRtcpInterval);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[32].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[33].schema(), other.nackCount);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[34].schema(), other.encoderImplementation);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[35].schema(), other.packetsReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[36].schema(), other.packetsLost);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.jitter)) {
        this.jitter = data().deepCopy(fields()[37].schema(), other.jitter);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[38].schema(), other.packetsDiscarded);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[39].schema(), other.packetsRepaired);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[40].schema(), other.burstPacketsLost);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[41].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[42].schema(), other.burstLossCount);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[43].schema(), other.burstDiscardCount);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[44].schema(), other.burstLossRate);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[45].schema(), other.burstDiscardRate);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[46].schema(), other.gapLossRate);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[47].schema(), other.gapDiscardRate);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[48].schema(), other.roundTripTime);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[49].schema(), other.totalRoundTripTime);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[50].schema(), other.fractionLost);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[51].schema(), other.reportsReceived);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[52].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[53].schema(), other.relayedSource);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[54].schema(), other.audioLevel);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[55].schema(), other.totalAudioEnergy);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[56].schema(), other.totalSamplesDuration);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.echoReturnLoss)) {
        this.echoReturnLoss = data().deepCopy(fields()[57].schema(), other.echoReturnLoss);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.echoReturnLossEnhancement)) {
        this.echoReturnLossEnhancement = data().deepCopy(fields()[58].schema(), other.echoReturnLossEnhancement);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.ended)) {
        this.ended = data().deepCopy(fields()[59].schema(), other.ended);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[60].schema(), other.payloadType);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[61].schema(), other.mimeType);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[62].schema(), other.clockRate);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.channels)) {
        this.channels = data().deepCopy(fields()[63].schema(), other.channels);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[64].schema(), other.sdpFmtpLine);
        fieldSetFlags()[64] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is labeled with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }

    /**
      * Sets the value of the 'trackId' field.
      * The id of the track
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[10], value);
      this.trackId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return The value.
      */
    public java.lang.String getRtpStreamId() {
      return rtpStreamId;
    }

    /**
      * Sets the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @param value The value of 'rtpStreamId'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRtpStreamId(java.lang.String value) {
      validate(fields()[11], value);
      this.rtpStreamId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpStreamId' field has been set.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return True if the 'rtpStreamId' field has been set, false otherwise.
      */
    public boolean hasRtpStreamId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRtpStreamId() {
      rtpStreamId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setSampleSeq(int value) {
      validate(fields()[12], value);
      this.sampleSeq = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearSampleSeq() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return The value.
      */
    public java.lang.Long getSsrc() {
      return ssrc;
    }

    /**
      * Sets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setSsrc(long value) {
      validate(fields()[13], value);
      this.ssrc = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The RTP SSRC field
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearSsrc() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }

    /**
      * Sets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[14], value);
      this.packetsSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * The total number of packets sent on the corresponded synchronization source
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[15], value);
      this.bytesSent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * The total number of bytes sent on the corresponded synchronization source
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * The total number of bytes sent on the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return The value.
      */
    public java.lang.String getRid() {
      return rid;
    }

    /**
      * Sets the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @param value The value of 'rid'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRid(java.lang.String value) {
      validate(fields()[16], value);
      this.rid = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'rid' field has been set.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return True if the 'rid' field has been set, false otherwise.
      */
    public boolean hasRid() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'rid' field.
      *  The rid encoding parameter of the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRid() {
      rid = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return The value.
      */
    public java.lang.Long getLastPacketSentTimestamp() {
      return lastPacketSentTimestamp;
    }

    /**
      * Sets the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @param value The value of 'lastPacketSentTimestamp'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setLastPacketSentTimestamp(java.lang.Long value) {
      validate(fields()[17], value);
      this.lastPacketSentTimestamp = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketSentTimestamp' field has been set.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return True if the 'lastPacketSentTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketSentTimestamp() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'lastPacketSentTimestamp' field.
      *  the timestamp the last packet was sent. (UTC epoch in ms)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearLastPacketSentTimestamp() {
      lastPacketSentTimestamp = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getHeaderBytesSent() {
      return headerBytesSent;
    }

    /**
      * Sets the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setHeaderBytesSent(java.lang.Long value) {
      validate(fields()[18], value);
      this.headerBytesSent = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesSent' field has been set.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesSent' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesSent() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'headerBytesSent' field.
      * Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearHeaderBytesSent() {
      headerBytesSent = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscardedOnSend() {
      return packetsDiscardedOnSend;
    }

    /**
      * Sets the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'packetsDiscardedOnSend'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsDiscardedOnSend(java.lang.Integer value) {
      validate(fields()[19], value);
      this.packetsDiscardedOnSend = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscardedOnSend' field has been set.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'packetsDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscardedOnSend() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'packetsDiscardedOnSend' field.
      * Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsDiscardedOnSend() {
      packetsDiscardedOnSend = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getBytesDiscardedOnSend() {
      return bytesDiscardedOnSend;
    }

    /**
      * Sets the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'bytesDiscardedOnSend'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBytesDiscardedOnSend(java.lang.Long value) {
      validate(fields()[20], value);
      this.bytesDiscardedOnSend = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesDiscardedOnSend' field has been set.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'bytesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasBytesDiscardedOnSend() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'bytesDiscardedOnSend' field.
      * Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBytesDiscardedOnSend() {
      bytesDiscardedOnSend = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFecPacketsSent() {
      return fecPacketsSent;
    }

    /**
      * Sets the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setFecPacketsSent(java.lang.Integer value) {
      validate(fields()[21], value);
      this.fecPacketsSent = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsSent' field has been set.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsSent' field has been set, false otherwise.
      */
    public boolean hasFecPacketsSent() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'fecPacketsSent' field.
      * Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearFecPacketsSent() {
      fecPacketsSent = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Integer getRetransmittedPacketsSent() {
      return retransmittedPacketsSent;
    }

    /**
      * Sets the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @param value The value of 'retransmittedPacketsSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRetransmittedPacketsSent(java.lang.Integer value) {
      validate(fields()[22], value);
      this.retransmittedPacketsSent = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedPacketsSent' field has been set.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return True if the 'retransmittedPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedPacketsSent() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'retransmittedPacketsSent' field.
      * Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRetransmittedPacketsSent() {
      retransmittedPacketsSent = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Long getRetransmittedBytesSent() {
      return retransmittedBytesSent;
    }

    /**
      * Sets the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @param value The value of 'retransmittedBytesSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRetransmittedBytesSent(java.lang.Long value) {
      validate(fields()[23], value);
      this.retransmittedBytesSent = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedBytesSent' field has been set.
      * Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return True if the 'retransmittedBytesSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedBytesSent() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'retransmittedBytesSent' field.
      * Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRetransmittedBytesSent() {
      retransmittedBytesSent = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @return The value.
      */
    public java.lang.Long getTargetBitrate() {
      return targetBitrate;
    }

    /**
      * Sets the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @param value The value of 'targetBitrate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTargetBitrate(java.lang.Long value) {
      validate(fields()[24], value);
      this.targetBitrate = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'targetBitrate' field has been set.
      * Reflects the current encoder target in bits per second.
      * @return True if the 'targetBitrate' field has been set, false otherwise.
      */
    public boolean hasTargetBitrate() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'targetBitrate' field.
      * Reflects the current encoder target in bits per second.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTargetBitrate() {
      targetBitrate = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return The value.
      */
    public java.lang.Long getTotalEncodedBytesTarget() {
      return totalEncodedBytesTarget;
    }

    /**
      * Sets the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @param value The value of 'totalEncodedBytesTarget'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalEncodedBytesTarget(java.lang.Long value) {
      validate(fields()[25], value);
      this.totalEncodedBytesTarget = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodedBytesTarget' field has been set.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return True if the 'totalEncodedBytesTarget' field has been set, false otherwise.
      */
    public boolean hasTotalEncodedBytesTarget() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'totalEncodedBytesTarget' field.
      * The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalEncodedBytesTarget() {
      totalEncodedBytesTarget = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesSent' field.
      * The total number of samples sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getTotalSamplesSent() {
      return totalSamplesSent;
    }

    /**
      * Sets the value of the 'totalSamplesSent' field.
      * The total number of samples sent over the corresponding synchronization source
      * @param value The value of 'totalSamplesSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalSamplesSent(java.lang.Integer value) {
      validate(fields()[26], value);
      this.totalSamplesSent = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesSent' field has been set.
      * The total number of samples sent over the corresponding synchronization source
      * @return True if the 'totalSamplesSent' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesSent() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'totalSamplesSent' field.
      * The total number of samples sent over the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalSamplesSent() {
      totalSamplesSent = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesEncodedWithSilk' field.
      * The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getSamplesEncodedWithSilk() {
      return samplesEncodedWithSilk;
    }

    /**
      * Sets the value of the 'samplesEncodedWithSilk' field.
      * The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @param value The value of 'samplesEncodedWithSilk'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setSamplesEncodedWithSilk(java.lang.Integer value) {
      validate(fields()[27], value);
      this.samplesEncodedWithSilk = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesEncodedWithSilk' field has been set.
      * The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return True if the 'samplesEncodedWithSilk' field has been set, false otherwise.
      */
    public boolean hasSamplesEncodedWithSilk() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'samplesEncodedWithSilk' field.
      * The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearSamplesEncodedWithSilk() {
      samplesEncodedWithSilk = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesEncodedWithCelt' field.
      * The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getSamplesEncodedWithCelt() {
      return samplesEncodedWithCelt;
    }

    /**
      * Sets the value of the 'samplesEncodedWithCelt' field.
      * The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @param value The value of 'samplesEncodedWithCelt'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setSamplesEncodedWithCelt(java.lang.Integer value) {
      validate(fields()[28], value);
      this.samplesEncodedWithCelt = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesEncodedWithCelt' field has been set.
      * The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return True if the 'samplesEncodedWithCelt' field has been set, false otherwise.
      */
    public boolean hasSamplesEncodedWithCelt() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'samplesEncodedWithCelt' field.
      * The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearSamplesEncodedWithCelt() {
      samplesEncodedWithCelt = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
      * @return The value.
      */
    public java.lang.Boolean getVoiceActivityFlag() {
      return voiceActivityFlag;
    }

    /**
      * Sets the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
      * @param value The value of 'voiceActivityFlag'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setVoiceActivityFlag(java.lang.Boolean value) {
      validate(fields()[29], value);
      this.voiceActivityFlag = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'voiceActivityFlag' field has been set.
      * Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
      * @return True if the 'voiceActivityFlag' field has been set, false otherwise.
      */
    public boolean hasVoiceActivityFlag() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet sent contained voice activity based on the presence of the V bit in the extension header
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearVoiceActivityFlag() {
      voiceActivityFlag = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalPacketSendDelay() {
      return totalPacketSendDelay;
    }

    /**
      * Sets the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @param value The value of 'totalPacketSendDelay'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalPacketSendDelay(java.lang.Double value) {
      validate(fields()[30], value);
      this.totalPacketSendDelay = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPacketSendDelay' field has been set.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return True if the 'totalPacketSendDelay' field has been set, false otherwise.
      */
    public boolean hasTotalPacketSendDelay() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'totalPacketSendDelay' field.
      * The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalPacketSendDelay() {
      totalPacketSendDelay = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getAverageRtcpInterval() {
      return averageRtcpInterval;
    }

    /**
      * Sets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @param value The value of 'averageRtcpInterval'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setAverageRtcpInterval(java.lang.Double value) {
      validate(fields()[31], value);
      this.averageRtcpInterval = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'averageRtcpInterval' field has been set.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return True if the 'averageRtcpInterval' field has been set, false otherwise.
      */
    public boolean hasAverageRtcpInterval() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearAverageRtcpInterval() {
      averageRtcpInterval = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getPerDscpPacketsSent() {
      return perDscpPacketsSent;
    }

    /**
      * Sets the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsSent'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPerDscpPacketsSent(java.lang.Double value) {
      validate(fields()[32], value);
      this.perDscpPacketsSent = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsSent' field has been set.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsSent' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsSent() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'perDscpPacketsSent' field.
      * The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPerDscpPacketsSent() {
      perDscpPacketsSent = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }

    /**
      * Sets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[33], value);
      this.nackCount = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @return The value.
      */
    public java.lang.String getEncoderImplementation() {
      return encoderImplementation;
    }

    /**
      * Sets the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @param value The value of 'encoderImplementation'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setEncoderImplementation(java.lang.String value) {
      validate(fields()[34], value);
      this.encoderImplementation = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'encoderImplementation' field has been set.
      * Indicate the name of the encoder implementation library
      * @return True if the 'encoderImplementation' field has been set, false otherwise.
      */
    public boolean hasEncoderImplementation() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'encoderImplementation' field.
      * Indicate the name of the encoder implementation library
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearEncoderImplementation() {
      encoderImplementation = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }

    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[35], value);
      this.packetsReceived = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded synchronization source
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }

    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[36], value);
      this.packetsLost = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of bytes received on the corresponded synchronization source
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }

    /**
      * Sets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setJitter(java.lang.Double value) {
      validate(fields()[37], value);
      this.jitter = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The corresponded synchronization source reported jitter
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }

    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[38], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsRepaired() {
      return packetsRepaired;
    }

    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPacketsRepaired(java.lang.Integer value) {
      validate(fields()[39], value);
      this.packetsRepaired = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsLost() {
      return burstPacketsLost;
    }

    /**
      * Sets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @param value The value of 'burstPacketsLost'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstPacketsLost(java.lang.Integer value) {
      validate(fields()[40], value);
      this.burstPacketsLost = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsLost' field has been set.
      * The total number of packets lost in burst (RFC6958)
      * @return True if the 'burstPacketsLost' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsLost() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstPacketsLost() {
      burstPacketsLost = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsDiscarded() {
      return burstPacketsDiscarded;
    }

    /**
      * Sets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @param value The value of 'burstPacketsDiscarded'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[41], value);
      this.burstPacketsDiscarded = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsDiscarded' field has been set.
      * The total number of packets discarded in burst (RFC6958)
      * @return True if the 'burstPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsDiscarded() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstPacketsDiscarded() {
      burstPacketsDiscarded = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstLossCount() {
      return burstLossCount;
    }

    /**
      * Sets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @param value The value of 'burstLossCount'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstLossCount(java.lang.Integer value) {
      validate(fields()[42], value);
      this.burstLossCount = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossCount' field has been set.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return True if the 'burstLossCount' field has been set, false otherwise.
      */
    public boolean hasBurstLossCount() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstLossCount() {
      burstLossCount = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstDiscardCount() {
      return burstDiscardCount;
    }

    /**
      * Sets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @param value The value of 'burstDiscardCount'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstDiscardCount(java.lang.Integer value) {
      validate(fields()[43], value);
      this.burstDiscardCount = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardCount' field has been set.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return True if the 'burstDiscardCount' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardCount() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstDiscardCount() {
      burstDiscardCount = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstLossRate() {
      return burstLossRate;
    }

    /**
      * Sets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstLossRate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstLossRate(java.lang.Double value) {
      validate(fields()[44], value);
      this.burstLossRate = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossRate' field has been set.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstLossRate' field has been set, false otherwise.
      */
    public boolean hasBurstLossRate() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstLossRate() {
      burstLossRate = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstDiscardRate() {
      return burstDiscardRate;
    }

    /**
      * Sets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstDiscardRate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setBurstDiscardRate(java.lang.Double value) {
      validate(fields()[45], value);
      this.burstDiscardRate = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardRate' field has been set.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstDiscardRate' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardRate() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearBurstDiscardRate() {
      burstDiscardRate = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapLossRate() {
      return gapLossRate;
    }

    /**
      * Sets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapLossRate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setGapLossRate(java.lang.Double value) {
      validate(fields()[46], value);
      this.gapLossRate = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'gapLossRate' field has been set.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapLossRate' field has been set, false otherwise.
      */
    public boolean hasGapLossRate() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearGapLossRate() {
      gapLossRate = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapDiscardRate() {
      return gapDiscardRate;
    }

    /**
      * Sets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapDiscardRate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setGapDiscardRate(java.lang.Double value) {
      validate(fields()[47], value);
      this.gapDiscardRate = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'gapDiscardRate' field has been set.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapDiscardRate' field has been set, false otherwise.
      */
    public boolean hasGapDiscardRate() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearGapDiscardRate() {
      gapDiscardRate = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getRoundTripTime() {
      return roundTripTime;
    }

    /**
      * Sets the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @param value The value of 'roundTripTime'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRoundTripTime(java.lang.Double value) {
      validate(fields()[48], value);
      this.roundTripTime = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTime' field has been set.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return True if the 'roundTripTime' field has been set, false otherwise.
      */
    public boolean hasRoundTripTime() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'roundTripTime' field.
      * RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRoundTripTime() {
      roundTripTime = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalRoundTripTime() {
      return totalRoundTripTime;
    }

    /**
      * Sets the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @param value The value of 'totalRoundTripTime'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalRoundTripTime(java.lang.Double value) {
      validate(fields()[49], value);
      this.totalRoundTripTime = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRoundTripTime' field has been set.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return True if the 'totalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasTotalRoundTripTime() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'totalRoundTripTime' field.
      * The sum of RTT measurements belongs to the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalRoundTripTime() {
      totalRoundTripTime = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getFractionLost() {
      return fractionLost;
    }

    /**
      * Sets the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @param value The value of 'fractionLost'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setFractionLost(java.lang.Double value) {
      validate(fields()[50], value);
      this.fractionLost = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'fractionLost' field has been set.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return True if the 'fractionLost' field has been set, false otherwise.
      */
    public boolean hasFractionLost() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'fractionLost' field.
      * The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearFractionLost() {
      fractionLost = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return The value.
      */
    public java.lang.Integer getReportsReceived() {
      return reportsReceived;
    }

    /**
      * Sets the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @param value The value of 'reportsReceived'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setReportsReceived(java.lang.Integer value) {
      validate(fields()[51], value);
      this.reportsReceived = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsReceived' field has been set.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return True if the 'reportsReceived' field has been set, false otherwise.
      */
    public boolean hasReportsReceived() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'reportsReceived' field.
      * The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearReportsReceived() {
      reportsReceived = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @return The value.
      */
    public java.lang.Integer getRoundTripTimeMeasurements() {
      return roundTripTimeMeasurements;
    }

    /**
      * Sets the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @param value The value of 'roundTripTimeMeasurements'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRoundTripTimeMeasurements(java.lang.Integer value) {
      validate(fields()[52], value);
      this.roundTripTimeMeasurements = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTimeMeasurements' field has been set.
      * The total number of calculated RR measurements received on this source
      * @return True if the 'roundTripTimeMeasurements' field has been set, false otherwise.
      */
    public boolean hasRoundTripTimeMeasurements() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'roundTripTimeMeasurements' field.
      * The total number of calculated RR measurements received on this source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRoundTripTimeMeasurements() {
      roundTripTimeMeasurements = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return The value.
      */
    public java.lang.Boolean getRelayedSource() {
      return relayedSource;
    }

    /**
      * Sets the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @param value The value of 'relayedSource'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setRelayedSource(java.lang.Boolean value) {
      validate(fields()[53], value);
      this.relayedSource = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'relayedSource' field has been set.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return True if the 'relayedSource' field has been set, false otherwise.
      */
    public boolean hasRelayedSource() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'relayedSource' field.
      * True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearRelayedSource() {
      relayedSource = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'audioLevel' field.
      * Represents the audio level reported by the media source
      * @return The value.
      */
    public java.lang.Double getAudioLevel() {
      return audioLevel;
    }

    /**
      * Sets the value of the 'audioLevel' field.
      * Represents the audio level reported by the media source
      * @param value The value of 'audioLevel'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setAudioLevel(java.lang.Double value) {
      validate(fields()[54], value);
      this.audioLevel = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'audioLevel' field has been set.
      * Represents the audio level reported by the media source
      * @return True if the 'audioLevel' field has been set, false otherwise.
      */
    public boolean hasAudioLevel() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'audioLevel' field.
      * Represents the audio level reported by the media source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearAudioLevel() {
      audioLevel = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAudioEnergy' field.
      * Represents the energy level reported by the media source
      * @return The value.
      */
    public java.lang.Double getTotalAudioEnergy() {
      return totalAudioEnergy;
    }

    /**
      * Sets the value of the 'totalAudioEnergy' field.
      * Represents the energy level reported by the media source
      * @param value The value of 'totalAudioEnergy'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalAudioEnergy(java.lang.Double value) {
      validate(fields()[55], value);
      this.totalAudioEnergy = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAudioEnergy' field has been set.
      * Represents the energy level reported by the media source
      * @return True if the 'totalAudioEnergy' field has been set, false otherwise.
      */
    public boolean hasTotalAudioEnergy() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'totalAudioEnergy' field.
      * Represents the energy level reported by the media source
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalAudioEnergy() {
      totalAudioEnergy = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesDuration' field.
      * Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return The value.
      */
    public java.lang.Double getTotalSamplesDuration() {
      return totalSamplesDuration;
    }

    /**
      * Sets the value of the 'totalSamplesDuration' field.
      * Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @param value The value of 'totalSamplesDuration'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setTotalSamplesDuration(java.lang.Double value) {
      validate(fields()[56], value);
      this.totalSamplesDuration = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesDuration' field has been set.
      * Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return True if the 'totalSamplesDuration' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesDuration() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'totalSamplesDuration' field.
      * Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearTotalSamplesDuration() {
      totalSamplesDuration = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'echoReturnLoss' field.
      * Represents the echo cancellation in decibels corresponded to the media source.
      * @return The value.
      */
    public java.lang.Double getEchoReturnLoss() {
      return echoReturnLoss;
    }

    /**
      * Sets the value of the 'echoReturnLoss' field.
      * Represents the echo cancellation in decibels corresponded to the media source.
      * @param value The value of 'echoReturnLoss'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setEchoReturnLoss(java.lang.Double value) {
      validate(fields()[57], value);
      this.echoReturnLoss = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'echoReturnLoss' field has been set.
      * Represents the echo cancellation in decibels corresponded to the media source.
      * @return True if the 'echoReturnLoss' field has been set, false otherwise.
      */
    public boolean hasEchoReturnLoss() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'echoReturnLoss' field.
      * Represents the echo cancellation in decibels corresponded to the media source.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearEchoReturnLoss() {
      echoReturnLoss = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'echoReturnLossEnhancement' field.
      * Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return The value.
      */
    public java.lang.Double getEchoReturnLossEnhancement() {
      return echoReturnLossEnhancement;
    }

    /**
      * Sets the value of the 'echoReturnLossEnhancement' field.
      * Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @param value The value of 'echoReturnLossEnhancement'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setEchoReturnLossEnhancement(java.lang.Double value) {
      validate(fields()[58], value);
      this.echoReturnLossEnhancement = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'echoReturnLossEnhancement' field has been set.
      * Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return True if the 'echoReturnLossEnhancement' field has been set, false otherwise.
      */
    public boolean hasEchoReturnLossEnhancement() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'echoReturnLossEnhancement' field.
      * Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearEchoReturnLossEnhancement() {
      echoReturnLossEnhancement = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @return The value.
      */
    public java.lang.Boolean getEnded() {
      return ended;
    }

    /**
      * Sets the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setEnded(java.lang.Boolean value) {
      validate(fields()[59], value);
      this.ended = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * Flag represents if the sender ended the media stream track or not.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'ended' field.
      * Flag represents if the sender ended the media stream track or not.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearEnded() {
      ended = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }

    /**
      * Sets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[60], value);
      this.payloadType = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The type of the payload the RTP packet SSRC belongs to
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }

    /**
      * Sets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[61], value);
      this.mimeType = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }

    /**
      * Sets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[62], value);
      this.clockRate = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return The value.
      */
    public java.lang.Integer getChannels() {
      return channels;
    }

    /**
      * Sets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setChannels(java.lang.Integer value) {
      validate(fields()[63], value);
      this.channels = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }

    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[64], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return This builder.
      */
    public OutboundAudioTrackReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    @Override
    public OutboundAudioTrackReport build() {
      try {
        OutboundAudioTrackReport record = new OutboundAudioTrackReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.trackId = fieldSetFlags()[10] ? this.trackId : (java.lang.String) defaultValue(fields()[10]);
        record.rtpStreamId = fieldSetFlags()[11] ? this.rtpStreamId : (java.lang.String) defaultValue(fields()[11]);
        record.sampleSeq = fieldSetFlags()[12] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[12]);
        record.ssrc = fieldSetFlags()[13] ? this.ssrc : (java.lang.Long) defaultValue(fields()[13]);
        record.packetsSent = fieldSetFlags()[14] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[14]);
        record.bytesSent = fieldSetFlags()[15] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[15]);
        record.rid = fieldSetFlags()[16] ? this.rid : (java.lang.String) defaultValue(fields()[16]);
        record.lastPacketSentTimestamp = fieldSetFlags()[17] ? this.lastPacketSentTimestamp : (java.lang.Long) defaultValue(fields()[17]);
        record.headerBytesSent = fieldSetFlags()[18] ? this.headerBytesSent : (java.lang.Long) defaultValue(fields()[18]);
        record.packetsDiscardedOnSend = fieldSetFlags()[19] ? this.packetsDiscardedOnSend : (java.lang.Integer) defaultValue(fields()[19]);
        record.bytesDiscardedOnSend = fieldSetFlags()[20] ? this.bytesDiscardedOnSend : (java.lang.Long) defaultValue(fields()[20]);
        record.fecPacketsSent = fieldSetFlags()[21] ? this.fecPacketsSent : (java.lang.Integer) defaultValue(fields()[21]);
        record.retransmittedPacketsSent = fieldSetFlags()[22] ? this.retransmittedPacketsSent : (java.lang.Integer) defaultValue(fields()[22]);
        record.retransmittedBytesSent = fieldSetFlags()[23] ? this.retransmittedBytesSent : (java.lang.Long) defaultValue(fields()[23]);
        record.targetBitrate = fieldSetFlags()[24] ? this.targetBitrate : (java.lang.Long) defaultValue(fields()[24]);
        record.totalEncodedBytesTarget = fieldSetFlags()[25] ? this.totalEncodedBytesTarget : (java.lang.Long) defaultValue(fields()[25]);
        record.totalSamplesSent = fieldSetFlags()[26] ? this.totalSamplesSent : (java.lang.Integer) defaultValue(fields()[26]);
        record.samplesEncodedWithSilk = fieldSetFlags()[27] ? this.samplesEncodedWithSilk : (java.lang.Integer) defaultValue(fields()[27]);
        record.samplesEncodedWithCelt = fieldSetFlags()[28] ? this.samplesEncodedWithCelt : (java.lang.Integer) defaultValue(fields()[28]);
        record.voiceActivityFlag = fieldSetFlags()[29] ? this.voiceActivityFlag : (java.lang.Boolean) defaultValue(fields()[29]);
        record.totalPacketSendDelay = fieldSetFlags()[30] ? this.totalPacketSendDelay : (java.lang.Double) defaultValue(fields()[30]);
        record.averageRtcpInterval = fieldSetFlags()[31] ? this.averageRtcpInterval : (java.lang.Double) defaultValue(fields()[31]);
        record.perDscpPacketsSent = fieldSetFlags()[32] ? this.perDscpPacketsSent : (java.lang.Double) defaultValue(fields()[32]);
        record.nackCount = fieldSetFlags()[33] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[33]);
        record.encoderImplementation = fieldSetFlags()[34] ? this.encoderImplementation : (java.lang.String) defaultValue(fields()[34]);
        record.packetsReceived = fieldSetFlags()[35] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[35]);
        record.packetsLost = fieldSetFlags()[36] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[36]);
        record.jitter = fieldSetFlags()[37] ? this.jitter : (java.lang.Double) defaultValue(fields()[37]);
        record.packetsDiscarded = fieldSetFlags()[38] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[38]);
        record.packetsRepaired = fieldSetFlags()[39] ? this.packetsRepaired : (java.lang.Integer) defaultValue(fields()[39]);
        record.burstPacketsLost = fieldSetFlags()[40] ? this.burstPacketsLost : (java.lang.Integer) defaultValue(fields()[40]);
        record.burstPacketsDiscarded = fieldSetFlags()[41] ? this.burstPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[41]);
        record.burstLossCount = fieldSetFlags()[42] ? this.burstLossCount : (java.lang.Integer) defaultValue(fields()[42]);
        record.burstDiscardCount = fieldSetFlags()[43] ? this.burstDiscardCount : (java.lang.Integer) defaultValue(fields()[43]);
        record.burstLossRate = fieldSetFlags()[44] ? this.burstLossRate : (java.lang.Double) defaultValue(fields()[44]);
        record.burstDiscardRate = fieldSetFlags()[45] ? this.burstDiscardRate : (java.lang.Double) defaultValue(fields()[45]);
        record.gapLossRate = fieldSetFlags()[46] ? this.gapLossRate : (java.lang.Double) defaultValue(fields()[46]);
        record.gapDiscardRate = fieldSetFlags()[47] ? this.gapDiscardRate : (java.lang.Double) defaultValue(fields()[47]);
        record.roundTripTime = fieldSetFlags()[48] ? this.roundTripTime : (java.lang.Double) defaultValue(fields()[48]);
        record.totalRoundTripTime = fieldSetFlags()[49] ? this.totalRoundTripTime : (java.lang.Double) defaultValue(fields()[49]);
        record.fractionLost = fieldSetFlags()[50] ? this.fractionLost : (java.lang.Double) defaultValue(fields()[50]);
        record.reportsReceived = fieldSetFlags()[51] ? this.reportsReceived : (java.lang.Integer) defaultValue(fields()[51]);
        record.roundTripTimeMeasurements = fieldSetFlags()[52] ? this.roundTripTimeMeasurements : (java.lang.Integer) defaultValue(fields()[52]);
        record.relayedSource = fieldSetFlags()[53] ? this.relayedSource : (java.lang.Boolean) defaultValue(fields()[53]);
        record.audioLevel = fieldSetFlags()[54] ? this.audioLevel : (java.lang.Double) defaultValue(fields()[54]);
        record.totalAudioEnergy = fieldSetFlags()[55] ? this.totalAudioEnergy : (java.lang.Double) defaultValue(fields()[55]);
        record.totalSamplesDuration = fieldSetFlags()[56] ? this.totalSamplesDuration : (java.lang.Double) defaultValue(fields()[56]);
        record.echoReturnLoss = fieldSetFlags()[57] ? this.echoReturnLoss : (java.lang.Double) defaultValue(fields()[57]);
        record.echoReturnLossEnhancement = fieldSetFlags()[58] ? this.echoReturnLossEnhancement : (java.lang.Double) defaultValue(fields()[58]);
        record.ended = fieldSetFlags()[59] ? this.ended : (java.lang.Boolean) defaultValue(fields()[59]);
        record.payloadType = fieldSetFlags()[60] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[60]);
        record.mimeType = fieldSetFlags()[61] ? this.mimeType : (java.lang.String) defaultValue(fields()[61]);
        record.clockRate = fieldSetFlags()[62] ? this.clockRate : (java.lang.Long) defaultValue(fields()[62]);
        record.channels = fieldSetFlags()[63] ? this.channels : (java.lang.Integer) defaultValue(fields()[63]);
        record.sdpFmtpLine = fieldSetFlags()[64] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[64]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
