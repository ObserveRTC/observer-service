/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A Report created for RTP streams going through the SFU */
@org.apache.avro.specific.AvroGenerated
public class SfuOutboundRtpPadReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8664486925352301571L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SfuOutboundRtpPadReport\",\"namespace\":\"org.observertc.schemas.reports\",\"doc\":\"A Report created for RTP streams going through the SFU\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The service id the report belongs to\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"sfuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The provided unique identifier of the SFU\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"transportId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of the transport the RTP stream uses.\"},{\"name\":\"sfuStreamId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier of the Sfu stream the event is related to\"},{\"name\":\"sfuSinkId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier of the Sfu sink the event is related to\"},{\"name\":\"rtpPadId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of RTP pad.\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The synchronization source id of the RTP stream\"},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The callId the event belongs to\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to\",\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track the RTP stream related to at the client side\",\"default\":null},{\"name\":\"mediaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the type of the media the stream carries (\\\"audio\\\" or \\\"video\\\")\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The payload type field of the RTP header\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The negotiated mimeType in the SDP\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The clock rate of the media source the RTP header carries\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The actual SDP line from the negotiation related to this RTP stream\",\"default\":null},{\"name\":\"rid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" The rid parameter of the corresponded RTP stream\",\"default\":null},{\"name\":\"rtxSsrc\",\"type\":[\"null\",\"long\"],\"doc\":\"If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. \",\"default\":null},{\"name\":\"targetBitrate\",\"type\":[\"null\",\"long\"],\"doc\":\"he bitrate the corresponded stream targets.\",\"default\":null},{\"name\":\"voiceActivityFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through\",\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams\",\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of negative acknowledgement received on the corresponded RTP stream.\",\"default\":null},{\"name\":\"sliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets sent on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of discarded packets on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsRetransmitted\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets retransmitted on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsFailedEncryption\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets failed to be encrypted on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsDuplicated\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of duplicated packets appeared on the corresponded RTP stream.\",\"default\":null},{\"name\":\"fecPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of FEC packets sent on the corresponded RTP stream.\",\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of FEC packets discarded on the corresponded RTP stream.\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of payload bytes sent on the corresponded RTP stream.\",\"default\":null},{\"name\":\"rtcpSrSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of SR reports sent by the corresponded RTP stream\",\"default\":null},{\"name\":\"rtcpRrReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of RR reports received on the corresponded RTP stream\",\"default\":null},{\"name\":\"rtxPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"If rtx packets sent on the same stream then this number indicates how may has been sent\",\"default\":null},{\"name\":\"rtxPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"If rtx packets are received on the same stream then this number indicates how may has been discarded\",\"default\":null},{\"name\":\"framesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames sent on the corresponded RTP stream\",\"default\":null},{\"name\":\"framesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of frames the Sfu has been encoded\",\"default\":null},{\"name\":\"keyFramesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SfuOutboundRtpPadReport> ENCODER =
      new BinaryMessageEncoder<SfuOutboundRtpPadReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SfuOutboundRtpPadReport> DECODER =
      new BinaryMessageDecoder<SfuOutboundRtpPadReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SfuOutboundRtpPadReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SfuOutboundRtpPadReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SfuOutboundRtpPadReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SfuOutboundRtpPadReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SfuOutboundRtpPadReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SfuOutboundRtpPadReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SfuOutboundRtpPadReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SfuOutboundRtpPadReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The service id the report belongs to */
  private java.lang.String serviceId;
  /** The media unit id the report belongs to */
  private java.lang.String mediaUnitId;
  /** The provided unique identifier of the SFU */
  private java.lang.String sfuId;
  /** The marker the originated sample is reported with */
  private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
  private long timestamp;
  /** The id of the transport the RTP stream uses. */
  private java.lang.String transportId;
  /** Unique identifier of the Sfu stream the event is related to */
  private java.lang.String sfuStreamId;
  /** Unique identifier of the Sfu sink the event is related to */
  private java.lang.String sfuSinkId;
  /** The id of RTP pad. */
  private java.lang.String rtpPadId;
  /** The synchronization source id of the RTP stream */
  private long ssrc;
  /** The callId the event belongs to */
  private java.lang.String callId;
  /** If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to */
  private java.lang.String clientId;
  /** The id of the track the RTP stream related to at the client side */
  private java.lang.String trackId;
  /** the type of the media the stream carries ("audio" or "video") */
  private java.lang.String mediaType;
  /** The payload type field of the RTP header */
  private java.lang.Integer payloadType;
  /** The negotiated mimeType in the SDP */
  private java.lang.String mimeType;
  /** The clock rate of the media source the RTP header carries */
  private java.lang.Long clockRate;
  /** The actual SDP line from the negotiation related to this RTP stream */
  private java.lang.String sdpFmtpLine;
  /**  The rid parameter of the corresponded RTP stream */
  private java.lang.String rid;
  /** If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc.  */
  private java.lang.Long rtxSsrc;
  /** he bitrate the corresponded stream targets. */
  private java.lang.Long targetBitrate;
  /** The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through */
  private java.lang.Boolean voiceActivityFlag;
  /** The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams */
  private java.lang.Integer firCount;
  /** The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams */
  private java.lang.Integer pliCount;
  /** The total number of negative acknowledgement received on the corresponded RTP stream. */
  private java.lang.Integer nackCount;
  /** The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream */
  private java.lang.Integer sliCount;
  /** The total number of packets lost on the corresponded RTP stream. */
  private java.lang.Integer packetsLost;
  /** The total number of packets sent on the corresponded RTP stream. */
  private java.lang.Integer packetsSent;
  /** The total number of discarded packets on the corresponded RTP stream. */
  private java.lang.Integer packetsDiscarded;
  /** The total number of packets retransmitted on the corresponded RTP stream. */
  private java.lang.Integer packetsRetransmitted;
  /** The total number of packets failed to be encrypted on the corresponded RTP stream. */
  private java.lang.Integer packetsFailedEncryption;
  /** The total number of duplicated packets appeared on the corresponded RTP stream. */
  private java.lang.Integer packetsDuplicated;
  /** The total number of FEC packets sent on the corresponded RTP stream. */
  private java.lang.Integer fecPacketsSent;
  /** The total number of FEC packets discarded on the corresponded RTP stream. */
  private java.lang.Integer fecPacketsDiscarded;
  /** The total amount of payload bytes sent on the corresponded RTP stream. */
  private java.lang.Long bytesSent;
  /** The total number of SR reports sent by the corresponded RTP stream */
  private java.lang.Integer rtcpSrSent;
  /** The total number of RR reports received on the corresponded RTP stream */
  private java.lang.Integer rtcpRrReceived;
  /** If rtx packets sent on the same stream then this number indicates how may has been sent */
  private java.lang.Integer rtxPacketsSent;
  /** If rtx packets are received on the same stream then this number indicates how may has been discarded */
  private java.lang.Integer rtxPacketsDiscarded;
  /** The number of frames sent on the corresponded RTP stream */
  private java.lang.Integer framesSent;
  /** Indicate the number of frames the Sfu has been encoded */
  private java.lang.Integer framesEncoded;
  /** Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream */
  private java.lang.Integer keyFramesEncoded;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SfuOutboundRtpPadReport() {}

  /**
   * All-args constructor.
   * @param serviceId The service id the report belongs to
   * @param mediaUnitId The media unit id the report belongs to
   * @param sfuId The provided unique identifier of the SFU
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param transportId The id of the transport the RTP stream uses.
   * @param sfuStreamId Unique identifier of the Sfu stream the event is related to
   * @param sfuSinkId Unique identifier of the Sfu sink the event is related to
   * @param rtpPadId The id of RTP pad.
   * @param ssrc The synchronization source id of the RTP stream
   * @param callId The callId the event belongs to
   * @param clientId If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
   * @param trackId The id of the track the RTP stream related to at the client side
   * @param mediaType the type of the media the stream carries ("audio" or "video")
   * @param payloadType The payload type field of the RTP header
   * @param mimeType The negotiated mimeType in the SDP
   * @param clockRate The clock rate of the media source the RTP header carries
   * @param sdpFmtpLine The actual SDP line from the negotiation related to this RTP stream
   * @param rid  The rid parameter of the corresponded RTP stream
   * @param rtxSsrc If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
   * @param targetBitrate he bitrate the corresponded stream targets.
   * @param voiceActivityFlag The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
   * @param firCount The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
   * @param pliCount The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
   * @param nackCount The total number of negative acknowledgement received on the corresponded RTP stream.
   * @param sliCount The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
   * @param packetsLost The total number of packets lost on the corresponded RTP stream.
   * @param packetsSent The total number of packets sent on the corresponded RTP stream.
   * @param packetsDiscarded The total number of discarded packets on the corresponded RTP stream.
   * @param packetsRetransmitted The total number of packets retransmitted on the corresponded RTP stream.
   * @param packetsFailedEncryption The total number of packets failed to be encrypted on the corresponded RTP stream.
   * @param packetsDuplicated The total number of duplicated packets appeared on the corresponded RTP stream.
   * @param fecPacketsSent The total number of FEC packets sent on the corresponded RTP stream.
   * @param fecPacketsDiscarded The total number of FEC packets discarded on the corresponded RTP stream.
   * @param bytesSent The total amount of payload bytes sent on the corresponded RTP stream.
   * @param rtcpSrSent The total number of SR reports sent by the corresponded RTP stream
   * @param rtcpRrReceived The total number of RR reports received on the corresponded RTP stream
   * @param rtxPacketsSent If rtx packets sent on the same stream then this number indicates how may has been sent
   * @param rtxPacketsDiscarded If rtx packets are received on the same stream then this number indicates how may has been discarded
   * @param framesSent The number of frames sent on the corresponded RTP stream
   * @param framesEncoded Indicate the number of frames the Sfu has been encoded
   * @param keyFramesEncoded Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
   */
  public SfuOutboundRtpPadReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String sfuId, java.lang.String marker, java.lang.Long timestamp, java.lang.String transportId, java.lang.String sfuStreamId, java.lang.String sfuSinkId, java.lang.String rtpPadId, java.lang.Long ssrc, java.lang.String callId, java.lang.String clientId, java.lang.String trackId, java.lang.String mediaType, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.String sdpFmtpLine, java.lang.String rid, java.lang.Long rtxSsrc, java.lang.Long targetBitrate, java.lang.Boolean voiceActivityFlag, java.lang.Integer firCount, java.lang.Integer pliCount, java.lang.Integer nackCount, java.lang.Integer sliCount, java.lang.Integer packetsLost, java.lang.Integer packetsSent, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRetransmitted, java.lang.Integer packetsFailedEncryption, java.lang.Integer packetsDuplicated, java.lang.Integer fecPacketsSent, java.lang.Integer fecPacketsDiscarded, java.lang.Long bytesSent, java.lang.Integer rtcpSrSent, java.lang.Integer rtcpRrReceived, java.lang.Integer rtxPacketsSent, java.lang.Integer rtxPacketsDiscarded, java.lang.Integer framesSent, java.lang.Integer framesEncoded, java.lang.Integer keyFramesEncoded) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.sfuId = sfuId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.transportId = transportId;
    this.sfuStreamId = sfuStreamId;
    this.sfuSinkId = sfuSinkId;
    this.rtpPadId = rtpPadId;
    this.ssrc = ssrc;
    this.callId = callId;
    this.clientId = clientId;
    this.trackId = trackId;
    this.mediaType = mediaType;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.sdpFmtpLine = sdpFmtpLine;
    this.rid = rid;
    this.rtxSsrc = rtxSsrc;
    this.targetBitrate = targetBitrate;
    this.voiceActivityFlag = voiceActivityFlag;
    this.firCount = firCount;
    this.pliCount = pliCount;
    this.nackCount = nackCount;
    this.sliCount = sliCount;
    this.packetsLost = packetsLost;
    this.packetsSent = packetsSent;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRetransmitted = packetsRetransmitted;
    this.packetsFailedEncryption = packetsFailedEncryption;
    this.packetsDuplicated = packetsDuplicated;
    this.fecPacketsSent = fecPacketsSent;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.bytesSent = bytesSent;
    this.rtcpSrSent = rtcpSrSent;
    this.rtcpRrReceived = rtcpRrReceived;
    this.rtxPacketsSent = rtxPacketsSent;
    this.rtxPacketsDiscarded = rtxPacketsDiscarded;
    this.framesSent = framesSent;
    this.framesEncoded = framesEncoded;
    this.keyFramesEncoded = keyFramesEncoded;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return sfuId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return transportId;
    case 6: return sfuStreamId;
    case 7: return sfuSinkId;
    case 8: return rtpPadId;
    case 9: return ssrc;
    case 10: return callId;
    case 11: return clientId;
    case 12: return trackId;
    case 13: return mediaType;
    case 14: return payloadType;
    case 15: return mimeType;
    case 16: return clockRate;
    case 17: return sdpFmtpLine;
    case 18: return rid;
    case 19: return rtxSsrc;
    case 20: return targetBitrate;
    case 21: return voiceActivityFlag;
    case 22: return firCount;
    case 23: return pliCount;
    case 24: return nackCount;
    case 25: return sliCount;
    case 26: return packetsLost;
    case 27: return packetsSent;
    case 28: return packetsDiscarded;
    case 29: return packetsRetransmitted;
    case 30: return packetsFailedEncryption;
    case 31: return packetsDuplicated;
    case 32: return fecPacketsSent;
    case 33: return fecPacketsDiscarded;
    case 34: return bytesSent;
    case 35: return rtcpSrSent;
    case 36: return rtcpRrReceived;
    case 37: return rtxPacketsSent;
    case 38: return rtxPacketsDiscarded;
    case 39: return framesSent;
    case 40: return framesEncoded;
    case 41: return keyFramesEncoded;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 2: sfuId = value$ != null ? value$.toString() : null; break;
    case 3: marker = value$ != null ? value$.toString() : null; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: transportId = value$ != null ? value$.toString() : null; break;
    case 6: sfuStreamId = value$ != null ? value$.toString() : null; break;
    case 7: sfuSinkId = value$ != null ? value$.toString() : null; break;
    case 8: rtpPadId = value$ != null ? value$.toString() : null; break;
    case 9: ssrc = (java.lang.Long)value$; break;
    case 10: callId = value$ != null ? value$.toString() : null; break;
    case 11: clientId = value$ != null ? value$.toString() : null; break;
    case 12: trackId = value$ != null ? value$.toString() : null; break;
    case 13: mediaType = value$ != null ? value$.toString() : null; break;
    case 14: payloadType = (java.lang.Integer)value$; break;
    case 15: mimeType = value$ != null ? value$.toString() : null; break;
    case 16: clockRate = (java.lang.Long)value$; break;
    case 17: sdpFmtpLine = value$ != null ? value$.toString() : null; break;
    case 18: rid = value$ != null ? value$.toString() : null; break;
    case 19: rtxSsrc = (java.lang.Long)value$; break;
    case 20: targetBitrate = (java.lang.Long)value$; break;
    case 21: voiceActivityFlag = (java.lang.Boolean)value$; break;
    case 22: firCount = (java.lang.Integer)value$; break;
    case 23: pliCount = (java.lang.Integer)value$; break;
    case 24: nackCount = (java.lang.Integer)value$; break;
    case 25: sliCount = (java.lang.Integer)value$; break;
    case 26: packetsLost = (java.lang.Integer)value$; break;
    case 27: packetsSent = (java.lang.Integer)value$; break;
    case 28: packetsDiscarded = (java.lang.Integer)value$; break;
    case 29: packetsRetransmitted = (java.lang.Integer)value$; break;
    case 30: packetsFailedEncryption = (java.lang.Integer)value$; break;
    case 31: packetsDuplicated = (java.lang.Integer)value$; break;
    case 32: fecPacketsSent = (java.lang.Integer)value$; break;
    case 33: fecPacketsDiscarded = (java.lang.Integer)value$; break;
    case 34: bytesSent = (java.lang.Long)value$; break;
    case 35: rtcpSrSent = (java.lang.Integer)value$; break;
    case 36: rtcpRrReceived = (java.lang.Integer)value$; break;
    case 37: rtxPacketsSent = (java.lang.Integer)value$; break;
    case 38: rtxPacketsDiscarded = (java.lang.Integer)value$; break;
    case 39: framesSent = (java.lang.Integer)value$; break;
    case 40: framesEncoded = (java.lang.Integer)value$; break;
    case 41: keyFramesEncoded = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The service id the report belongs to
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'sfuId' field.
   * @return The provided unique identifier of the SFU
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }



  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'transportId' field.
   * @return The id of the transport the RTP stream uses.
   */
  public java.lang.String getTransportId() {
    return transportId;
  }



  /**
   * Gets the value of the 'sfuStreamId' field.
   * @return Unique identifier of the Sfu stream the event is related to
   */
  public java.lang.String getSfuStreamId() {
    return sfuStreamId;
  }



  /**
   * Gets the value of the 'sfuSinkId' field.
   * @return Unique identifier of the Sfu sink the event is related to
   */
  public java.lang.String getSfuSinkId() {
    return sfuSinkId;
  }



  /**
   * Gets the value of the 'rtpPadId' field.
   * @return The id of RTP pad.
   */
  public java.lang.String getRtpPadId() {
    return rtpPadId;
  }



  /**
   * Gets the value of the 'ssrc' field.
   * @return The synchronization source id of the RTP stream
   */
  public long getSsrc() {
    return ssrc;
  }



  /**
   * Gets the value of the 'callId' field.
   * @return The callId the event belongs to
   */
  public java.lang.String getCallId() {
    return callId;
  }



  /**
   * Gets the value of the 'clientId' field.
   * @return If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
   */
  public java.lang.String getClientId() {
    return clientId;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track the RTP stream related to at the client side
   */
  public java.lang.String getTrackId() {
    return trackId;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return the type of the media the stream carries ("audio" or "video")
   */
  public java.lang.String getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'payloadType' field.
   * @return The payload type field of the RTP header
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }



  /**
   * Gets the value of the 'mimeType' field.
   * @return The negotiated mimeType in the SDP
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }



  /**
   * Gets the value of the 'clockRate' field.
   * @return The clock rate of the media source the RTP header carries
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }



  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The actual SDP line from the negotiation related to this RTP stream
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }



  /**
   * Gets the value of the 'rid' field.
   * @return  The rid parameter of the corresponded RTP stream
   */
  public java.lang.String getRid() {
    return rid;
  }



  /**
   * Gets the value of the 'rtxSsrc' field.
   * @return If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
   */
  public java.lang.Long getRtxSsrc() {
    return rtxSsrc;
  }



  /**
   * Gets the value of the 'targetBitrate' field.
   * @return he bitrate the corresponded stream targets.
   */
  public java.lang.Long getTargetBitrate() {
    return targetBitrate;
  }



  /**
   * Gets the value of the 'voiceActivityFlag' field.
   * @return The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
   */
  public java.lang.Boolean getVoiceActivityFlag() {
    return voiceActivityFlag;
  }



  /**
   * Gets the value of the 'firCount' field.
   * @return The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }



  /**
   * Gets the value of the 'pliCount' field.
   * @return The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }



  /**
   * Gets the value of the 'nackCount' field.
   * @return The total number of negative acknowledgement received on the corresponded RTP stream.
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }



  /**
   * Gets the value of the 'sliCount' field.
   * @return The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
   */
  public java.lang.Integer getSliCount() {
    return sliCount;
  }



  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of packets lost on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }



  /**
   * Gets the value of the 'packetsSent' field.
   * @return The total number of packets sent on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }



  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of discarded packets on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }



  /**
   * Gets the value of the 'packetsRetransmitted' field.
   * @return The total number of packets retransmitted on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsRetransmitted() {
    return packetsRetransmitted;
  }



  /**
   * Gets the value of the 'packetsFailedEncryption' field.
   * @return The total number of packets failed to be encrypted on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsFailedEncryption() {
    return packetsFailedEncryption;
  }



  /**
   * Gets the value of the 'packetsDuplicated' field.
   * @return The total number of duplicated packets appeared on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsDuplicated() {
    return packetsDuplicated;
  }



  /**
   * Gets the value of the 'fecPacketsSent' field.
   * @return The total number of FEC packets sent on the corresponded RTP stream.
   */
  public java.lang.Integer getFecPacketsSent() {
    return fecPacketsSent;
  }



  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return The total number of FEC packets discarded on the corresponded RTP stream.
   */
  public java.lang.Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return The total amount of payload bytes sent on the corresponded RTP stream.
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'rtcpSrSent' field.
   * @return The total number of SR reports sent by the corresponded RTP stream
   */
  public java.lang.Integer getRtcpSrSent() {
    return rtcpSrSent;
  }



  /**
   * Gets the value of the 'rtcpRrReceived' field.
   * @return The total number of RR reports received on the corresponded RTP stream
   */
  public java.lang.Integer getRtcpRrReceived() {
    return rtcpRrReceived;
  }



  /**
   * Gets the value of the 'rtxPacketsSent' field.
   * @return If rtx packets sent on the same stream then this number indicates how may has been sent
   */
  public java.lang.Integer getRtxPacketsSent() {
    return rtxPacketsSent;
  }



  /**
   * Gets the value of the 'rtxPacketsDiscarded' field.
   * @return If rtx packets are received on the same stream then this number indicates how may has been discarded
   */
  public java.lang.Integer getRtxPacketsDiscarded() {
    return rtxPacketsDiscarded;
  }



  /**
   * Gets the value of the 'framesSent' field.
   * @return The number of frames sent on the corresponded RTP stream
   */
  public java.lang.Integer getFramesSent() {
    return framesSent;
  }



  /**
   * Gets the value of the 'framesEncoded' field.
   * @return Indicate the number of frames the Sfu has been encoded
   */
  public java.lang.Integer getFramesEncoded() {
    return framesEncoded;
  }



  /**
   * Gets the value of the 'keyFramesEncoded' field.
   * @return Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
   */
  public java.lang.Integer getKeyFramesEncoded() {
    return keyFramesEncoded;
  }



  /**
   * Creates a new SfuOutboundRtpPadReport RecordBuilder.
   * @return A new SfuOutboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder newBuilder() {
    return new org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder();
  }

  /**
   * Creates a new SfuOutboundRtpPadReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SfuOutboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder newBuilder(org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder other) {
    if (other == null) {
      return new org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder();
    } else {
      return new org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder(other);
    }
  }

  /**
   * Creates a new SfuOutboundRtpPadReport RecordBuilder by copying an existing SfuOutboundRtpPadReport instance.
   * @param other The existing instance to copy.
   * @return A new SfuOutboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder newBuilder(org.observertc.schemas.reports.SfuOutboundRtpPadReport other) {
    if (other == null) {
      return new org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder();
    } else {
      return new org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for SfuOutboundRtpPadReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SfuOutboundRtpPadReport>
    implements org.apache.avro.data.RecordBuilder<SfuOutboundRtpPadReport> {

    /** The service id the report belongs to */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The provided unique identifier of the SFU */
    private java.lang.String sfuId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The id of the transport the RTP stream uses. */
    private java.lang.String transportId;
    /** Unique identifier of the Sfu stream the event is related to */
    private java.lang.String sfuStreamId;
    /** Unique identifier of the Sfu sink the event is related to */
    private java.lang.String sfuSinkId;
    /** The id of RTP pad. */
    private java.lang.String rtpPadId;
    /** The synchronization source id of the RTP stream */
    private long ssrc;
    /** The callId the event belongs to */
    private java.lang.String callId;
    /** If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to */
    private java.lang.String clientId;
    /** The id of the track the RTP stream related to at the client side */
    private java.lang.String trackId;
    /** the type of the media the stream carries ("audio" or "video") */
    private java.lang.String mediaType;
    /** The payload type field of the RTP header */
    private java.lang.Integer payloadType;
    /** The negotiated mimeType in the SDP */
    private java.lang.String mimeType;
    /** The clock rate of the media source the RTP header carries */
    private java.lang.Long clockRate;
    /** The actual SDP line from the negotiation related to this RTP stream */
    private java.lang.String sdpFmtpLine;
    /**  The rid parameter of the corresponded RTP stream */
    private java.lang.String rid;
    /** If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc.  */
    private java.lang.Long rtxSsrc;
    /** he bitrate the corresponded stream targets. */
    private java.lang.Long targetBitrate;
    /** The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through */
    private java.lang.Boolean voiceActivityFlag;
    /** The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams */
    private java.lang.Integer firCount;
    /** The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams */
    private java.lang.Integer pliCount;
    /** The total number of negative acknowledgement received on the corresponded RTP stream. */
    private java.lang.Integer nackCount;
    /** The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream */
    private java.lang.Integer sliCount;
    /** The total number of packets lost on the corresponded RTP stream. */
    private java.lang.Integer packetsLost;
    /** The total number of packets sent on the corresponded RTP stream. */
    private java.lang.Integer packetsSent;
    /** The total number of discarded packets on the corresponded RTP stream. */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets retransmitted on the corresponded RTP stream. */
    private java.lang.Integer packetsRetransmitted;
    /** The total number of packets failed to be encrypted on the corresponded RTP stream. */
    private java.lang.Integer packetsFailedEncryption;
    /** The total number of duplicated packets appeared on the corresponded RTP stream. */
    private java.lang.Integer packetsDuplicated;
    /** The total number of FEC packets sent on the corresponded RTP stream. */
    private java.lang.Integer fecPacketsSent;
    /** The total number of FEC packets discarded on the corresponded RTP stream. */
    private java.lang.Integer fecPacketsDiscarded;
    /** The total amount of payload bytes sent on the corresponded RTP stream. */
    private java.lang.Long bytesSent;
    /** The total number of SR reports sent by the corresponded RTP stream */
    private java.lang.Integer rtcpSrSent;
    /** The total number of RR reports received on the corresponded RTP stream */
    private java.lang.Integer rtcpRrReceived;
    /** If rtx packets sent on the same stream then this number indicates how may has been sent */
    private java.lang.Integer rtxPacketsSent;
    /** If rtx packets are received on the same stream then this number indicates how may has been discarded */
    private java.lang.Integer rtxPacketsDiscarded;
    /** The number of frames sent on the corresponded RTP stream */
    private java.lang.Integer framesSent;
    /** Indicate the number of frames the Sfu has been encoded */
    private java.lang.Integer framesEncoded;
    /** Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream */
    private java.lang.Integer keyFramesEncoded;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transportId)) {
        this.transportId = data().deepCopy(fields()[5].schema(), other.transportId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sfuStreamId)) {
        this.sfuStreamId = data().deepCopy(fields()[6].schema(), other.sfuStreamId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sfuSinkId)) {
        this.sfuSinkId = data().deepCopy(fields()[7].schema(), other.sfuSinkId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.rtpPadId)) {
        this.rtpPadId = data().deepCopy(fields()[8].schema(), other.rtpPadId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[9].schema(), other.ssrc);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.callId)) {
        this.callId = data().deepCopy(fields()[10].schema(), other.callId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.clientId)) {
        this.clientId = data().deepCopy(fields()[11].schema(), other.clientId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.trackId)) {
        this.trackId = data().deepCopy(fields()[12].schema(), other.trackId);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[13].schema(), other.mediaType);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[14].schema(), other.payloadType);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[15].schema(), other.mimeType);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[16].schema(), other.clockRate);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[17].schema(), other.sdpFmtpLine);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.rid)) {
        this.rid = data().deepCopy(fields()[18].schema(), other.rid);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.rtxSsrc)) {
        this.rtxSsrc = data().deepCopy(fields()[19].schema(), other.rtxSsrc);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[20].schema(), other.targetBitrate);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[21].schema(), other.voiceActivityFlag);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.firCount)) {
        this.firCount = data().deepCopy(fields()[22].schema(), other.firCount);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[23].schema(), other.pliCount);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[24].schema(), other.nackCount);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[25].schema(), other.sliCount);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[26].schema(), other.packetsLost);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[27].schema(), other.packetsSent);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[28].schema(), other.packetsDiscarded);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.packetsRetransmitted)) {
        this.packetsRetransmitted = data().deepCopy(fields()[29].schema(), other.packetsRetransmitted);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.packetsFailedEncryption)) {
        this.packetsFailedEncryption = data().deepCopy(fields()[30].schema(), other.packetsFailedEncryption);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[31].schema(), other.packetsDuplicated);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[32].schema(), other.fecPacketsSent);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[33].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[34].schema(), other.bytesSent);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.rtcpSrSent)) {
        this.rtcpSrSent = data().deepCopy(fields()[35].schema(), other.rtcpSrSent);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.rtcpRrReceived)) {
        this.rtcpRrReceived = data().deepCopy(fields()[36].schema(), other.rtcpRrReceived);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.rtxPacketsSent)) {
        this.rtxPacketsSent = data().deepCopy(fields()[37].schema(), other.rtxPacketsSent);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[38].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[39].schema(), other.framesSent);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[40].schema(), other.framesEncoded);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[41].schema(), other.keyFramesEncoded);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
    }

    /**
     * Creates a Builder by copying an existing SfuOutboundRtpPadReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.schemas.reports.SfuOutboundRtpPadReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transportId)) {
        this.transportId = data().deepCopy(fields()[5].schema(), other.transportId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sfuStreamId)) {
        this.sfuStreamId = data().deepCopy(fields()[6].schema(), other.sfuStreamId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sfuSinkId)) {
        this.sfuSinkId = data().deepCopy(fields()[7].schema(), other.sfuSinkId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.rtpPadId)) {
        this.rtpPadId = data().deepCopy(fields()[8].schema(), other.rtpPadId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[9].schema(), other.ssrc);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.callId)) {
        this.callId = data().deepCopy(fields()[10].schema(), other.callId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.clientId)) {
        this.clientId = data().deepCopy(fields()[11].schema(), other.clientId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.trackId)) {
        this.trackId = data().deepCopy(fields()[12].schema(), other.trackId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[13].schema(), other.mediaType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[14].schema(), other.payloadType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[15].schema(), other.mimeType);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[16].schema(), other.clockRate);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[17].schema(), other.sdpFmtpLine);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.rid)) {
        this.rid = data().deepCopy(fields()[18].schema(), other.rid);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.rtxSsrc)) {
        this.rtxSsrc = data().deepCopy(fields()[19].schema(), other.rtxSsrc);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[20].schema(), other.targetBitrate);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[21].schema(), other.voiceActivityFlag);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.firCount)) {
        this.firCount = data().deepCopy(fields()[22].schema(), other.firCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[23].schema(), other.pliCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[24].schema(), other.nackCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[25].schema(), other.sliCount);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[26].schema(), other.packetsLost);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[27].schema(), other.packetsSent);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[28].schema(), other.packetsDiscarded);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.packetsRetransmitted)) {
        this.packetsRetransmitted = data().deepCopy(fields()[29].schema(), other.packetsRetransmitted);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.packetsFailedEncryption)) {
        this.packetsFailedEncryption = data().deepCopy(fields()[30].schema(), other.packetsFailedEncryption);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[31].schema(), other.packetsDuplicated);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[32].schema(), other.fecPacketsSent);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[33].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[34].schema(), other.bytesSent);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.rtcpSrSent)) {
        this.rtcpSrSent = data().deepCopy(fields()[35].schema(), other.rtcpSrSent);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.rtcpRrReceived)) {
        this.rtcpRrReceived = data().deepCopy(fields()[36].schema(), other.rtcpRrReceived);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.rtxPacketsSent)) {
        this.rtxPacketsSent = data().deepCopy(fields()[37].schema(), other.rtxPacketsSent);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[38].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[39].schema(), other.framesSent);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[40].schema(), other.framesEncoded);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[41].schema(), other.keyFramesEncoded);
        fieldSetFlags()[41] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The service id the report belongs to
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }


    /**
      * Sets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[2], value);
      this.sfuId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The provided unique identifier of the SFU
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }


    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setMarker(java.lang.String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }


    /**
      * Sets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setTransportId(java.lang.String value) {
      validate(fields()[5], value);
      this.transportId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * The id of the transport the RTP stream uses.
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuStreamId' field.
      * Unique identifier of the Sfu stream the event is related to
      * @return The value.
      */
    public java.lang.String getSfuStreamId() {
      return sfuStreamId;
    }


    /**
      * Sets the value of the 'sfuStreamId' field.
      * Unique identifier of the Sfu stream the event is related to
      * @param value The value of 'sfuStreamId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSfuStreamId(java.lang.String value) {
      validate(fields()[6], value);
      this.sfuStreamId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuStreamId' field has been set.
      * Unique identifier of the Sfu stream the event is related to
      * @return True if the 'sfuStreamId' field has been set, false otherwise.
      */
    public boolean hasSfuStreamId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sfuStreamId' field.
      * Unique identifier of the Sfu stream the event is related to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSfuStreamId() {
      sfuStreamId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuSinkId' field.
      * Unique identifier of the Sfu sink the event is related to
      * @return The value.
      */
    public java.lang.String getSfuSinkId() {
      return sfuSinkId;
    }


    /**
      * Sets the value of the 'sfuSinkId' field.
      * Unique identifier of the Sfu sink the event is related to
      * @param value The value of 'sfuSinkId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSfuSinkId(java.lang.String value) {
      validate(fields()[7], value);
      this.sfuSinkId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuSinkId' field has been set.
      * Unique identifier of the Sfu sink the event is related to
      * @return True if the 'sfuSinkId' field has been set, false otherwise.
      */
    public boolean hasSfuSinkId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sfuSinkId' field.
      * Unique identifier of the Sfu sink the event is related to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSfuSinkId() {
      sfuSinkId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpPadId' field.
      * The id of RTP pad.
      * @return The value.
      */
    public java.lang.String getRtpPadId() {
      return rtpPadId;
    }


    /**
      * Sets the value of the 'rtpPadId' field.
      * The id of RTP pad.
      * @param value The value of 'rtpPadId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtpPadId(java.lang.String value) {
      validate(fields()[8], value);
      this.rtpPadId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpPadId' field has been set.
      * The id of RTP pad.
      * @return True if the 'rtpPadId' field has been set, false otherwise.
      */
    public boolean hasRtpPadId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'rtpPadId' field.
      * The id of RTP pad.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtpPadId() {
      rtpPadId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @return The value.
      */
    public long getSsrc() {
      return ssrc;
    }


    /**
      * Sets the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSsrc(long value) {
      validate(fields()[9], value);
      this.ssrc = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The synchronization source id of the RTP stream
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSsrc() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The callId the event belongs to
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }


    /**
      * Sets the value of the 'callId' field.
      * The callId the event belongs to
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setCallId(java.lang.String value) {
      validate(fields()[10], value);
      this.callId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The callId the event belongs to
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'callId' field.
      * The callId the event belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setClientId(java.lang.String value) {
      validate(fields()[11], value);
      this.clientId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[12], value);
      this.trackId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track the RTP stream related to at the client side
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @return The value.
      */
    public java.lang.String getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setMediaType(java.lang.String value) {
      validate(fields()[13], value);
      this.mediaType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * the type of the media the stream carries ("audio" or "video")
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }


    /**
      * Sets the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[14], value);
      this.payloadType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The payload type field of the RTP header
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }


    /**
      * Sets the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[15], value);
      this.mimeType = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * The negotiated mimeType in the SDP
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }


    /**
      * Sets the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[16], value);
      this.clockRate = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The clock rate of the media source the RTP header carries
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }


    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[17], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @return The value.
      */
    public java.lang.String getRid() {
      return rid;
    }


    /**
      * Sets the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @param value The value of 'rid'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRid(java.lang.String value) {
      validate(fields()[18], value);
      this.rid = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'rid' field has been set.
      *  The rid parameter of the corresponded RTP stream
      * @return True if the 'rid' field has been set, false otherwise.
      */
    public boolean hasRid() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRid() {
      rid = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return The value.
      */
    public java.lang.Long getRtxSsrc() {
      return rtxSsrc;
    }


    /**
      * Sets the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @param value The value of 'rtxSsrc'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtxSsrc(java.lang.Long value) {
      validate(fields()[19], value);
      this.rtxSsrc = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxSsrc' field has been set.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return True if the 'rtxSsrc' field has been set, false otherwise.
      */
    public boolean hasRtxSsrc() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtxSsrc() {
      rtxSsrc = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @return The value.
      */
    public java.lang.Long getTargetBitrate() {
      return targetBitrate;
    }


    /**
      * Sets the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @param value The value of 'targetBitrate'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setTargetBitrate(java.lang.Long value) {
      validate(fields()[20], value);
      this.targetBitrate = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'targetBitrate' field has been set.
      * he bitrate the corresponded stream targets.
      * @return True if the 'targetBitrate' field has been set, false otherwise.
      */
    public boolean hasTargetBitrate() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearTargetBitrate() {
      targetBitrate = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return The value.
      */
    public java.lang.Boolean getVoiceActivityFlag() {
      return voiceActivityFlag;
    }


    /**
      * Sets the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @param value The value of 'voiceActivityFlag'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setVoiceActivityFlag(java.lang.Boolean value) {
      validate(fields()[21], value);
      this.voiceActivityFlag = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'voiceActivityFlag' field has been set.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return True if the 'voiceActivityFlag' field has been set, false otherwise.
      */
    public boolean hasVoiceActivityFlag() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearVoiceActivityFlag() {
      voiceActivityFlag = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }


    /**
      * Sets the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[22], value);
      this.firCount = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }


    /**
      * Sets the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[23], value);
      this.pliCount = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }


    /**
      * Sets the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[24], value);
      this.nackCount = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return The value.
      */
    public java.lang.Integer getSliCount() {
      return sliCount;
    }


    /**
      * Sets the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @param value The value of 'sliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setSliCount(java.lang.Integer value) {
      validate(fields()[25], value);
      this.sliCount = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'sliCount' field has been set.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return True if the 'sliCount' field has been set, false otherwise.
      */
    public boolean hasSliCount() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearSliCount() {
      sliCount = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }


    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[26], value);
      this.packetsLost = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of packets lost on the corresponded RTP stream.
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }


    /**
      * Sets the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded RTP stream.
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[27], value);
      this.packetsSent = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * The total number of packets sent on the corresponded RTP stream.
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * The total number of packets sent on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }


    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[28], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRetransmitted' field.
      * The total number of packets retransmitted on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsRetransmitted() {
      return packetsRetransmitted;
    }


    /**
      * Sets the value of the 'packetsRetransmitted' field.
      * The total number of packets retransmitted on the corresponded RTP stream.
      * @param value The value of 'packetsRetransmitted'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsRetransmitted(java.lang.Integer value) {
      validate(fields()[29], value);
      this.packetsRetransmitted = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRetransmitted' field has been set.
      * The total number of packets retransmitted on the corresponded RTP stream.
      * @return True if the 'packetsRetransmitted' field has been set, false otherwise.
      */
    public boolean hasPacketsRetransmitted() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'packetsRetransmitted' field.
      * The total number of packets retransmitted on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsRetransmitted() {
      packetsRetransmitted = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsFailedEncryption' field.
      * The total number of packets failed to be encrypted on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsFailedEncryption() {
      return packetsFailedEncryption;
    }


    /**
      * Sets the value of the 'packetsFailedEncryption' field.
      * The total number of packets failed to be encrypted on the corresponded RTP stream.
      * @param value The value of 'packetsFailedEncryption'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsFailedEncryption(java.lang.Integer value) {
      validate(fields()[30], value);
      this.packetsFailedEncryption = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsFailedEncryption' field has been set.
      * The total number of packets failed to be encrypted on the corresponded RTP stream.
      * @return True if the 'packetsFailedEncryption' field has been set, false otherwise.
      */
    public boolean hasPacketsFailedEncryption() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'packetsFailedEncryption' field.
      * The total number of packets failed to be encrypted on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsFailedEncryption() {
      packetsFailedEncryption = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsDuplicated() {
      return packetsDuplicated;
    }


    /**
      * Sets the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @param value The value of 'packetsDuplicated'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setPacketsDuplicated(java.lang.Integer value) {
      validate(fields()[31], value);
      this.packetsDuplicated = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDuplicated' field has been set.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return True if the 'packetsDuplicated' field has been set, false otherwise.
      */
    public boolean hasPacketsDuplicated() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearPacketsDuplicated() {
      packetsDuplicated = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsSent' field.
      * The total number of FEC packets sent on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsSent() {
      return fecPacketsSent;
    }


    /**
      * Sets the value of the 'fecPacketsSent' field.
      * The total number of FEC packets sent on the corresponded RTP stream.
      * @param value The value of 'fecPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setFecPacketsSent(java.lang.Integer value) {
      validate(fields()[32], value);
      this.fecPacketsSent = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsSent' field has been set.
      * The total number of FEC packets sent on the corresponded RTP stream.
      * @return True if the 'fecPacketsSent' field has been set, false otherwise.
      */
    public boolean hasFecPacketsSent() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'fecPacketsSent' field.
      * The total number of FEC packets sent on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearFecPacketsSent() {
      fecPacketsSent = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }


    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setFecPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[33], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * The total amount of payload bytes sent on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * The total amount of payload bytes sent on the corresponded RTP stream.
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[34], value);
      this.bytesSent = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * The total amount of payload bytes sent on the corresponded RTP stream.
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * The total amount of payload bytes sent on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtcpSrSent' field.
      * The total number of SR reports sent by the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getRtcpSrSent() {
      return rtcpSrSent;
    }


    /**
      * Sets the value of the 'rtcpSrSent' field.
      * The total number of SR reports sent by the corresponded RTP stream
      * @param value The value of 'rtcpSrSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtcpSrSent(java.lang.Integer value) {
      validate(fields()[35], value);
      this.rtcpSrSent = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'rtcpSrSent' field has been set.
      * The total number of SR reports sent by the corresponded RTP stream
      * @return True if the 'rtcpSrSent' field has been set, false otherwise.
      */
    public boolean hasRtcpSrSent() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'rtcpSrSent' field.
      * The total number of SR reports sent by the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtcpSrSent() {
      rtcpSrSent = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtcpRrReceived' field.
      * The total number of RR reports received on the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getRtcpRrReceived() {
      return rtcpRrReceived;
    }


    /**
      * Sets the value of the 'rtcpRrReceived' field.
      * The total number of RR reports received on the corresponded RTP stream
      * @param value The value of 'rtcpRrReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtcpRrReceived(java.lang.Integer value) {
      validate(fields()[36], value);
      this.rtcpRrReceived = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'rtcpRrReceived' field has been set.
      * The total number of RR reports received on the corresponded RTP stream
      * @return True if the 'rtcpRrReceived' field has been set, false otherwise.
      */
    public boolean hasRtcpRrReceived() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'rtcpRrReceived' field.
      * The total number of RR reports received on the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtcpRrReceived() {
      rtcpRrReceived = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsSent' field.
      * If rtx packets sent on the same stream then this number indicates how may has been sent
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsSent() {
      return rtxPacketsSent;
    }


    /**
      * Sets the value of the 'rtxPacketsSent' field.
      * If rtx packets sent on the same stream then this number indicates how may has been sent
      * @param value The value of 'rtxPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtxPacketsSent(java.lang.Integer value) {
      validate(fields()[37], value);
      this.rtxPacketsSent = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsSent' field has been set.
      * If rtx packets sent on the same stream then this number indicates how may has been sent
      * @return True if the 'rtxPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsSent() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'rtxPacketsSent' field.
      * If rtx packets sent on the same stream then this number indicates how may has been sent
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtxPacketsSent() {
      rtxPacketsSent = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsDiscarded() {
      return rtxPacketsDiscarded;
    }


    /**
      * Sets the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @param value The value of 'rtxPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setRtxPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[38], value);
      this.rtxPacketsDiscarded = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsDiscarded' field has been set.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return True if the 'rtxPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsDiscarded() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearRtxPacketsDiscarded() {
      rtxPacketsDiscarded = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesSent' field.
      * The number of frames sent on the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getFramesSent() {
      return framesSent;
    }


    /**
      * Sets the value of the 'framesSent' field.
      * The number of frames sent on the corresponded RTP stream
      * @param value The value of 'framesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setFramesSent(java.lang.Integer value) {
      validate(fields()[39], value);
      this.framesSent = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'framesSent' field has been set.
      * The number of frames sent on the corresponded RTP stream
      * @return True if the 'framesSent' field has been set, false otherwise.
      */
    public boolean hasFramesSent() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'framesSent' field.
      * The number of frames sent on the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearFramesSent() {
      framesSent = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesEncoded' field.
      * Indicate the number of frames the Sfu has been encoded
      * @return The value.
      */
    public java.lang.Integer getFramesEncoded() {
      return framesEncoded;
    }


    /**
      * Sets the value of the 'framesEncoded' field.
      * Indicate the number of frames the Sfu has been encoded
      * @param value The value of 'framesEncoded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setFramesEncoded(java.lang.Integer value) {
      validate(fields()[40], value);
      this.framesEncoded = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'framesEncoded' field has been set.
      * Indicate the number of frames the Sfu has been encoded
      * @return True if the 'framesEncoded' field has been set, false otherwise.
      */
    public boolean hasFramesEncoded() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'framesEncoded' field.
      * Indicate the number of frames the Sfu has been encoded
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearFramesEncoded() {
      framesEncoded = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesEncoded' field.
      * Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getKeyFramesEncoded() {
      return keyFramesEncoded;
    }


    /**
      * Sets the value of the 'keyFramesEncoded' field.
      * Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
      * @param value The value of 'keyFramesEncoded'.
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder setKeyFramesEncoded(java.lang.Integer value) {
      validate(fields()[41], value);
      this.keyFramesEncoded = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesEncoded' field has been set.
      * Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
      * @return True if the 'keyFramesEncoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesEncoded() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'keyFramesEncoded' field.
      * Indicate the number of keyframes the Sfu has been encoded on the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.reports.SfuOutboundRtpPadReport.Builder clearKeyFramesEncoded() {
      keyFramesEncoded = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SfuOutboundRtpPadReport build() {
      try {
        SfuOutboundRtpPadReport record = new SfuOutboundRtpPadReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.sfuId = fieldSetFlags()[2] ? this.sfuId : (java.lang.String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (java.lang.String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.transportId = fieldSetFlags()[5] ? this.transportId : (java.lang.String) defaultValue(fields()[5]);
        record.sfuStreamId = fieldSetFlags()[6] ? this.sfuStreamId : (java.lang.String) defaultValue(fields()[6]);
        record.sfuSinkId = fieldSetFlags()[7] ? this.sfuSinkId : (java.lang.String) defaultValue(fields()[7]);
        record.rtpPadId = fieldSetFlags()[8] ? this.rtpPadId : (java.lang.String) defaultValue(fields()[8]);
        record.ssrc = fieldSetFlags()[9] ? this.ssrc : (java.lang.Long) defaultValue(fields()[9]);
        record.callId = fieldSetFlags()[10] ? this.callId : (java.lang.String) defaultValue(fields()[10]);
        record.clientId = fieldSetFlags()[11] ? this.clientId : (java.lang.String) defaultValue(fields()[11]);
        record.trackId = fieldSetFlags()[12] ? this.trackId : (java.lang.String) defaultValue(fields()[12]);
        record.mediaType = fieldSetFlags()[13] ? this.mediaType : (java.lang.String) defaultValue(fields()[13]);
        record.payloadType = fieldSetFlags()[14] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[14]);
        record.mimeType = fieldSetFlags()[15] ? this.mimeType : (java.lang.String) defaultValue(fields()[15]);
        record.clockRate = fieldSetFlags()[16] ? this.clockRate : (java.lang.Long) defaultValue(fields()[16]);
        record.sdpFmtpLine = fieldSetFlags()[17] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[17]);
        record.rid = fieldSetFlags()[18] ? this.rid : (java.lang.String) defaultValue(fields()[18]);
        record.rtxSsrc = fieldSetFlags()[19] ? this.rtxSsrc : (java.lang.Long) defaultValue(fields()[19]);
        record.targetBitrate = fieldSetFlags()[20] ? this.targetBitrate : (java.lang.Long) defaultValue(fields()[20]);
        record.voiceActivityFlag = fieldSetFlags()[21] ? this.voiceActivityFlag : (java.lang.Boolean) defaultValue(fields()[21]);
        record.firCount = fieldSetFlags()[22] ? this.firCount : (java.lang.Integer) defaultValue(fields()[22]);
        record.pliCount = fieldSetFlags()[23] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[23]);
        record.nackCount = fieldSetFlags()[24] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[24]);
        record.sliCount = fieldSetFlags()[25] ? this.sliCount : (java.lang.Integer) defaultValue(fields()[25]);
        record.packetsLost = fieldSetFlags()[26] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[26]);
        record.packetsSent = fieldSetFlags()[27] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[27]);
        record.packetsDiscarded = fieldSetFlags()[28] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[28]);
        record.packetsRetransmitted = fieldSetFlags()[29] ? this.packetsRetransmitted : (java.lang.Integer) defaultValue(fields()[29]);
        record.packetsFailedEncryption = fieldSetFlags()[30] ? this.packetsFailedEncryption : (java.lang.Integer) defaultValue(fields()[30]);
        record.packetsDuplicated = fieldSetFlags()[31] ? this.packetsDuplicated : (java.lang.Integer) defaultValue(fields()[31]);
        record.fecPacketsSent = fieldSetFlags()[32] ? this.fecPacketsSent : (java.lang.Integer) defaultValue(fields()[32]);
        record.fecPacketsDiscarded = fieldSetFlags()[33] ? this.fecPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[33]);
        record.bytesSent = fieldSetFlags()[34] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[34]);
        record.rtcpSrSent = fieldSetFlags()[35] ? this.rtcpSrSent : (java.lang.Integer) defaultValue(fields()[35]);
        record.rtcpRrReceived = fieldSetFlags()[36] ? this.rtcpRrReceived : (java.lang.Integer) defaultValue(fields()[36]);
        record.rtxPacketsSent = fieldSetFlags()[37] ? this.rtxPacketsSent : (java.lang.Integer) defaultValue(fields()[37]);
        record.rtxPacketsDiscarded = fieldSetFlags()[38] ? this.rtxPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[38]);
        record.framesSent = fieldSetFlags()[39] ? this.framesSent : (java.lang.Integer) defaultValue(fields()[39]);
        record.framesEncoded = fieldSetFlags()[40] ? this.framesEncoded : (java.lang.Integer) defaultValue(fields()[40]);
        record.keyFramesEncoded = fieldSetFlags()[41] ? this.keyFramesEncoded : (java.lang.Integer) defaultValue(fields()[41]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SfuOutboundRtpPadReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<SfuOutboundRtpPadReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SfuOutboundRtpPadReport>
    READER$ = (org.apache.avro.io.DatumReader<SfuOutboundRtpPadReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.serviceId);

    out.writeString(this.mediaUnitId);

    out.writeString(this.sfuId);

    if (this.marker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marker);
    }

    out.writeLong(this.timestamp);

    out.writeString(this.transportId);

    out.writeString(this.sfuStreamId);

    out.writeString(this.sfuSinkId);

    out.writeString(this.rtpPadId);

    out.writeLong(this.ssrc);

    if (this.callId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callId);
    }

    if (this.clientId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.clientId);
    }

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

    if (this.mediaType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaType);
    }

    if (this.payloadType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.payloadType);
    }

    if (this.mimeType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mimeType);
    }

    if (this.clockRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.clockRate);
    }

    if (this.sdpFmtpLine == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sdpFmtpLine);
    }

    if (this.rid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.rid);
    }

    if (this.rtxSsrc == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.rtxSsrc);
    }

    if (this.targetBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.targetBitrate);
    }

    if (this.voiceActivityFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.voiceActivityFlag);
    }

    if (this.firCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.firCount);
    }

    if (this.pliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pliCount);
    }

    if (this.nackCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nackCount);
    }

    if (this.sliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sliCount);
    }

    if (this.packetsLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsLost);
    }

    if (this.packetsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsSent);
    }

    if (this.packetsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDiscarded);
    }

    if (this.packetsRetransmitted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsRetransmitted);
    }

    if (this.packetsFailedEncryption == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsFailedEncryption);
    }

    if (this.packetsDuplicated == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDuplicated);
    }

    if (this.fecPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsSent);
    }

    if (this.fecPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsDiscarded);
    }

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.rtcpSrSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtcpSrSent);
    }

    if (this.rtcpRrReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtcpRrReceived);
    }

    if (this.rtxPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtxPacketsSent);
    }

    if (this.rtxPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtxPacketsDiscarded);
    }

    if (this.framesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesSent);
    }

    if (this.framesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesEncoded);
    }

    if (this.keyFramesEncoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.keyFramesEncoded);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.serviceId = in.readString();

      this.mediaUnitId = in.readString();

      this.sfuId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.marker = null;
      } else {
        this.marker = in.readString();
      }

      this.timestamp = in.readLong();

      this.transportId = in.readString();

      this.sfuStreamId = in.readString();

      this.sfuSinkId = in.readString();

      this.rtpPadId = in.readString();

      this.ssrc = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.callId = null;
      } else {
        this.callId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clientId = null;
      } else {
        this.clientId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaType = null;
      } else {
        this.mediaType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payloadType = null;
      } else {
        this.payloadType = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mimeType = null;
      } else {
        this.mimeType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clockRate = null;
      } else {
        this.clockRate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sdpFmtpLine = null;
      } else {
        this.sdpFmtpLine = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rid = null;
      } else {
        this.rid = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxSsrc = null;
      } else {
        this.rtxSsrc = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.targetBitrate = null;
      } else {
        this.targetBitrate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.voiceActivityFlag = null;
      } else {
        this.voiceActivityFlag = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firCount = null;
      } else {
        this.firCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pliCount = null;
      } else {
        this.pliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nackCount = null;
      } else {
        this.nackCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sliCount = null;
      } else {
        this.sliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsLost = null;
      } else {
        this.packetsLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsSent = null;
      } else {
        this.packetsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDiscarded = null;
      } else {
        this.packetsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsRetransmitted = null;
      } else {
        this.packetsRetransmitted = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsFailedEncryption = null;
      } else {
        this.packetsFailedEncryption = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDuplicated = null;
      } else {
        this.packetsDuplicated = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsSent = null;
      } else {
        this.fecPacketsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsDiscarded = null;
      } else {
        this.fecPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtcpSrSent = null;
      } else {
        this.rtcpSrSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtcpRrReceived = null;
      } else {
        this.rtcpRrReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxPacketsSent = null;
      } else {
        this.rtxPacketsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxPacketsDiscarded = null;
      } else {
        this.rtxPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesSent = null;
      } else {
        this.framesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesEncoded = null;
      } else {
        this.framesEncoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyFramesEncoded = null;
      } else {
        this.keyFramesEncoded = in.readInt();
      }

    } else {
      for (int i = 0; i < 42; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.serviceId = in.readString();
          break;

        case 1:
          this.mediaUnitId = in.readString();
          break;

        case 2:
          this.sfuId = in.readString();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marker = null;
          } else {
            this.marker = in.readString();
          }
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          this.transportId = in.readString();
          break;

        case 6:
          this.sfuStreamId = in.readString();
          break;

        case 7:
          this.sfuSinkId = in.readString();
          break;

        case 8:
          this.rtpPadId = in.readString();
          break;

        case 9:
          this.ssrc = in.readLong();
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callId = null;
          } else {
            this.callId = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clientId = null;
          } else {
            this.clientId = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaType = null;
          } else {
            this.mediaType = in.readString();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payloadType = null;
          } else {
            this.payloadType = in.readInt();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mimeType = null;
          } else {
            this.mimeType = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clockRate = null;
          } else {
            this.clockRate = in.readLong();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sdpFmtpLine = null;
          } else {
            this.sdpFmtpLine = in.readString();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rid = null;
          } else {
            this.rid = in.readString();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxSsrc = null;
          } else {
            this.rtxSsrc = in.readLong();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.targetBitrate = null;
          } else {
            this.targetBitrate = in.readLong();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.voiceActivityFlag = null;
          } else {
            this.voiceActivityFlag = in.readBoolean();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firCount = null;
          } else {
            this.firCount = in.readInt();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pliCount = null;
          } else {
            this.pliCount = in.readInt();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nackCount = null;
          } else {
            this.nackCount = in.readInt();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sliCount = null;
          } else {
            this.sliCount = in.readInt();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsLost = null;
          } else {
            this.packetsLost = in.readInt();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsSent = null;
          } else {
            this.packetsSent = in.readInt();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDiscarded = null;
          } else {
            this.packetsDiscarded = in.readInt();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsRetransmitted = null;
          } else {
            this.packetsRetransmitted = in.readInt();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsFailedEncryption = null;
          } else {
            this.packetsFailedEncryption = in.readInt();
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDuplicated = null;
          } else {
            this.packetsDuplicated = in.readInt();
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsSent = null;
          } else {
            this.fecPacketsSent = in.readInt();
          }
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsDiscarded = null;
          } else {
            this.fecPacketsDiscarded = in.readInt();
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 35:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtcpSrSent = null;
          } else {
            this.rtcpSrSent = in.readInt();
          }
          break;

        case 36:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtcpRrReceived = null;
          } else {
            this.rtcpRrReceived = in.readInt();
          }
          break;

        case 37:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxPacketsSent = null;
          } else {
            this.rtxPacketsSent = in.readInt();
          }
          break;

        case 38:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxPacketsDiscarded = null;
          } else {
            this.rtxPacketsDiscarded = in.readInt();
          }
          break;

        case 39:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesSent = null;
          } else {
            this.framesSent = in.readInt();
          }
          break;

        case 40:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesEncoded = null;
          } else {
            this.framesEncoded = in.readInt();
          }
          break;

        case 41:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyFramesEncoded = null;
          } else {
            this.keyFramesEncoded = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










