/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A report created for observer generated events */
@org.apache.avro.specific.AvroGenerated
public class ObserverEventReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 260284003382657590L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObserverEventReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A report created for observer generated events\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The media unit id the report belongs to\",\"default\":null},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the client\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The unique identifier of the peer connection\",\"default\":null},{\"name\":\"sampleTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"The timestamp of the sample the event related to\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":[\"null\",\"int\"],\"doc\":\"The sequence number of the sample the event may related to\",\"default\":null},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the event\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the human readable message of the event\",\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the value of the event\",\"default\":null},{\"name\":\"attachments\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"attachment the event may created with\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** webrtc app provided user identifier */
   private java.lang.String userId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The timestamp of the sample the event related to */
   private java.lang.Long sampleTimestamp;
  /** The sequence number of the sample the event may related to */
   private java.lang.Integer sampleSeq;
  /** The name of the event */
   private java.lang.String name;
  /** the human readable message of the event */
   private java.lang.String message;
  /** the value of the event */
   private java.lang.String value;
  /** attachment the event may created with */
   private java.lang.String attachments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObserverEventReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param sampleTimestamp The timestamp of the sample the event related to
   * @param sampleSeq The sequence number of the sample the event may related to
   * @param name The name of the event
   * @param message the human readable message of the event
   * @param value the value of the event
   * @param attachments attachment the event may created with
   */
  public ObserverEventReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.Long sampleTimestamp, java.lang.Integer sampleSeq, java.lang.String name, java.lang.String message, java.lang.String value, java.lang.String attachments) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.sampleTimestamp = sampleTimestamp;
    this.sampleSeq = sampleSeq;
    this.name = name;
    this.message = message;
    this.value = value;
    this.attachments = attachments;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return sampleTimestamp;
    case 10: return sampleSeq;
    case 11: return name;
    case 12: return message;
    case 13: return value;
    case 14: return attachments;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = (java.lang.String)value$; break;
    case 5: roomId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: userId = (java.lang.String)value$; break;
    case 8: peerConnectionId = (java.lang.String)value$; break;
    case 9: sampleTimestamp = (java.lang.Long)value$; break;
    case 10: sampleSeq = (java.lang.Integer)value$; break;
    case 11: name = (java.lang.String)value$; break;
    case 12: message = (java.lang.String)value$; break;
    case 13: value = (java.lang.String)value$; break;
    case 14: attachments = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'sampleTimestamp' field.
   * @return The timestamp of the sample the event related to
   */
  public java.lang.Long getSampleTimestamp() {
    return sampleTimestamp;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the event may related to
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The name of the event
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'message' field.
   * @return the human readable message of the event
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Gets the value of the 'value' field.
   * @return the value of the event
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Gets the value of the 'attachments' field.
   * @return attachment the event may created with
   */
  public java.lang.String getAttachments() {
    return attachments;
  }


  /**
   * Creates a new ObserverEventReport RecordBuilder.
   * @return A new ObserverEventReport RecordBuilder
   */
  public static ObserverEventReport.Builder newBuilder() {
    return new ObserverEventReport.Builder();
  }

  /**
   * Creates a new ObserverEventReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObserverEventReport RecordBuilder
   */
  public static ObserverEventReport.Builder newBuilder(ObserverEventReport.Builder other) {
    return new ObserverEventReport.Builder(other);
  }

  /**
   * Creates a new ObserverEventReport RecordBuilder by copying an existing ObserverEventReport instance.
   * @param other The existing instance to copy.
   * @return A new ObserverEventReport RecordBuilder
   */
  public static ObserverEventReport.Builder newBuilder(ObserverEventReport other) {
    return new ObserverEventReport.Builder(other);
  }

  /**
   * RecordBuilder for ObserverEventReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObserverEventReport>
    implements org.apache.avro.data.RecordBuilder<ObserverEventReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The timestamp of the sample the event related to */
    private java.lang.Long sampleTimestamp;
    /** The sequence number of the sample the event may related to */
    private java.lang.Integer sampleSeq;
    /** The name of the event */
    private java.lang.String name;
    /** the human readable message of the event */
    private java.lang.String message;
    /** the value of the event */
    private java.lang.String value;
    /** attachment the event may created with */
    private java.lang.String attachments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ObserverEventReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sampleTimestamp)) {
        this.sampleTimestamp = data().deepCopy(fields()[9].schema(), other.sampleTimestamp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.name)) {
        this.name = data().deepCopy(fields()[11].schema(), other.name);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.message)) {
        this.message = data().deepCopy(fields()[12].schema(), other.message);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.value)) {
        this.value = data().deepCopy(fields()[13].schema(), other.value);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.attachments)) {
        this.attachments = data().deepCopy(fields()[14].schema(), other.attachments);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ObserverEventReport instance
     * @param other The existing instance to copy.
     */
    private Builder(ObserverEventReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sampleTimestamp)) {
        this.sampleTimestamp = data().deepCopy(fields()[9].schema(), other.sampleTimestamp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.name)) {
        this.name = data().deepCopy(fields()[11].schema(), other.name);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.message)) {
        this.message = data().deepCopy(fields()[12].schema(), other.message);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.value)) {
        this.value = data().deepCopy(fields()[13].schema(), other.value);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.attachments)) {
        this.attachments = data().deepCopy(fields()[14].schema(), other.attachments);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public ObserverEventReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public ObserverEventReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public ObserverEventReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public ObserverEventReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public ObserverEventReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public ObserverEventReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public ObserverEventReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public ObserverEventReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public ObserverEventReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @return The value.
      */
    public java.lang.Long getSampleTimestamp() {
      return sampleTimestamp;
    }

    /**
      * Sets the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @param value The value of 'sampleTimestamp'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setSampleTimestamp(java.lang.Long value) {
      validate(fields()[9], value);
      this.sampleTimestamp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleTimestamp' field has been set.
      * The timestamp of the sample the event related to
      * @return True if the 'sampleTimestamp' field has been set, false otherwise.
      */
    public boolean hasSampleTimestamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'sampleTimestamp' field.
      * The timestamp of the sample the event related to
      * @return This builder.
      */
    public ObserverEventReport.Builder clearSampleTimestamp() {
      sampleTimestamp = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setSampleSeq(java.lang.Integer value) {
      validate(fields()[10], value);
      this.sampleSeq = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the event may related to
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return This builder.
      */
    public ObserverEventReport.Builder clearSampleSeq() {
      sampleSeq = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The name of the event
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * The name of the event
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setName(java.lang.String value) {
      validate(fields()[11], value);
      this.name = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The name of the event
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'name' field.
      * The name of the event
      * @return This builder.
      */
    public ObserverEventReport.Builder clearName() {
      name = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * the human readable message of the event
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * the human readable message of the event
      * @param value The value of 'message'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setMessage(java.lang.String value) {
      validate(fields()[12], value);
      this.message = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * the human readable message of the event
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'message' field.
      * the human readable message of the event
      * @return This builder.
      */
    public ObserverEventReport.Builder clearMessage() {
      message = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * the value of the event
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * the value of the event
      * @param value The value of 'value'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setValue(java.lang.String value) {
      validate(fields()[13], value);
      this.value = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * the value of the event
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'value' field.
      * the value of the event
      * @return This builder.
      */
    public ObserverEventReport.Builder clearValue() {
      value = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'attachments' field.
      * attachment the event may created with
      * @return The value.
      */
    public java.lang.String getAttachments() {
      return attachments;
    }

    /**
      * Sets the value of the 'attachments' field.
      * attachment the event may created with
      * @param value The value of 'attachments'.
      * @return This builder.
      */
    public ObserverEventReport.Builder setAttachments(java.lang.String value) {
      validate(fields()[14], value);
      this.attachments = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'attachments' field has been set.
      * attachment the event may created with
      * @return True if the 'attachments' field has been set, false otherwise.
      */
    public boolean hasAttachments() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'attachments' field.
      * attachment the event may created with
      * @return This builder.
      */
    public ObserverEventReport.Builder clearAttachments() {
      attachments = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    public ObserverEventReport build() {
      try {
        ObserverEventReport record = new ObserverEventReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.sampleTimestamp = fieldSetFlags()[9] ? this.sampleTimestamp : (java.lang.Long) defaultValue(fields()[9]);
        record.sampleSeq = fieldSetFlags()[10] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[10]);
        record.name = fieldSetFlags()[11] ? this.name : (java.lang.String) defaultValue(fields()[11]);
        record.message = fieldSetFlags()[12] ? this.message : (java.lang.String) defaultValue(fields()[12]);
        record.value = fieldSetFlags()[13] ? this.value : (java.lang.String) defaultValue(fields()[13]);
        record.attachments = fieldSetFlags()[14] ? this.attachments : (java.lang.String) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
