/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for PeerConnection Data Channel. */
@org.apache.avro.specific.AvroGenerated
public class ClientDataChannelReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3251917471686801100L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientDataChannelReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for PeerConnection Data Channel.\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"peerConnectionLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label for the peer connection\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The label of the data channel\",\"default\":null},{\"name\":\"protocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used for the data channel\",\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The state of the data channel\",\"default\":null},{\"name\":\"messagesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of API message events sent\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the total number of payload bytes sent on the corresponded data channel\",\"default\":null},{\"name\":\"messagesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of API message events received on the corresponded data channel\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the total number of payload bytes received on the corresponded data channel\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** webrtc app provided user identifier */
   private java.lang.String userId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The webrtc app provided label for the peer connection */
   private java.lang.String peerConnectionLabel;
  /** The sequence number of the sample the report is generated from */
   private int sampleSeq;
  /** The label of the data channel */
   private java.lang.String label;
  /** The protocol used for the data channel */
   private java.lang.String protocol;
  /** The state of the data channel */
   private java.lang.String state;
  /** Represents the total number of API message events sent */
   private java.lang.Integer messagesSent;
  /** Represents the total number of payload bytes sent on the corresponded data channel */
   private java.lang.Long bytesSent;
  /** Represents the total number of API message events received on the corresponded data channel */
   private java.lang.Integer messagesReceived;
  /** Represents the total number of payload bytes received on the corresponded data channel */
   private java.lang.Long bytesReceived;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientDataChannelReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param peerConnectionLabel The webrtc app provided label for the peer connection
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param label The label of the data channel
   * @param protocol The protocol used for the data channel
   * @param state The state of the data channel
   * @param messagesSent Represents the total number of API message events sent
   * @param bytesSent Represents the total number of payload bytes sent on the corresponded data channel
   * @param messagesReceived Represents the total number of API message events received on the corresponded data channel
   * @param bytesReceived Represents the total number of payload bytes received on the corresponded data channel
   */
  public ClientDataChannelReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String peerConnectionLabel, java.lang.Integer sampleSeq, java.lang.String label, java.lang.String protocol, java.lang.String state, java.lang.Integer messagesSent, java.lang.Long bytesSent, java.lang.Integer messagesReceived, java.lang.Long bytesReceived) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.peerConnectionLabel = peerConnectionLabel;
    this.sampleSeq = sampleSeq;
    this.label = label;
    this.protocol = protocol;
    this.state = state;
    this.messagesSent = messagesSent;
    this.bytesSent = bytesSent;
    this.messagesReceived = messagesReceived;
    this.bytesReceived = bytesReceived;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return peerConnectionLabel;
    case 10: return sampleSeq;
    case 11: return label;
    case 12: return protocol;
    case 13: return state;
    case 14: return messagesSent;
    case 15: return bytesSent;
    case 16: return messagesReceived;
    case 17: return bytesReceived;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = (java.lang.String)value$; break;
    case 5: roomId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: userId = (java.lang.String)value$; break;
    case 8: peerConnectionId = (java.lang.String)value$; break;
    case 9: peerConnectionLabel = (java.lang.String)value$; break;
    case 10: sampleSeq = (java.lang.Integer)value$; break;
    case 11: label = (java.lang.String)value$; break;
    case 12: protocol = (java.lang.String)value$; break;
    case 13: state = (java.lang.String)value$; break;
    case 14: messagesSent = (java.lang.Integer)value$; break;
    case 15: bytesSent = (java.lang.Long)value$; break;
    case 16: messagesReceived = (java.lang.Integer)value$; break;
    case 17: bytesReceived = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'peerConnectionLabel' field.
   * @return The webrtc app provided label for the peer connection
   */
  public java.lang.String getPeerConnectionLabel() {
    return peerConnectionLabel;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The label of the data channel
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'protocol' field.
   * @return The protocol used for the data channel
   */
  public java.lang.String getProtocol() {
    return protocol;
  }


  /**
   * Gets the value of the 'state' field.
   * @return The state of the data channel
   */
  public java.lang.String getState() {
    return state;
  }


  /**
   * Gets the value of the 'messagesSent' field.
   * @return Represents the total number of API message events sent
   */
  public java.lang.Integer getMessagesSent() {
    return messagesSent;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return Represents the total number of payload bytes sent on the corresponded data channel
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'messagesReceived' field.
   * @return Represents the total number of API message events received on the corresponded data channel
   */
  public java.lang.Integer getMessagesReceived() {
    return messagesReceived;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Represents the total number of payload bytes received on the corresponded data channel
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Creates a new ClientDataChannelReport RecordBuilder.
   * @return A new ClientDataChannelReport RecordBuilder
   */
  public static ClientDataChannelReport.Builder newBuilder() {
    return new ClientDataChannelReport.Builder();
  }

  /**
   * Creates a new ClientDataChannelReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientDataChannelReport RecordBuilder
   */
  public static ClientDataChannelReport.Builder newBuilder(ClientDataChannelReport.Builder other) {
    return new ClientDataChannelReport.Builder(other);
  }

  /**
   * Creates a new ClientDataChannelReport RecordBuilder by copying an existing ClientDataChannelReport instance.
   * @param other The existing instance to copy.
   * @return A new ClientDataChannelReport RecordBuilder
   */
  public static ClientDataChannelReport.Builder newBuilder(ClientDataChannelReport other) {
    return new ClientDataChannelReport.Builder(other);
  }

  /**
   * RecordBuilder for ClientDataChannelReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientDataChannelReport>
    implements org.apache.avro.data.RecordBuilder<ClientDataChannelReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label for the peer connection */
    private java.lang.String peerConnectionLabel;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The label of the data channel */
    private java.lang.String label;
    /** The protocol used for the data channel */
    private java.lang.String protocol;
    /** The state of the data channel */
    private java.lang.String state;
    /** Represents the total number of API message events sent */
    private java.lang.Integer messagesSent;
    /** Represents the total number of payload bytes sent on the corresponded data channel */
    private java.lang.Long bytesSent;
    /** Represents the total number of API message events received on the corresponded data channel */
    private java.lang.Integer messagesReceived;
    /** Represents the total number of payload bytes received on the corresponded data channel */
    private java.lang.Long bytesReceived;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ClientDataChannelReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionLabel)) {
        this.peerConnectionLabel = data().deepCopy(fields()[9].schema(), other.peerConnectionLabel);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.label)) {
        this.label = data().deepCopy(fields()[11].schema(), other.label);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.state)) {
        this.state = data().deepCopy(fields()[13].schema(), other.state);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.messagesSent)) {
        this.messagesSent = data().deepCopy(fields()[14].schema(), other.messagesSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.messagesReceived)) {
        this.messagesReceived = data().deepCopy(fields()[16].schema(), other.messagesReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[17].schema(), other.bytesReceived);
        fieldSetFlags()[17] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClientDataChannelReport instance
     * @param other The existing instance to copy.
     */
    private Builder(ClientDataChannelReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionLabel)) {
        this.peerConnectionLabel = data().deepCopy(fields()[9].schema(), other.peerConnectionLabel);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.label)) {
        this.label = data().deepCopy(fields()[11].schema(), other.label);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.state)) {
        this.state = data().deepCopy(fields()[13].schema(), other.state);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.messagesSent)) {
        this.messagesSent = data().deepCopy(fields()[14].schema(), other.messagesSent);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[15].schema(), other.bytesSent);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.messagesReceived)) {
        this.messagesReceived = data().deepCopy(fields()[16].schema(), other.messagesReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[17].schema(), other.bytesReceived);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionLabel' field.
      * The webrtc app provided label for the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionLabel() {
      return peerConnectionLabel;
    }

    /**
      * Sets the value of the 'peerConnectionLabel' field.
      * The webrtc app provided label for the peer connection
      * @param value The value of 'peerConnectionLabel'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setPeerConnectionLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.peerConnectionLabel = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionLabel' field has been set.
      * The webrtc app provided label for the peer connection
      * @return True if the 'peerConnectionLabel' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'peerConnectionLabel' field.
      * The webrtc app provided label for the peer connection
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearPeerConnectionLabel() {
      peerConnectionLabel = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setSampleSeq(int value) {
      validate(fields()[10], value);
      this.sampleSeq = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearSampleSeq() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The label of the data channel
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The label of the data channel
      * @param value The value of 'label'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setLabel(java.lang.String value) {
      validate(fields()[11], value);
      this.label = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The label of the data channel
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'label' field.
      * The label of the data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * The protocol used for the data channel
      * @return The value.
      */
    public java.lang.String getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * The protocol used for the data channel
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setProtocol(java.lang.String value) {
      validate(fields()[12], value);
      this.protocol = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * The protocol used for the data channel
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'protocol' field.
      * The protocol used for the data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * The state of the data channel
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * The state of the data channel
      * @param value The value of 'state'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setState(java.lang.String value) {
      validate(fields()[13], value);
      this.state = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * The state of the data channel
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'state' field.
      * The state of the data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearState() {
      state = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'messagesSent' field.
      * Represents the total number of API message events sent
      * @return The value.
      */
    public java.lang.Integer getMessagesSent() {
      return messagesSent;
    }

    /**
      * Sets the value of the 'messagesSent' field.
      * Represents the total number of API message events sent
      * @param value The value of 'messagesSent'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setMessagesSent(java.lang.Integer value) {
      validate(fields()[14], value);
      this.messagesSent = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'messagesSent' field has been set.
      * Represents the total number of API message events sent
      * @return True if the 'messagesSent' field has been set, false otherwise.
      */
    public boolean hasMessagesSent() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'messagesSent' field.
      * Represents the total number of API message events sent
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearMessagesSent() {
      messagesSent = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Represents the total number of payload bytes sent on the corresponded data channel
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * Represents the total number of payload bytes sent on the corresponded data channel
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[15], value);
      this.bytesSent = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Represents the total number of payload bytes sent on the corresponded data channel
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Represents the total number of payload bytes sent on the corresponded data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'messagesReceived' field.
      * Represents the total number of API message events received on the corresponded data channel
      * @return The value.
      */
    public java.lang.Integer getMessagesReceived() {
      return messagesReceived;
    }

    /**
      * Sets the value of the 'messagesReceived' field.
      * Represents the total number of API message events received on the corresponded data channel
      * @param value The value of 'messagesReceived'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setMessagesReceived(java.lang.Integer value) {
      validate(fields()[16], value);
      this.messagesReceived = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'messagesReceived' field has been set.
      * Represents the total number of API message events received on the corresponded data channel
      * @return True if the 'messagesReceived' field has been set, false otherwise.
      */
    public boolean hasMessagesReceived() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'messagesReceived' field.
      * Represents the total number of API message events received on the corresponded data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearMessagesReceived() {
      messagesReceived = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Represents the total number of payload bytes received on the corresponded data channel
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * Represents the total number of payload bytes received on the corresponded data channel
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public ClientDataChannelReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[17], value);
      this.bytesReceived = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Represents the total number of payload bytes received on the corresponded data channel
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Represents the total number of payload bytes received on the corresponded data channel
      * @return This builder.
      */
    public ClientDataChannelReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    public ClientDataChannelReport build() {
      try {
        ClientDataChannelReport record = new ClientDataChannelReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.peerConnectionLabel = fieldSetFlags()[9] ? this.peerConnectionLabel : (java.lang.String) defaultValue(fields()[9]);
        record.sampleSeq = fieldSetFlags()[10] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[10]);
        record.label = fieldSetFlags()[11] ? this.label : (java.lang.String) defaultValue(fields()[11]);
        record.protocol = fieldSetFlags()[12] ? this.protocol : (java.lang.String) defaultValue(fields()[12]);
        record.state = fieldSetFlags()[13] ? this.state : (java.lang.String) defaultValue(fields()[13]);
        record.messagesSent = fieldSetFlags()[14] ? this.messagesSent : (java.lang.Integer) defaultValue(fields()[14]);
        record.bytesSent = fieldSetFlags()[15] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[15]);
        record.messagesReceived = fieldSetFlags()[16] ? this.messagesReceived : (java.lang.Integer) defaultValue(fields()[16]);
        record.bytesReceived = fieldSetFlags()[17] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[17]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
