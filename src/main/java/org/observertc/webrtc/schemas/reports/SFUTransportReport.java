/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for SFU Transport layer typically created to transfer RTP/SCTP/RTX streams to another client, SFU, MCU, or processing module. */
@org.apache.avro.specific.AvroGenerated
public class SFUTransportReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1421930689606957733L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SFUTransportReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for SFU Transport layer typically created to transfer RTP/SCTP/RTX streams to another client, SFU, MCU, or processing module.\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"sfuName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The provided name of the SFU\",\"default\":null},{\"name\":\"sfuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The provided unique identifier of the SFU\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the call\",\"default\":null},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"transportId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the transport\"},{\"name\":\"dtlsState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current value of the state attribute of the underlying RTCDtlsTransport.\",\"default\":null},{\"name\":\"iceState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current value of the state attribute of the underlying RTCIceTransport\",\"default\":null},{\"name\":\"sctpState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the the current value of the SCTP state of the transport of the SFU\",\"default\":null},{\"name\":\"iceRole\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current value of the role SFU takes place in ICE\",\"default\":null},{\"name\":\"localAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"localPort\",\"type\":[\"null\",\"int\"],\"doc\":\"The local port number\",\"default\":null},{\"name\":\"protocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used by the transport\",\"default\":null},{\"name\":\"remoteAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"remotePort\",\"type\":[\"null\",\"int\"],\"doc\":\"The remote port number\",\"default\":null},{\"name\":\"rtpBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of RTP bytes received on this transport\",\"default\":null},{\"name\":\"rtpBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of RTP bytes sent on this transport\",\"default\":null},{\"name\":\"rtpPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTP packets received on this transport\",\"default\":null},{\"name\":\"rtpPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTP packets sent on this transport\",\"default\":null},{\"name\":\"rtpPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTP packets lost on this transport\",\"default\":null},{\"name\":\"rtxBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of RTX bytes received on this transport\",\"default\":null},{\"name\":\"rtxBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of RTX bytes sent on this transport\",\"default\":null},{\"name\":\"rtxPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTX packets received on this transport\",\"default\":null},{\"name\":\"rtxPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTX packets sent on this transport\",\"default\":null},{\"name\":\"rtxPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTX packets lost on this transport\",\"default\":null},{\"name\":\"rtxPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of RTX packets discarded on this transport\",\"default\":null},{\"name\":\"sctpBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of SCTP bytes received on this transport\",\"default\":null},{\"name\":\"sctpBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of SCTP bytes sent on this transport\",\"default\":null},{\"name\":\"sctpPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of SCTP packets received on this transport\",\"default\":null},{\"name\":\"sctpPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total amount of SCTP packets sent on this transport\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The provided name of the SFU */
   private java.lang.String sfuName;
  /** The provided unique identifier of the SFU */
   private java.lang.String sfuId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the transport */
   private java.lang.String transportId;
  /** Represent the current value of the state attribute of the underlying RTCDtlsTransport. */
   private java.lang.String dtlsState;
  /** Represent the current value of the state attribute of the underlying RTCIceTransport */
   private java.lang.String iceState;
  /** Represents the the current value of the SCTP state of the transport of the SFU */
   private java.lang.String sctpState;
  /** Represent the current value of the role SFU takes place in ICE */
   private java.lang.String iceRole;
  /** The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN) */
   private java.lang.String localAddress;
  /** The local port number */
   private java.lang.Integer localPort;
  /** The protocol used by the transport */
   private java.lang.String protocol;
  /** The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN) */
   private java.lang.String remoteAddress;
  /** The remote port number */
   private java.lang.Integer remotePort;
  /** The total amount of RTP bytes received on this transport */
   private java.lang.Long rtpBytesReceived;
  /** The total amount of RTP bytes sent on this transport */
   private java.lang.Long rtpBytesSent;
  /** The total amount of RTP packets received on this transport */
   private java.lang.Integer rtpPacketsReceived;
  /** The total amount of RTP packets sent on this transport */
   private java.lang.Integer rtpPacketsSent;
  /** The total amount of RTP packets lost on this transport */
   private java.lang.Integer rtpPacketsLost;
  /** The total amount of RTX bytes received on this transport */
   private java.lang.Long rtxBytesReceived;
  /** The total amount of RTX bytes sent on this transport */
   private java.lang.Long rtxBytesSent;
  /** The total amount of RTX packets received on this transport */
   private java.lang.Integer rtxPacketsReceived;
  /** The total amount of RTX packets sent on this transport */
   private java.lang.Integer rtxPacketsSent;
  /** The total amount of RTX packets lost on this transport */
   private java.lang.Integer rtxPacketsLost;
  /** The total amount of RTX packets discarded on this transport */
   private java.lang.Integer rtxPacketsDiscarded;
  /** The total amount of SCTP bytes received on this transport */
   private java.lang.Long sctpBytesReceived;
  /** The total amount of SCTP bytes sent on this transport */
   private java.lang.Long sctpBytesSent;
  /** The total amount of SCTP packets received on this transport */
   private java.lang.Integer sctpPacketsReceived;
  /** The total amount of SCTP packets sent on this transport */
   private java.lang.Integer sctpPacketsSent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SFUTransportReport() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The media unit id the report belongs to
   * @param sfuName The provided name of the SFU
   * @param sfuId The provided unique identifier of the SFU
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param transportId The generated unique identifier of the transport
   * @param dtlsState Represent the current value of the state attribute of the underlying RTCDtlsTransport.
   * @param iceState Represent the current value of the state attribute of the underlying RTCIceTransport
   * @param sctpState Represents the the current value of the SCTP state of the transport of the SFU
   * @param iceRole Represent the current value of the role SFU takes place in ICE
   * @param localAddress The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
   * @param localPort The local port number
   * @param protocol The protocol used by the transport
   * @param remoteAddress The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
   * @param remotePort The remote port number
   * @param rtpBytesReceived The total amount of RTP bytes received on this transport
   * @param rtpBytesSent The total amount of RTP bytes sent on this transport
   * @param rtpPacketsReceived The total amount of RTP packets received on this transport
   * @param rtpPacketsSent The total amount of RTP packets sent on this transport
   * @param rtpPacketsLost The total amount of RTP packets lost on this transport
   * @param rtxBytesReceived The total amount of RTX bytes received on this transport
   * @param rtxBytesSent The total amount of RTX bytes sent on this transport
   * @param rtxPacketsReceived The total amount of RTX packets received on this transport
   * @param rtxPacketsSent The total amount of RTX packets sent on this transport
   * @param rtxPacketsLost The total amount of RTX packets lost on this transport
   * @param rtxPacketsDiscarded The total amount of RTX packets discarded on this transport
   * @param sctpBytesReceived The total amount of SCTP bytes received on this transport
   * @param sctpBytesSent The total amount of SCTP bytes sent on this transport
   * @param sctpPacketsReceived The total amount of SCTP packets received on this transport
   * @param sctpPacketsSent The total amount of SCTP packets sent on this transport
   */
  public SFUTransportReport(java.lang.String mediaUnitId, java.lang.String sfuName, java.lang.String sfuId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String transportId, java.lang.String dtlsState, java.lang.String iceState, java.lang.String sctpState, java.lang.String iceRole, java.lang.String localAddress, java.lang.Integer localPort, java.lang.String protocol, java.lang.String remoteAddress, java.lang.Integer remotePort, java.lang.Long rtpBytesReceived, java.lang.Long rtpBytesSent, java.lang.Integer rtpPacketsReceived, java.lang.Integer rtpPacketsSent, java.lang.Integer rtpPacketsLost, java.lang.Long rtxBytesReceived, java.lang.Long rtxBytesSent, java.lang.Integer rtxPacketsReceived, java.lang.Integer rtxPacketsSent, java.lang.Integer rtxPacketsLost, java.lang.Integer rtxPacketsDiscarded, java.lang.Long sctpBytesReceived, java.lang.Long sctpBytesSent, java.lang.Integer sctpPacketsReceived, java.lang.Integer sctpPacketsSent) {
    this.mediaUnitId = mediaUnitId;
    this.sfuName = sfuName;
    this.sfuId = sfuId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.transportId = transportId;
    this.dtlsState = dtlsState;
    this.iceState = iceState;
    this.sctpState = sctpState;
    this.iceRole = iceRole;
    this.localAddress = localAddress;
    this.localPort = localPort;
    this.protocol = protocol;
    this.remoteAddress = remoteAddress;
    this.remotePort = remotePort;
    this.rtpBytesReceived = rtpBytesReceived;
    this.rtpBytesSent = rtpBytesSent;
    this.rtpPacketsReceived = rtpPacketsReceived;
    this.rtpPacketsSent = rtpPacketsSent;
    this.rtpPacketsLost = rtpPacketsLost;
    this.rtxBytesReceived = rtxBytesReceived;
    this.rtxBytesSent = rtxBytesSent;
    this.rtxPacketsReceived = rtxPacketsReceived;
    this.rtxPacketsSent = rtxPacketsSent;
    this.rtxPacketsLost = rtxPacketsLost;
    this.rtxPacketsDiscarded = rtxPacketsDiscarded;
    this.sctpBytesReceived = sctpBytesReceived;
    this.sctpBytesSent = sctpBytesSent;
    this.sctpPacketsReceived = sctpPacketsReceived;
    this.sctpPacketsSent = sctpPacketsSent;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return sfuName;
    case 2: return sfuId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return transportId;
    case 8: return dtlsState;
    case 9: return iceState;
    case 10: return sctpState;
    case 11: return iceRole;
    case 12: return localAddress;
    case 13: return localPort;
    case 14: return protocol;
    case 15: return remoteAddress;
    case 16: return remotePort;
    case 17: return rtpBytesReceived;
    case 18: return rtpBytesSent;
    case 19: return rtpPacketsReceived;
    case 20: return rtpPacketsSent;
    case 21: return rtpPacketsLost;
    case 22: return rtxBytesReceived;
    case 23: return rtxBytesSent;
    case 24: return rtxPacketsReceived;
    case 25: return rtxPacketsSent;
    case 26: return rtxPacketsLost;
    case 27: return rtxPacketsDiscarded;
    case 28: return sctpBytesReceived;
    case 29: return sctpBytesSent;
    case 30: return sctpPacketsReceived;
    case 31: return sctpPacketsSent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaUnitId = (java.lang.String)value$; break;
    case 1: sfuName = (java.lang.String)value$; break;
    case 2: sfuId = (java.lang.String)value$; break;
    case 3: marker = (java.lang.String)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: callId = (java.lang.String)value$; break;
    case 6: roomId = (java.lang.String)value$; break;
    case 7: transportId = (java.lang.String)value$; break;
    case 8: dtlsState = (java.lang.String)value$; break;
    case 9: iceState = (java.lang.String)value$; break;
    case 10: sctpState = (java.lang.String)value$; break;
    case 11: iceRole = (java.lang.String)value$; break;
    case 12: localAddress = (java.lang.String)value$; break;
    case 13: localPort = (java.lang.Integer)value$; break;
    case 14: protocol = (java.lang.String)value$; break;
    case 15: remoteAddress = (java.lang.String)value$; break;
    case 16: remotePort = (java.lang.Integer)value$; break;
    case 17: rtpBytesReceived = (java.lang.Long)value$; break;
    case 18: rtpBytesSent = (java.lang.Long)value$; break;
    case 19: rtpPacketsReceived = (java.lang.Integer)value$; break;
    case 20: rtpPacketsSent = (java.lang.Integer)value$; break;
    case 21: rtpPacketsLost = (java.lang.Integer)value$; break;
    case 22: rtxBytesReceived = (java.lang.Long)value$; break;
    case 23: rtxBytesSent = (java.lang.Long)value$; break;
    case 24: rtxPacketsReceived = (java.lang.Integer)value$; break;
    case 25: rtxPacketsSent = (java.lang.Integer)value$; break;
    case 26: rtxPacketsLost = (java.lang.Integer)value$; break;
    case 27: rtxPacketsDiscarded = (java.lang.Integer)value$; break;
    case 28: sctpBytesReceived = (java.lang.Long)value$; break;
    case 29: sctpBytesSent = (java.lang.Long)value$; break;
    case 30: sctpPacketsReceived = (java.lang.Integer)value$; break;
    case 31: sctpPacketsSent = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'sfuName' field.
   * @return The provided name of the SFU
   */
  public java.lang.String getSfuName() {
    return sfuName;
  }


  /**
   * Gets the value of the 'sfuId' field.
   * @return The provided unique identifier of the SFU
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'transportId' field.
   * @return The generated unique identifier of the transport
   */
  public java.lang.String getTransportId() {
    return transportId;
  }


  /**
   * Gets the value of the 'dtlsState' field.
   * @return Represent the current value of the state attribute of the underlying RTCDtlsTransport.
   */
  public java.lang.String getDtlsState() {
    return dtlsState;
  }


  /**
   * Gets the value of the 'iceState' field.
   * @return Represent the current value of the state attribute of the underlying RTCIceTransport
   */
  public java.lang.String getIceState() {
    return iceState;
  }


  /**
   * Gets the value of the 'sctpState' field.
   * @return Represents the the current value of the SCTP state of the transport of the SFU
   */
  public java.lang.String getSctpState() {
    return sctpState;
  }


  /**
   * Gets the value of the 'iceRole' field.
   * @return Represent the current value of the role SFU takes place in ICE
   */
  public java.lang.String getIceRole() {
    return iceRole;
  }


  /**
   * Gets the value of the 'localAddress' field.
   * @return The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
   */
  public java.lang.String getLocalAddress() {
    return localAddress;
  }


  /**
   * Gets the value of the 'localPort' field.
   * @return The local port number
   */
  public java.lang.Integer getLocalPort() {
    return localPort;
  }


  /**
   * Gets the value of the 'protocol' field.
   * @return The protocol used by the transport
   */
  public java.lang.String getProtocol() {
    return protocol;
  }


  /**
   * Gets the value of the 'remoteAddress' field.
   * @return The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
   */
  public java.lang.String getRemoteAddress() {
    return remoteAddress;
  }


  /**
   * Gets the value of the 'remotePort' field.
   * @return The remote port number
   */
  public java.lang.Integer getRemotePort() {
    return remotePort;
  }


  /**
   * Gets the value of the 'rtpBytesReceived' field.
   * @return The total amount of RTP bytes received on this transport
   */
  public java.lang.Long getRtpBytesReceived() {
    return rtpBytesReceived;
  }


  /**
   * Gets the value of the 'rtpBytesSent' field.
   * @return The total amount of RTP bytes sent on this transport
   */
  public java.lang.Long getRtpBytesSent() {
    return rtpBytesSent;
  }


  /**
   * Gets the value of the 'rtpPacketsReceived' field.
   * @return The total amount of RTP packets received on this transport
   */
  public java.lang.Integer getRtpPacketsReceived() {
    return rtpPacketsReceived;
  }


  /**
   * Gets the value of the 'rtpPacketsSent' field.
   * @return The total amount of RTP packets sent on this transport
   */
  public java.lang.Integer getRtpPacketsSent() {
    return rtpPacketsSent;
  }


  /**
   * Gets the value of the 'rtpPacketsLost' field.
   * @return The total amount of RTP packets lost on this transport
   */
  public java.lang.Integer getRtpPacketsLost() {
    return rtpPacketsLost;
  }


  /**
   * Gets the value of the 'rtxBytesReceived' field.
   * @return The total amount of RTX bytes received on this transport
   */
  public java.lang.Long getRtxBytesReceived() {
    return rtxBytesReceived;
  }


  /**
   * Gets the value of the 'rtxBytesSent' field.
   * @return The total amount of RTX bytes sent on this transport
   */
  public java.lang.Long getRtxBytesSent() {
    return rtxBytesSent;
  }


  /**
   * Gets the value of the 'rtxPacketsReceived' field.
   * @return The total amount of RTX packets received on this transport
   */
  public java.lang.Integer getRtxPacketsReceived() {
    return rtxPacketsReceived;
  }


  /**
   * Gets the value of the 'rtxPacketsSent' field.
   * @return The total amount of RTX packets sent on this transport
   */
  public java.lang.Integer getRtxPacketsSent() {
    return rtxPacketsSent;
  }


  /**
   * Gets the value of the 'rtxPacketsLost' field.
   * @return The total amount of RTX packets lost on this transport
   */
  public java.lang.Integer getRtxPacketsLost() {
    return rtxPacketsLost;
  }


  /**
   * Gets the value of the 'rtxPacketsDiscarded' field.
   * @return The total amount of RTX packets discarded on this transport
   */
  public java.lang.Integer getRtxPacketsDiscarded() {
    return rtxPacketsDiscarded;
  }


  /**
   * Gets the value of the 'sctpBytesReceived' field.
   * @return The total amount of SCTP bytes received on this transport
   */
  public java.lang.Long getSctpBytesReceived() {
    return sctpBytesReceived;
  }


  /**
   * Gets the value of the 'sctpBytesSent' field.
   * @return The total amount of SCTP bytes sent on this transport
   */
  public java.lang.Long getSctpBytesSent() {
    return sctpBytesSent;
  }


  /**
   * Gets the value of the 'sctpPacketsReceived' field.
   * @return The total amount of SCTP packets received on this transport
   */
  public java.lang.Integer getSctpPacketsReceived() {
    return sctpPacketsReceived;
  }


  /**
   * Gets the value of the 'sctpPacketsSent' field.
   * @return The total amount of SCTP packets sent on this transport
   */
  public java.lang.Integer getSctpPacketsSent() {
    return sctpPacketsSent;
  }


  /**
   * Creates a new SFUTransportReport RecordBuilder.
   * @return A new SFUTransportReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder();
  }

  /**
   * Creates a new SFUTransportReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SFUTransportReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder other) {
    return new org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder(other);
  }

  /**
   * Creates a new SFUTransportReport RecordBuilder by copying an existing SFUTransportReport instance.
   * @param other The existing instance to copy.
   * @return A new SFUTransportReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SFUTransportReport other) {
    return new org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder(other);
  }

  /**
   * RecordBuilder for SFUTransportReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SFUTransportReport>
    implements org.apache.avro.data.RecordBuilder<SFUTransportReport> {

    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The provided name of the SFU */
    private java.lang.String sfuName;
    /** The provided unique identifier of the SFU */
    private java.lang.String sfuId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the transport */
    private java.lang.String transportId;
    /** Represent the current value of the state attribute of the underlying RTCDtlsTransport. */
    private java.lang.String dtlsState;
    /** Represent the current value of the state attribute of the underlying RTCIceTransport */
    private java.lang.String iceState;
    /** Represents the the current value of the SCTP state of the transport of the SFU */
    private java.lang.String sctpState;
    /** Represent the current value of the role SFU takes place in ICE */
    private java.lang.String iceRole;
    /** The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN) */
    private java.lang.String localAddress;
    /** The local port number */
    private java.lang.Integer localPort;
    /** The protocol used by the transport */
    private java.lang.String protocol;
    /** The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN) */
    private java.lang.String remoteAddress;
    /** The remote port number */
    private java.lang.Integer remotePort;
    /** The total amount of RTP bytes received on this transport */
    private java.lang.Long rtpBytesReceived;
    /** The total amount of RTP bytes sent on this transport */
    private java.lang.Long rtpBytesSent;
    /** The total amount of RTP packets received on this transport */
    private java.lang.Integer rtpPacketsReceived;
    /** The total amount of RTP packets sent on this transport */
    private java.lang.Integer rtpPacketsSent;
    /** The total amount of RTP packets lost on this transport */
    private java.lang.Integer rtpPacketsLost;
    /** The total amount of RTX bytes received on this transport */
    private java.lang.Long rtxBytesReceived;
    /** The total amount of RTX bytes sent on this transport */
    private java.lang.Long rtxBytesSent;
    /** The total amount of RTX packets received on this transport */
    private java.lang.Integer rtxPacketsReceived;
    /** The total amount of RTX packets sent on this transport */
    private java.lang.Integer rtxPacketsSent;
    /** The total amount of RTX packets lost on this transport */
    private java.lang.Integer rtxPacketsLost;
    /** The total amount of RTX packets discarded on this transport */
    private java.lang.Integer rtxPacketsDiscarded;
    /** The total amount of SCTP bytes received on this transport */
    private java.lang.Long sctpBytesReceived;
    /** The total amount of SCTP bytes sent on this transport */
    private java.lang.Long sctpBytesSent;
    /** The total amount of SCTP packets received on this transport */
    private java.lang.Integer sctpPacketsReceived;
    /** The total amount of SCTP packets sent on this transport */
    private java.lang.Integer sctpPacketsSent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sfuName)) {
        this.sfuName = data().deepCopy(fields()[1].schema(), other.sfuName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transportId)) {
        this.transportId = data().deepCopy(fields()[7].schema(), other.transportId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[8].schema(), other.dtlsState);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.iceState)) {
        this.iceState = data().deepCopy(fields()[9].schema(), other.iceState);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sctpState)) {
        this.sctpState = data().deepCopy(fields()[10].schema(), other.sctpState);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[11].schema(), other.iceRole);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[12].schema(), other.localAddress);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.localPort)) {
        this.localPort = data().deepCopy(fields()[13].schema(), other.localPort);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.protocol)) {
        this.protocol = data().deepCopy(fields()[14].schema(), other.protocol);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[15].schema(), other.remoteAddress);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[16].schema(), other.remotePort);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.rtpBytesReceived)) {
        this.rtpBytesReceived = data().deepCopy(fields()[17].schema(), other.rtpBytesReceived);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.rtpBytesSent)) {
        this.rtpBytesSent = data().deepCopy(fields()[18].schema(), other.rtpBytesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.rtpPacketsReceived)) {
        this.rtpPacketsReceived = data().deepCopy(fields()[19].schema(), other.rtpPacketsReceived);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.rtpPacketsSent)) {
        this.rtpPacketsSent = data().deepCopy(fields()[20].schema(), other.rtpPacketsSent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.rtpPacketsLost)) {
        this.rtpPacketsLost = data().deepCopy(fields()[21].schema(), other.rtpPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.rtxBytesReceived)) {
        this.rtxBytesReceived = data().deepCopy(fields()[22].schema(), other.rtxBytesReceived);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.rtxBytesSent)) {
        this.rtxBytesSent = data().deepCopy(fields()[23].schema(), other.rtxBytesSent);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.rtxPacketsReceived)) {
        this.rtxPacketsReceived = data().deepCopy(fields()[24].schema(), other.rtxPacketsReceived);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.rtxPacketsSent)) {
        this.rtxPacketsSent = data().deepCopy(fields()[25].schema(), other.rtxPacketsSent);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.rtxPacketsLost)) {
        this.rtxPacketsLost = data().deepCopy(fields()[26].schema(), other.rtxPacketsLost);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[27].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.sctpBytesReceived)) {
        this.sctpBytesReceived = data().deepCopy(fields()[28].schema(), other.sctpBytesReceived);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.sctpBytesSent)) {
        this.sctpBytesSent = data().deepCopy(fields()[29].schema(), other.sctpBytesSent);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.sctpPacketsReceived)) {
        this.sctpPacketsReceived = data().deepCopy(fields()[30].schema(), other.sctpPacketsReceived);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.sctpPacketsSent)) {
        this.sctpPacketsSent = data().deepCopy(fields()[31].schema(), other.sctpPacketsSent);
        fieldSetFlags()[31] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SFUTransportReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SFUTransportReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sfuName)) {
        this.sfuName = data().deepCopy(fields()[1].schema(), other.sfuName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transportId)) {
        this.transportId = data().deepCopy(fields()[7].schema(), other.transportId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[8].schema(), other.dtlsState);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.iceState)) {
        this.iceState = data().deepCopy(fields()[9].schema(), other.iceState);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sctpState)) {
        this.sctpState = data().deepCopy(fields()[10].schema(), other.sctpState);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[11].schema(), other.iceRole);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[12].schema(), other.localAddress);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.localPort)) {
        this.localPort = data().deepCopy(fields()[13].schema(), other.localPort);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.protocol)) {
        this.protocol = data().deepCopy(fields()[14].schema(), other.protocol);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[15].schema(), other.remoteAddress);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[16].schema(), other.remotePort);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.rtpBytesReceived)) {
        this.rtpBytesReceived = data().deepCopy(fields()[17].schema(), other.rtpBytesReceived);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.rtpBytesSent)) {
        this.rtpBytesSent = data().deepCopy(fields()[18].schema(), other.rtpBytesSent);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.rtpPacketsReceived)) {
        this.rtpPacketsReceived = data().deepCopy(fields()[19].schema(), other.rtpPacketsReceived);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.rtpPacketsSent)) {
        this.rtpPacketsSent = data().deepCopy(fields()[20].schema(), other.rtpPacketsSent);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.rtpPacketsLost)) {
        this.rtpPacketsLost = data().deepCopy(fields()[21].schema(), other.rtpPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.rtxBytesReceived)) {
        this.rtxBytesReceived = data().deepCopy(fields()[22].schema(), other.rtxBytesReceived);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.rtxBytesSent)) {
        this.rtxBytesSent = data().deepCopy(fields()[23].schema(), other.rtxBytesSent);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.rtxPacketsReceived)) {
        this.rtxPacketsReceived = data().deepCopy(fields()[24].schema(), other.rtxPacketsReceived);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.rtxPacketsSent)) {
        this.rtxPacketsSent = data().deepCopy(fields()[25].schema(), other.rtxPacketsSent);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.rtxPacketsLost)) {
        this.rtxPacketsLost = data().deepCopy(fields()[26].schema(), other.rtxPacketsLost);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[27].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.sctpBytesReceived)) {
        this.sctpBytesReceived = data().deepCopy(fields()[28].schema(), other.sctpBytesReceived);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.sctpBytesSent)) {
        this.sctpBytesSent = data().deepCopy(fields()[29].schema(), other.sctpBytesSent);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.sctpPacketsReceived)) {
        this.sctpPacketsReceived = data().deepCopy(fields()[30].schema(), other.sctpPacketsReceived);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.sctpPacketsSent)) {
        this.sctpPacketsSent = data().deepCopy(fields()[31].schema(), other.sctpPacketsSent);
        fieldSetFlags()[31] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuName' field.
      * The provided name of the SFU
      * @return The value.
      */
    public java.lang.String getSfuName() {
      return sfuName;
    }

    /**
      * Sets the value of the 'sfuName' field.
      * The provided name of the SFU
      * @param value The value of 'sfuName'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSfuName(java.lang.String value) {
      validate(fields()[1], value);
      this.sfuName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuName' field has been set.
      * The provided name of the SFU
      * @return True if the 'sfuName' field has been set, false otherwise.
      */
    public boolean hasSfuName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sfuName' field.
      * The provided name of the SFU
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSfuName() {
      sfuName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }

    /**
      * Sets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[2], value);
      this.sfuId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The provided unique identifier of the SFU
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setMarker(java.lang.String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setCallId(java.lang.String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * The generated unique identifier of the transport
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }

    /**
      * Sets the value of the 'transportId' field.
      * The generated unique identifier of the transport
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setTransportId(java.lang.String value) {
      validate(fields()[7], value);
      this.transportId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * The generated unique identifier of the transport
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'transportId' field.
      * The generated unique identifier of the transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'dtlsState' field.
      * Represent the current value of the state attribute of the underlying RTCDtlsTransport.
      * @return The value.
      */
    public java.lang.String getDtlsState() {
      return dtlsState;
    }

    /**
      * Sets the value of the 'dtlsState' field.
      * Represent the current value of the state attribute of the underlying RTCDtlsTransport.
      * @param value The value of 'dtlsState'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setDtlsState(java.lang.String value) {
      validate(fields()[8], value);
      this.dtlsState = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'dtlsState' field has been set.
      * Represent the current value of the state attribute of the underlying RTCDtlsTransport.
      * @return True if the 'dtlsState' field has been set, false otherwise.
      */
    public boolean hasDtlsState() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'dtlsState' field.
      * Represent the current value of the state attribute of the underlying RTCDtlsTransport.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearDtlsState() {
      dtlsState = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceState' field.
      * Represent the current value of the state attribute of the underlying RTCIceTransport
      * @return The value.
      */
    public java.lang.String getIceState() {
      return iceState;
    }

    /**
      * Sets the value of the 'iceState' field.
      * Represent the current value of the state attribute of the underlying RTCIceTransport
      * @param value The value of 'iceState'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setIceState(java.lang.String value) {
      validate(fields()[9], value);
      this.iceState = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'iceState' field has been set.
      * Represent the current value of the state attribute of the underlying RTCIceTransport
      * @return True if the 'iceState' field has been set, false otherwise.
      */
    public boolean hasIceState() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'iceState' field.
      * Represent the current value of the state attribute of the underlying RTCIceTransport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearIceState() {
      iceState = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpState' field.
      * Represents the the current value of the SCTP state of the transport of the SFU
      * @return The value.
      */
    public java.lang.String getSctpState() {
      return sctpState;
    }

    /**
      * Sets the value of the 'sctpState' field.
      * Represents the the current value of the SCTP state of the transport of the SFU
      * @param value The value of 'sctpState'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSctpState(java.lang.String value) {
      validate(fields()[10], value);
      this.sctpState = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpState' field has been set.
      * Represents the the current value of the SCTP state of the transport of the SFU
      * @return True if the 'sctpState' field has been set, false otherwise.
      */
    public boolean hasSctpState() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sctpState' field.
      * Represents the the current value of the SCTP state of the transport of the SFU
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSctpState() {
      sctpState = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceRole' field.
      * Represent the current value of the role SFU takes place in ICE
      * @return The value.
      */
    public java.lang.String getIceRole() {
      return iceRole;
    }

    /**
      * Sets the value of the 'iceRole' field.
      * Represent the current value of the role SFU takes place in ICE
      * @param value The value of 'iceRole'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setIceRole(java.lang.String value) {
      validate(fields()[11], value);
      this.iceRole = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'iceRole' field has been set.
      * Represent the current value of the role SFU takes place in ICE
      * @return True if the 'iceRole' field has been set, false otherwise.
      */
    public boolean hasIceRole() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'iceRole' field.
      * Represent the current value of the role SFU takes place in ICE
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearIceRole() {
      iceRole = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'localAddress' field.
      * The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public java.lang.String getLocalAddress() {
      return localAddress;
    }

    /**
      * Sets the value of the 'localAddress' field.
      * The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @param value The value of 'localAddress'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setLocalAddress(java.lang.String value) {
      validate(fields()[12], value);
      this.localAddress = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'localAddress' field has been set.
      * The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return True if the 'localAddress' field has been set, false otherwise.
      */
    public boolean hasLocalAddress() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'localAddress' field.
      * The local address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearLocalAddress() {
      localAddress = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'localPort' field.
      * The local port number
      * @return The value.
      */
    public java.lang.Integer getLocalPort() {
      return localPort;
    }

    /**
      * Sets the value of the 'localPort' field.
      * The local port number
      * @param value The value of 'localPort'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setLocalPort(java.lang.Integer value) {
      validate(fields()[13], value);
      this.localPort = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'localPort' field has been set.
      * The local port number
      * @return True if the 'localPort' field has been set, false otherwise.
      */
    public boolean hasLocalPort() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'localPort' field.
      * The local port number
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearLocalPort() {
      localPort = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * The protocol used by the transport
      * @return The value.
      */
    public java.lang.String getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * The protocol used by the transport
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setProtocol(java.lang.String value) {
      validate(fields()[14], value);
      this.protocol = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * The protocol used by the transport
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'protocol' field.
      * The protocol used by the transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteAddress' field.
      * The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public java.lang.String getRemoteAddress() {
      return remoteAddress;
    }

    /**
      * Sets the value of the 'remoteAddress' field.
      * The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @param value The value of 'remoteAddress'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRemoteAddress(java.lang.String value) {
      validate(fields()[15], value);
      this.remoteAddress = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteAddress' field has been set.
      * The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return True if the 'remoteAddress' field has been set, false otherwise.
      */
    public boolean hasRemoteAddress() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'remoteAddress' field.
      * The remote address of the ICE candidate selected for the transport (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRemoteAddress() {
      remoteAddress = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePort' field.
      * The remote port number
      * @return The value.
      */
    public java.lang.Integer getRemotePort() {
      return remotePort;
    }

    /**
      * Sets the value of the 'remotePort' field.
      * The remote port number
      * @param value The value of 'remotePort'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRemotePort(java.lang.Integer value) {
      validate(fields()[16], value);
      this.remotePort = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePort' field has been set.
      * The remote port number
      * @return True if the 'remotePort' field has been set, false otherwise.
      */
    public boolean hasRemotePort() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'remotePort' field.
      * The remote port number
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRemotePort() {
      remotePort = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpBytesReceived' field.
      * The total amount of RTP bytes received on this transport
      * @return The value.
      */
    public java.lang.Long getRtpBytesReceived() {
      return rtpBytesReceived;
    }

    /**
      * Sets the value of the 'rtpBytesReceived' field.
      * The total amount of RTP bytes received on this transport
      * @param value The value of 'rtpBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtpBytesReceived(java.lang.Long value) {
      validate(fields()[17], value);
      this.rtpBytesReceived = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpBytesReceived' field has been set.
      * The total amount of RTP bytes received on this transport
      * @return True if the 'rtpBytesReceived' field has been set, false otherwise.
      */
    public boolean hasRtpBytesReceived() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'rtpBytesReceived' field.
      * The total amount of RTP bytes received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtpBytesReceived() {
      rtpBytesReceived = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpBytesSent' field.
      * The total amount of RTP bytes sent on this transport
      * @return The value.
      */
    public java.lang.Long getRtpBytesSent() {
      return rtpBytesSent;
    }

    /**
      * Sets the value of the 'rtpBytesSent' field.
      * The total amount of RTP bytes sent on this transport
      * @param value The value of 'rtpBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtpBytesSent(java.lang.Long value) {
      validate(fields()[18], value);
      this.rtpBytesSent = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpBytesSent' field has been set.
      * The total amount of RTP bytes sent on this transport
      * @return True if the 'rtpBytesSent' field has been set, false otherwise.
      */
    public boolean hasRtpBytesSent() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'rtpBytesSent' field.
      * The total amount of RTP bytes sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtpBytesSent() {
      rtpBytesSent = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpPacketsReceived' field.
      * The total amount of RTP packets received on this transport
      * @return The value.
      */
    public java.lang.Integer getRtpPacketsReceived() {
      return rtpPacketsReceived;
    }

    /**
      * Sets the value of the 'rtpPacketsReceived' field.
      * The total amount of RTP packets received on this transport
      * @param value The value of 'rtpPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtpPacketsReceived(java.lang.Integer value) {
      validate(fields()[19], value);
      this.rtpPacketsReceived = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpPacketsReceived' field has been set.
      * The total amount of RTP packets received on this transport
      * @return True if the 'rtpPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasRtpPacketsReceived() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'rtpPacketsReceived' field.
      * The total amount of RTP packets received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtpPacketsReceived() {
      rtpPacketsReceived = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpPacketsSent' field.
      * The total amount of RTP packets sent on this transport
      * @return The value.
      */
    public java.lang.Integer getRtpPacketsSent() {
      return rtpPacketsSent;
    }

    /**
      * Sets the value of the 'rtpPacketsSent' field.
      * The total amount of RTP packets sent on this transport
      * @param value The value of 'rtpPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtpPacketsSent(java.lang.Integer value) {
      validate(fields()[20], value);
      this.rtpPacketsSent = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpPacketsSent' field has been set.
      * The total amount of RTP packets sent on this transport
      * @return True if the 'rtpPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRtpPacketsSent() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'rtpPacketsSent' field.
      * The total amount of RTP packets sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtpPacketsSent() {
      rtpPacketsSent = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpPacketsLost' field.
      * The total amount of RTP packets lost on this transport
      * @return The value.
      */
    public java.lang.Integer getRtpPacketsLost() {
      return rtpPacketsLost;
    }

    /**
      * Sets the value of the 'rtpPacketsLost' field.
      * The total amount of RTP packets lost on this transport
      * @param value The value of 'rtpPacketsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtpPacketsLost(java.lang.Integer value) {
      validate(fields()[21], value);
      this.rtpPacketsLost = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpPacketsLost' field has been set.
      * The total amount of RTP packets lost on this transport
      * @return True if the 'rtpPacketsLost' field has been set, false otherwise.
      */
    public boolean hasRtpPacketsLost() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'rtpPacketsLost' field.
      * The total amount of RTP packets lost on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtpPacketsLost() {
      rtpPacketsLost = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxBytesReceived' field.
      * The total amount of RTX bytes received on this transport
      * @return The value.
      */
    public java.lang.Long getRtxBytesReceived() {
      return rtxBytesReceived;
    }

    /**
      * Sets the value of the 'rtxBytesReceived' field.
      * The total amount of RTX bytes received on this transport
      * @param value The value of 'rtxBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxBytesReceived(java.lang.Long value) {
      validate(fields()[22], value);
      this.rtxBytesReceived = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxBytesReceived' field has been set.
      * The total amount of RTX bytes received on this transport
      * @return True if the 'rtxBytesReceived' field has been set, false otherwise.
      */
    public boolean hasRtxBytesReceived() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'rtxBytesReceived' field.
      * The total amount of RTX bytes received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxBytesReceived() {
      rtxBytesReceived = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxBytesSent' field.
      * The total amount of RTX bytes sent on this transport
      * @return The value.
      */
    public java.lang.Long getRtxBytesSent() {
      return rtxBytesSent;
    }

    /**
      * Sets the value of the 'rtxBytesSent' field.
      * The total amount of RTX bytes sent on this transport
      * @param value The value of 'rtxBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxBytesSent(java.lang.Long value) {
      validate(fields()[23], value);
      this.rtxBytesSent = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxBytesSent' field has been set.
      * The total amount of RTX bytes sent on this transport
      * @return True if the 'rtxBytesSent' field has been set, false otherwise.
      */
    public boolean hasRtxBytesSent() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'rtxBytesSent' field.
      * The total amount of RTX bytes sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxBytesSent() {
      rtxBytesSent = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsReceived' field.
      * The total amount of RTX packets received on this transport
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsReceived() {
      return rtxPacketsReceived;
    }

    /**
      * Sets the value of the 'rtxPacketsReceived' field.
      * The total amount of RTX packets received on this transport
      * @param value The value of 'rtxPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxPacketsReceived(java.lang.Integer value) {
      validate(fields()[24], value);
      this.rtxPacketsReceived = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsReceived' field has been set.
      * The total amount of RTX packets received on this transport
      * @return True if the 'rtxPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsReceived() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'rtxPacketsReceived' field.
      * The total amount of RTX packets received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxPacketsReceived() {
      rtxPacketsReceived = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsSent' field.
      * The total amount of RTX packets sent on this transport
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsSent() {
      return rtxPacketsSent;
    }

    /**
      * Sets the value of the 'rtxPacketsSent' field.
      * The total amount of RTX packets sent on this transport
      * @param value The value of 'rtxPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxPacketsSent(java.lang.Integer value) {
      validate(fields()[25], value);
      this.rtxPacketsSent = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsSent' field has been set.
      * The total amount of RTX packets sent on this transport
      * @return True if the 'rtxPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsSent() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'rtxPacketsSent' field.
      * The total amount of RTX packets sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxPacketsSent() {
      rtxPacketsSent = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsLost' field.
      * The total amount of RTX packets lost on this transport
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsLost() {
      return rtxPacketsLost;
    }

    /**
      * Sets the value of the 'rtxPacketsLost' field.
      * The total amount of RTX packets lost on this transport
      * @param value The value of 'rtxPacketsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxPacketsLost(java.lang.Integer value) {
      validate(fields()[26], value);
      this.rtxPacketsLost = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsLost' field has been set.
      * The total amount of RTX packets lost on this transport
      * @return True if the 'rtxPacketsLost' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsLost() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'rtxPacketsLost' field.
      * The total amount of RTX packets lost on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxPacketsLost() {
      rtxPacketsLost = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsDiscarded' field.
      * The total amount of RTX packets discarded on this transport
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsDiscarded() {
      return rtxPacketsDiscarded;
    }

    /**
      * Sets the value of the 'rtxPacketsDiscarded' field.
      * The total amount of RTX packets discarded on this transport
      * @param value The value of 'rtxPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setRtxPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[27], value);
      this.rtxPacketsDiscarded = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsDiscarded' field has been set.
      * The total amount of RTX packets discarded on this transport
      * @return True if the 'rtxPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsDiscarded() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'rtxPacketsDiscarded' field.
      * The total amount of RTX packets discarded on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearRtxPacketsDiscarded() {
      rtxPacketsDiscarded = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpBytesReceived' field.
      * The total amount of SCTP bytes received on this transport
      * @return The value.
      */
    public java.lang.Long getSctpBytesReceived() {
      return sctpBytesReceived;
    }

    /**
      * Sets the value of the 'sctpBytesReceived' field.
      * The total amount of SCTP bytes received on this transport
      * @param value The value of 'sctpBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSctpBytesReceived(java.lang.Long value) {
      validate(fields()[28], value);
      this.sctpBytesReceived = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpBytesReceived' field has been set.
      * The total amount of SCTP bytes received on this transport
      * @return True if the 'sctpBytesReceived' field has been set, false otherwise.
      */
    public boolean hasSctpBytesReceived() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'sctpBytesReceived' field.
      * The total amount of SCTP bytes received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSctpBytesReceived() {
      sctpBytesReceived = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpBytesSent' field.
      * The total amount of SCTP bytes sent on this transport
      * @return The value.
      */
    public java.lang.Long getSctpBytesSent() {
      return sctpBytesSent;
    }

    /**
      * Sets the value of the 'sctpBytesSent' field.
      * The total amount of SCTP bytes sent on this transport
      * @param value The value of 'sctpBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSctpBytesSent(java.lang.Long value) {
      validate(fields()[29], value);
      this.sctpBytesSent = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpBytesSent' field has been set.
      * The total amount of SCTP bytes sent on this transport
      * @return True if the 'sctpBytesSent' field has been set, false otherwise.
      */
    public boolean hasSctpBytesSent() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'sctpBytesSent' field.
      * The total amount of SCTP bytes sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSctpBytesSent() {
      sctpBytesSent = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpPacketsReceived' field.
      * The total amount of SCTP packets received on this transport
      * @return The value.
      */
    public java.lang.Integer getSctpPacketsReceived() {
      return sctpPacketsReceived;
    }

    /**
      * Sets the value of the 'sctpPacketsReceived' field.
      * The total amount of SCTP packets received on this transport
      * @param value The value of 'sctpPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSctpPacketsReceived(java.lang.Integer value) {
      validate(fields()[30], value);
      this.sctpPacketsReceived = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpPacketsReceived' field has been set.
      * The total amount of SCTP packets received on this transport
      * @return True if the 'sctpPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasSctpPacketsReceived() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'sctpPacketsReceived' field.
      * The total amount of SCTP packets received on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSctpPacketsReceived() {
      sctpPacketsReceived = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpPacketsSent' field.
      * The total amount of SCTP packets sent on this transport
      * @return The value.
      */
    public java.lang.Integer getSctpPacketsSent() {
      return sctpPacketsSent;
    }

    /**
      * Sets the value of the 'sctpPacketsSent' field.
      * The total amount of SCTP packets sent on this transport
      * @param value The value of 'sctpPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder setSctpPacketsSent(java.lang.Integer value) {
      validate(fields()[31], value);
      this.sctpPacketsSent = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpPacketsSent' field has been set.
      * The total amount of SCTP packets sent on this transport
      * @return True if the 'sctpPacketsSent' field has been set, false otherwise.
      */
    public boolean hasSctpPacketsSent() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'sctpPacketsSent' field.
      * The total amount of SCTP packets sent on this transport
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SFUTransportReport.Builder clearSctpPacketsSent() {
      sctpPacketsSent = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    @Override
    public SFUTransportReport build() {
      try {
        SFUTransportReport record = new SFUTransportReport();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[0]);
        record.sfuName = fieldSetFlags()[1] ? this.sfuName : (java.lang.String) defaultValue(fields()[1]);
        record.sfuId = fieldSetFlags()[2] ? this.sfuId : (java.lang.String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (java.lang.String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (java.lang.String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (java.lang.String) defaultValue(fields()[6]);
        record.transportId = fieldSetFlags()[7] ? this.transportId : (java.lang.String) defaultValue(fields()[7]);
        record.dtlsState = fieldSetFlags()[8] ? this.dtlsState : (java.lang.String) defaultValue(fields()[8]);
        record.iceState = fieldSetFlags()[9] ? this.iceState : (java.lang.String) defaultValue(fields()[9]);
        record.sctpState = fieldSetFlags()[10] ? this.sctpState : (java.lang.String) defaultValue(fields()[10]);
        record.iceRole = fieldSetFlags()[11] ? this.iceRole : (java.lang.String) defaultValue(fields()[11]);
        record.localAddress = fieldSetFlags()[12] ? this.localAddress : (java.lang.String) defaultValue(fields()[12]);
        record.localPort = fieldSetFlags()[13] ? this.localPort : (java.lang.Integer) defaultValue(fields()[13]);
        record.protocol = fieldSetFlags()[14] ? this.protocol : (java.lang.String) defaultValue(fields()[14]);
        record.remoteAddress = fieldSetFlags()[15] ? this.remoteAddress : (java.lang.String) defaultValue(fields()[15]);
        record.remotePort = fieldSetFlags()[16] ? this.remotePort : (java.lang.Integer) defaultValue(fields()[16]);
        record.rtpBytesReceived = fieldSetFlags()[17] ? this.rtpBytesReceived : (java.lang.Long) defaultValue(fields()[17]);
        record.rtpBytesSent = fieldSetFlags()[18] ? this.rtpBytesSent : (java.lang.Long) defaultValue(fields()[18]);
        record.rtpPacketsReceived = fieldSetFlags()[19] ? this.rtpPacketsReceived : (java.lang.Integer) defaultValue(fields()[19]);
        record.rtpPacketsSent = fieldSetFlags()[20] ? this.rtpPacketsSent : (java.lang.Integer) defaultValue(fields()[20]);
        record.rtpPacketsLost = fieldSetFlags()[21] ? this.rtpPacketsLost : (java.lang.Integer) defaultValue(fields()[21]);
        record.rtxBytesReceived = fieldSetFlags()[22] ? this.rtxBytesReceived : (java.lang.Long) defaultValue(fields()[22]);
        record.rtxBytesSent = fieldSetFlags()[23] ? this.rtxBytesSent : (java.lang.Long) defaultValue(fields()[23]);
        record.rtxPacketsReceived = fieldSetFlags()[24] ? this.rtxPacketsReceived : (java.lang.Integer) defaultValue(fields()[24]);
        record.rtxPacketsSent = fieldSetFlags()[25] ? this.rtxPacketsSent : (java.lang.Integer) defaultValue(fields()[25]);
        record.rtxPacketsLost = fieldSetFlags()[26] ? this.rtxPacketsLost : (java.lang.Integer) defaultValue(fields()[26]);
        record.rtxPacketsDiscarded = fieldSetFlags()[27] ? this.rtxPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[27]);
        record.sctpBytesReceived = fieldSetFlags()[28] ? this.sctpBytesReceived : (java.lang.Long) defaultValue(fields()[28]);
        record.sctpBytesSent = fieldSetFlags()[29] ? this.sctpBytesSent : (java.lang.Long) defaultValue(fields()[29]);
        record.sctpPacketsReceived = fieldSetFlags()[30] ? this.sctpPacketsReceived : (java.lang.Integer) defaultValue(fields()[30]);
        record.sctpPacketsSent = fieldSetFlags()[31] ? this.sctpPacketsSent : (java.lang.Integer) defaultValue(fields()[31]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
