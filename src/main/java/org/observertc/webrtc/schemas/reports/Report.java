/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A multiplexed Report object wraps an encoded report in bytes format */
@org.apache.avro.specific.AvroGenerated
public class Report extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6992077127132430113L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Report\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A multiplexed Report object wraps an encoded report in bytes format\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ReportType\",\"symbols\":[\"OBSERVER_EVENT\",\"CALL_EVENT\",\"CALL_META_DATA\",\"CLIENT_EXTENSION_DATA\",\"PEER_CONNECTION_TRANPORT\",\"PEER_CONNECTION_DATA_CHANNEL\",\"INBOUND_AUDIO_TRACK\",\"INBOUND_VIDEO_TRACK\",\"OUTBOUND_AUDIO_TRACK\",\"OUTBOUND_VIDEO_TRACK\",\"MEDIA_TRACK\",\"SFU_EVENT\",\"SFU_META_DATA\",\"SFU_TRANSPORT\",\"SFU_INBOUND_RTP_STREAM\",\"SFU_OUTBOUND_RTP_STREAM\",\"SFU_SCTP_STREAM\"]},\"doc\":\"The type of the report\"},{\"name\":\"payload\",\"type\":\"bytes\",\"doc\":\"The payload of contans the actual report\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The type of the report */
   private org.observertc.webrtc.schemas.reports.ReportType type;
  /** The payload of contans the actual report */
   private java.nio.ByteBuffer payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Report() {}

  /**
   * All-args constructor.
   * @param type The type of the report
   * @param payload The payload of contans the actual report
   */
  public Report(org.observertc.webrtc.schemas.reports.ReportType type, java.nio.ByteBuffer payload) {
    this.type = type;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (org.observertc.webrtc.schemas.reports.ReportType)value$; break;
    case 1: payload = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of the report
   */
  public org.observertc.webrtc.schemas.reports.ReportType getType() {
    return type;
  }


  /**
   * Gets the value of the 'payload' field.
   * @return The payload of contans the actual report
   */
  public java.nio.ByteBuffer getPayload() {
    return payload;
  }


  /**
   * Creates a new Report RecordBuilder.
   * @return A new Report RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.Report.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.Report.Builder();
  }

  /**
   * Creates a new Report RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Report RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.Report.Builder newBuilder(org.observertc.webrtc.schemas.reports.Report.Builder other) {
    return new org.observertc.webrtc.schemas.reports.Report.Builder(other);
  }

  /**
   * Creates a new Report RecordBuilder by copying an existing Report instance.
   * @param other The existing instance to copy.
   * @return A new Report RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.Report.Builder newBuilder(org.observertc.webrtc.schemas.reports.Report other) {
    return new org.observertc.webrtc.schemas.reports.Report.Builder(other);
  }

  /**
   * RecordBuilder for Report instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Report>
    implements org.apache.avro.data.RecordBuilder<Report> {

    /** The type of the report */
    private org.observertc.webrtc.schemas.reports.ReportType type;
    /** The payload of contans the actual report */
    private java.nio.ByteBuffer payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.Report.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Report instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.Report other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the report
      * @return The value.
      */
    public org.observertc.webrtc.schemas.reports.ReportType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the report
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.Report.Builder setType(org.observertc.webrtc.schemas.reports.ReportType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the report
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the report
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.Report.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * The payload of contans the actual report
      * @return The value.
      */
    public java.nio.ByteBuffer getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * The payload of contans the actual report
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.Report.Builder setPayload(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.payload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * The payload of contans the actual report
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payload' field.
      * The payload of contans the actual report
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.Report.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Report build() {
      try {
        Report record = new Report();
        record.type = fieldSetFlags()[0] ? this.type : (org.observertc.webrtc.schemas.reports.ReportType) defaultValue(fields()[0]);
        record.payload = fieldSetFlags()[1] ? this.payload : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
