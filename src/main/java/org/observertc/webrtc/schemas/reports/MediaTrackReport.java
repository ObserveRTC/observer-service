/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A General Flat merged Media Track Report for in-, outbound video and audio tracks */
@org.apache.avro.specific.AvroGenerated
public class MediaTrackReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6354228468709567600L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MediaTrackReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A General Flat merged Media Track Report for in-, outbound video and audio tracks\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is labeled with\",\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track\",\"default\":null},{\"name\":\"rtpStreamId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the RTP stream connected to a remote media unit (such as an SFU)\",\"default\":null},{\"name\":\"remoteTrackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Inbound Media Track Reports\\nThe id of the remote track this inbound track is originated from\",\"default\":null},{\"name\":\"remoteUserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Inbound Media Track Reports\\nThe webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it\",\"default\":null},{\"name\":\"remoteClientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Inbound Media Track Reports\\nThe observer matched remote client Id\",\"default\":null},{\"name\":\"remotePeerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Inbound Media Track Reports\\nThe observer matched remote Peer Connection Id\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The RTP SSRC field\"},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded synchronization source\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of bytes received on the corresponded synchronization source\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The corresponded synchronization source reported jitter\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets missed the playout point and therefore discarded by the jitterbuffer\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source\",\"default\":null},{\"name\":\"burstPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost in burst (RFC6958)\",\"default\":null},{\"name\":\"burstPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets discarded in burst (RFC6958)\",\"default\":null},{\"name\":\"burstLossCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsLost on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"voiceActivityFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only For Audio Reports\\nIndicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header\",\"default\":null},{\"name\":\"lastPacketReceivedTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nRepresents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"averageRtcpInterval\",\"type\":[\"null\",\"double\"],\"doc\":\"The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"headerBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of FEC packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsFailedDecryption\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsDuplicated\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nTotal number of packets identified as duplicated over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"perDscpPacketsReceived\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalProcessingDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded\",\"default\":null},{\"name\":\"estimatedPlayoutTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe estimated playout time of t","he corresponded synchronization source\",\"default\":null},{\"name\":\"jitterBufferDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.\",\"default\":null},{\"name\":\"jitterBufferEmittedCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"decoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Inbound Media Track Reports\\nIndicate the name of the decoder implementation library\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"remoteTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)\",\"default\":null},{\"name\":\"reportsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Inbound Media Track Reports\\nThe number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to\",\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Flag represents if the receiver ended the media stream track or not.\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The type of the payload the RTP packet SSRC belongs to\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the MIME type of the codec (e.g.: video/vp8)\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The negotiated clock rate the RTP timestamp is generated of\",\"default\":null},{\"name\":\"channels\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The a=fmtp line in the SDP corresponding to the codec\",\"default\":null},{\"name\":\"framesDropped\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nThe total number of frames dropped at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"partialFramesLost\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nThe total number of partial frames lost at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"fullFramesLost\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nThe total number of full frames lost at decoding process on the corresponding synchronization source\",\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nIndicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"keyFramesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nIndicate the number of keyframes received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameWidth\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nIndicate the width of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameHeight\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nIndicate the height of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"frameBitDepth\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nIndicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"framesPerSecond\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nIndicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"qpSum\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Video Reports\\nsum of QP values of frames decoded on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalDecodeTime\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nThe total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalInterFrameDelay\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nThe total number of inter frame delay on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalSquaredInterFrameDelay\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nThe total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays\",\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nCount the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nCount the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"sliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nCount the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"framesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Inbound Media Track Reports\\nRepresents the total number of complete frames received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"rid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Outbound Media Track Reports\\n The rid encoding parameter of the corresponded synchronization source\",\"default\":null},{\"name\":\"lastPacketSentTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\n the timestamp the last packet was sent. (UTC epoch in ms)\",\"default\":null},{\"name\":\"headerBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"packetsDiscardedOnSend\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"bytesDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of FEC packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"retransmittedPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of retransmitted packets sent over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"retransmittedBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\nTotal number of retransmitted bytes sent over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"targetBitrate\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\nReflects the current encoder target in bits per second.\",\"default\":null},{\"name\":\"totalEncodedBytesTarget\",\"type\":[\"null\",\"long\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe total number of bytes of RTP coherent frames encoded completly depending on the f","rame size the encoder targets\",\"default\":null},{\"name\":\"totalSamplesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nThe total number of samples sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"samplesEncodedWithSilk\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nThe total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"samplesEncodedWithCelt\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nThe total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source\",\"default\":null},{\"name\":\"totalPacketSendDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source\",\"default\":null},{\"name\":\"perDscpPacketsSent\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"encoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Outbound Media Track Reports\\nIndicate the name of the encoder implementation library\",\"default\":null},{\"name\":\"roundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Outbound Media Track Reports\\nRTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"totalRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe sum of RTT measurements belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"fractionLost\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe receiver reported fractional lost belongs to the corresponded synchronization source\",\"default\":null},{\"name\":\"reportsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe total number of RR reports received, which is the base of the remote inbound calculation on this source\",\"default\":null},{\"name\":\"roundTripTimeMeasurements\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Outbound Media Track Reports\\nThe total number of calculated RR measurements received on this source\",\"default\":null},{\"name\":\"relayedSource\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only For Outbound Media Track Reports\\nTrue if the corresponded media source is remote, false otherwise (or null depending on browser and version)\",\"default\":null},{\"name\":\"audioLevel\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nRepresents the audio level reported by the media source\",\"default\":null},{\"name\":\"totalAudioEnergy\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nRepresents the energy level reported by the media source\",\"default\":null},{\"name\":\"totalSamplesDuration\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nRepresents the total duration of the audio samples the media source actually transconverted in seconds\",\"default\":null},{\"name\":\"echoReturnLoss\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nRepresents the echo cancellation in decibels corresponded to the media source.\",\"default\":null},{\"name\":\"echoReturnLossEnhancement\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Audio Reports\\nOnly For Outbound Media Track Reports\\nRepresents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.\",\"default\":null},{\"name\":\"framesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of frames sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"hugeFramesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of frames encoded over the corresponded synchronization source\",\"default\":null},{\"name\":\"keyFramesEncoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of keyframes sent over the corresponded synchronization source\",\"default\":null},{\"name\":\"framesDiscardedOnSend\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of frames discarded before sending over the corresponded synchronization source\",\"default\":null},{\"name\":\"totalEncodeTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe sum of encoding time spent by the encoder corresponded to the synchronization source\",\"default\":null},{\"name\":\"qualityLimitationDurationCPU\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nTime elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU\",\"default\":null},{\"name\":\"qualityLimitationDurationNone\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nTime elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state\",\"default\":null},{\"name\":\"qualityLimitationDurationBandwidth\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nTime elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth\",\"default\":null},{\"name\":\"qualityLimitationDurationOther\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nTime elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor\",\"default\":null},{\"name\":\"qualityLimitationReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nIndicate a reason for the corresponding synchronization source (ssrc) quality is limited\",\"default\":null},{\"name\":\"qualityLimitationResolutionChanges\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nThe number of quality limiatation changes happened for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFrameWidth\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nIndicate the encoded width of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFrameHeight\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nIndicate the encoded height of the frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFrameBitDepth\",\"type\":[\"null\",\"int\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nIndicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"encodedFramesPerSecond\",\"type\":[\"null\",\"double\"],\"doc\":\"Only For Video Reports\\nOnly For Outbound Media Track Reports\\nIndicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** webrtc app provided user identifier */
   private java.lang.String userId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The webrtc app provided label the peer connection is labeled with */
   private java.lang.String label;
  /** The id of the track */
   private java.lang.String trackId;
  /** The id of the RTP stream connected to a remote media unit (such as an SFU) */
   private java.lang.String rtpStreamId;
  /** Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from */
   private java.lang.String remoteTrackId;
  /** Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
   private java.lang.String remoteUserId;
  /** Only For Inbound Media Track Reports
The observer matched remote client Id */
   private java.lang.String remoteClientId;
  /** Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id */
   private java.lang.String remotePeerConnectionId;
  /** The sequence number of the sample the report is generated from */
   private int sampleSeq;
  /** The RTP SSRC field */
   private long ssrc;
  /** The total number of packets received on the corresponded synchronization source */
   private java.lang.Integer packetsReceived;
  /** The total number of bytes received on the corresponded synchronization source */
   private java.lang.Integer packetsLost;
  /** The corresponded synchronization source reported jitter */
   private java.lang.Double jitter;
  /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
   private java.lang.Integer packetsDiscarded;
  /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
   private java.lang.Integer packetsRepaired;
  /** The total number of packets lost in burst (RFC6958) */
   private java.lang.Integer burstPacketsLost;
  /** The total number of packets discarded in burst (RFC6958) */
   private java.lang.Integer burstPacketsDiscarded;
  /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
   private java.lang.Integer burstLossCount;
  /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
   private java.lang.Integer burstDiscardCount;
  /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstLossRate;
  /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstDiscardRate;
  /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapLossRate;
  /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapDiscardRate;
  /** Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header */
   private java.lang.Boolean voiceActivityFlag;
  /** Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
   private java.lang.Double lastPacketReceivedTimestamp;
  /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
   private java.lang.Double averageRtcpInterval;
  /** Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
   private java.lang.Long headerBytesReceived;
  /** Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc) */
   private java.lang.Integer fecPacketsReceived;
  /** Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Integer fecPacketsDiscarded;
  /** Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Long bytesReceived;
  /** Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Integer packetsFailedDecryption;
  /** Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
   private java.lang.Integer packetsDuplicated;
  /** Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
   private java.lang.Double perDscpPacketsReceived;
  /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
   private java.lang.Integer nackCount;
  /** Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
   private java.lang.Double totalProcessingDelay;
  /** Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source */
   private java.lang.Double estimatedPlayoutTimestamp;
  /** Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
   private java.lang.Double jitterBufferDelay;
  /** Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
   private java.lang.Integer jitterBufferEmittedCount;
  /** Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library */
   private java.lang.String decoderImplementation;
  /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
   private java.lang.Integer packetsSent;
  /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
   private java.lang.Long bytesSent;
  /** Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
   private java.lang.Double remoteTimestamp;
  /** Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
   private java.lang.Integer reportsSent;
  /** Flag represents if the receiver ended the media stream track or not. */
   private java.lang.Boolean ended;
  /** The type of the payload the RTP packet SSRC belongs to */
   private java.lang.Integer payloadType;
  /** the MIME type of the codec (e.g.: video/vp8) */
   private java.lang.String mimeType;
  /** The negotiated clock rate the RTP timestamp is generated of */
   private java.lang.Long clockRate;
  /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
   private java.lang.Integer channels;
  /** The a=fmtp line in the SDP corresponding to the codec */
   private java.lang.String sdpFmtpLine;
  /** Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source */
   private java.lang.Integer framesDropped;
  /** Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source */
   private java.lang.Double partialFramesLost;
  /** Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source */
   private java.lang.Integer fullFramesLost;
  /** Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc) */
   private java.lang.Integer framesDecoded;
  /** Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer keyFramesDecoded;
  /** Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer frameWidth;
  /** Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer frameHeight;
  /** Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer frameBitDepth;
  /** Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
   private java.lang.Double framesPerSecond;
  /** Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc) */
   private java.lang.Long qpSum;
  /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc) */
   private java.lang.Long totalDecodeTime;
  /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc) */
   private java.lang.Long totalInterFrameDelay;
  /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays */
   private java.lang.Long totalSquaredInterFrameDelay;
  /** Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private java.lang.Integer firCount;
  /** Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private java.lang.Integer pliCount;
  /** Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
   private java.lang.Integer sliCount;
  /** Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer framesReceived;
  /** Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source */
   private java.lang.String rid;
  /** Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms) */
   private java.lang.Long lastPacketSentTimestamp;
  /** Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
   private java.lang.Long headerBytesSent;
  /** Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
   private java.lang.Integer packetsDiscardedOnSend;
  /** Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
   private java.lang.Long bytesDiscardedOnSend;
  /** Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
   private java.lang.Integer fecPacketsSent;
  /** Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
   private java.lang.Integer retransmittedPacketsSent;
  /** Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc). */
   private java.lang.Long retransmittedBytesSent;
  /** Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second. */
   private java.lang.Long targetBitrate;
  /** Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
   private java.lang.Long totalEncodedBytesTarget;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source */
   private java.lang.Integer totalSamplesSent;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source */
   private java.lang.Integer samplesEncodedWithSilk;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source */
   private java.lang.Integer samplesEncodedWithCelt;
  /** Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
   private java.lang.Double totalPacketSendDelay;
  /** Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
   private java.lang.Double perDscpPacketsSent;
  /** Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library */
   private java.lang.String encoderImplementation;
  /** Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
   private java.lang.Double roundTripTime;
  /** Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source */
   private java.lang.Double totalRoundTripTime;
  /** Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source */
   private java.lang.Double fractionLost;
  /** Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source */
   private java.lang.Integer reportsReceived;
  /** Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source */
   private java.lang.Integer roundTripTimeMeasurements;
  /** Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
   private java.lang.Boolean relayedSource;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source */
   private java.lang.Double audioLevel;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source */
   private java.lang.Double totalAudioEnergy;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds */
   private java.lang.Double totalSamplesDuration;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source. */
   private java.lang.Double echoReturnLoss;
  /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source. */
   private java.lang.Double echoReturnLossEnhancement;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source */
   private java.lang.Integer framesSent;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source */
   private java.lang.Integer hugeFramesSent;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source */
   private java.lang.Integer framesEncoded;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source */
   private java.lang.Integer keyFramesEncoded;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source */
   private java.lang.Integer framesDiscardedOnSend;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source */
   private java.lang.Double totalEncodeTime;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU */
   private java.lang.Double qualityLimitationDurationCPU;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state */
   private java.lang.Double qualityLimitationDurationNone;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth */
   private java.lang.Double qualityLimitationDurationBandwidth;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor */
   private java.lang.Double qualityLimitationDurationOther;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited */
   private java.lang.String qualityLimitationReason;
  /** Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc) */
   private java.lang.Integer qualityLimitationResolutionChanges;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer encodedFrameWidth;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer encodedFrameHeight;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
   private java.lang.Integer encodedFrameBitDepth;
  /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
   private java.lang.Double encodedFramesPerSecond;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MediaTrackReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is labeled with
   * @param trackId The id of the track
   * @param rtpStreamId The id of the RTP stream connected to a remote media unit (such as an SFU)
   * @param remoteTrackId Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
   * @param remoteUserId Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   * @param remoteClientId Only For Inbound Media Track Reports
The observer matched remote client Id
   * @param remotePeerConnectionId Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param ssrc The RTP SSRC field
   * @param packetsReceived The total number of packets received on the corresponded synchronization source
   * @param packetsLost The total number of bytes received on the corresponded synchronization source
   * @param jitter The corresponded synchronization source reported jitter
   * @param packetsDiscarded The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   * @param packetsRepaired The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   * @param burstPacketsLost The total number of packets lost in burst (RFC6958)
   * @param burstPacketsDiscarded The total number of packets discarded in burst (RFC6958)
   * @param burstLossCount The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   * @param burstDiscardCount The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   * @param burstLossRate The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param burstDiscardRate The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapLossRate The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapDiscardRate The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param voiceActivityFlag Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
   * @param lastPacketReceivedTimestamp Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   * @param averageRtcpInterval The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   * @param headerBytesReceived Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   * @param fecPacketsReceived Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
   * @param fecPacketsDiscarded Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param bytesReceived Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsFailedDecryption Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsDuplicated Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   * @param perDscpPacketsReceived Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   * @param nackCount Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   * @param totalProcessingDelay Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   * @param estimatedPlayoutTimestamp Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
   * @param jitterBufferDelay Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   * @param jitterBufferEmittedCount Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   * @param decoderImplementation Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
   * @param packetsSent Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   * @param bytesSent Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   * @param remoteTimestamp Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   * @param reportsSent Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   * @param ended Flag represents if the receiver ended the media stream track or not.
   * @param payloadType The type of the payload the RTP packet SSRC belongs to
   * @param mimeType the MIME type of the codec (e.g.: video/vp8)
   * @param clockRate The negotiated clock rate the RTP timestamp is generated of
   * @param channels The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   * @param sdpFmtpLine The a=fmtp line in the SDP corresponding to the codec
   * @param framesDropped Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
   * @param partialFramesLost Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
   * @param fullFramesLost Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
   * @param framesDecoded Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
   * @param keyFramesDecoded Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
   * @param frameWidth Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
   * @param frameHeight Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
   * @param frameBitDepth Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   * @param framesPerSecond Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   * @param qpSum Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
   * @param totalDecodeTime Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
   * @param totalInterFrameDelay Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
   * @param totalSquaredInterFrameDelay Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
   * @param firCount Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param pliCount Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param sliCount Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   * @param framesReceived Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
   * @param rid Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
   * @param lastPacketSentTimestamp Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
   * @param headerBytesSent Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   * @param packetsDiscardedOnSend Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   * @param bytesDiscardedOnSend Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   * @param fecPacketsSent Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   * @param retransmittedPacketsSent Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   * @param retransmittedBytesSent Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
   * @param targetBitrate Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
   * @param totalEncodedBytesTarget Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   * @param totalSamplesSent Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
   * @param samplesEncodedWithSilk Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
   * @param samplesEncodedWithCelt Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
   * @param totalPacketSendDelay Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   * @param perDscpPacketsSent Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   * @param encoderImplementation Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
   * @param roundTripTime Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   * @param totalRoundTripTime Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
   * @param fractionLost Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
   * @param reportsReceived Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
   * @param roundTripTimeMeasurements Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
   * @param relayedSource Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   * @param audioLevel Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
   * @param totalAudioEnergy Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
   * @param totalSamplesDuration Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
   * @param echoReturnLoss Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
   * @param echoReturnLossEnhancement Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
   * @param framesSent Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
   * @param hugeFramesSent Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
   * @param framesEncoded Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
   * @param keyFramesEncoded Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
   * @param framesDiscardedOnSend Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
   * @param totalEncodeTime Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
   * @param qualityLimitationDurationCPU Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
   * @param qualityLimitationDurationNone Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
   * @param qualityLimitationDurationBandwidth Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
   * @param qualityLimitationDurationOther Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
   * @param qualityLimitationReason Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
   * @param qualityLimitationResolutionChanges Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
   * @param encodedFrameWidth Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
   * @param encodedFrameHeight Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
   * @param encodedFrameBitDepth Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   * @param encodedFramesPerSecond Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   */
  public MediaTrackReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String label, java.lang.String trackId, java.lang.String rtpStreamId, java.lang.String remoteTrackId, java.lang.String remoteUserId, java.lang.String remoteClientId, java.lang.String remotePeerConnectionId, java.lang.Integer sampleSeq, java.lang.Long ssrc, java.lang.Integer packetsReceived, java.lang.Integer packetsLost, java.lang.Double jitter, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRepaired, java.lang.Integer burstPacketsLost, java.lang.Integer burstPacketsDiscarded, java.lang.Integer burstLossCount, java.lang.Integer burstDiscardCount, java.lang.Double burstLossRate, java.lang.Double burstDiscardRate, java.lang.Double gapLossRate, java.lang.Double gapDiscardRate, java.lang.Boolean voiceActivityFlag, java.lang.Double lastPacketReceivedTimestamp, java.lang.Double averageRtcpInterval, java.lang.Long headerBytesReceived, java.lang.Integer fecPacketsReceived, java.lang.Integer fecPacketsDiscarded, java.lang.Long bytesReceived, java.lang.Integer packetsFailedDecryption, java.lang.Integer packetsDuplicated, java.lang.Double perDscpPacketsReceived, java.lang.Integer nackCount, java.lang.Double totalProcessingDelay, java.lang.Double estimatedPlayoutTimestamp, java.lang.Double jitterBufferDelay, java.lang.Integer jitterBufferEmittedCount, java.lang.String decoderImplementation, java.lang.Integer packetsSent, java.lang.Long bytesSent, java.lang.Double remoteTimestamp, java.lang.Integer reportsSent, java.lang.Boolean ended, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.Integer channels, java.lang.String sdpFmtpLine, java.lang.Integer framesDropped, java.lang.Double partialFramesLost, java.lang.Integer fullFramesLost, java.lang.Integer framesDecoded, java.lang.Integer keyFramesDecoded, java.lang.Integer frameWidth, java.lang.Integer frameHeight, java.lang.Integer frameBitDepth, java.lang.Double framesPerSecond, java.lang.Long qpSum, java.lang.Long totalDecodeTime, java.lang.Long totalInterFrameDelay, java.lang.Long totalSquaredInterFrameDelay, java.lang.Integer firCount, java.lang.Integer pliCount, java.lang.Integer sliCount, java.lang.Integer framesReceived, java.lang.String rid, java.lang.Long lastPacketSentTimestamp, java.lang.Long headerBytesSent, java.lang.Integer packetsDiscardedOnSend, java.lang.Long bytesDiscardedOnSend, java.lang.Integer fecPacketsSent, java.lang.Integer retransmittedPacketsSent, java.lang.Long retransmittedBytesSent, java.lang.Long targetBitrate, java.lang.Long totalEncodedBytesTarget, java.lang.Integer totalSamplesSent, java.lang.Integer samplesEncodedWithSilk, java.lang.Integer samplesEncodedWithCelt, java.lang.Double totalPacketSendDelay, java.lang.Double perDscpPacketsSent, java.lang.String encoderImplementation, java.lang.Double roundTripTime, java.lang.Double totalRoundTripTime, java.lang.Double fractionLost, java.lang.Integer reportsReceived, java.lang.Integer roundTripTimeMeasurements, java.lang.Boolean relayedSource, java.lang.Double audioLevel, java.lang.Double totalAudioEnergy, java.lang.Double totalSamplesDuration, java.lang.Double echoReturnLoss, java.lang.Double echoReturnLossEnhancement, java.lang.Integer framesSent, java.lang.Integer hugeFramesSent, java.lang.Integer framesEncoded, java.lang.Integer keyFramesEncoded, java.lang.Integer framesDiscardedOnSend, java.lang.Double totalEncodeTime, java.lang.Double qualityLimitationDurationCPU, java.lang.Double qualityLimitationDurationNone, java.lang.Double qualityLimitationDurationBandwidth, java.lang.Double qualityLimitationDurationOther, java.lang.String qualityLimitationReason, java.lang.Integer qualityLimitationResolutionChanges, java.lang.Integer encodedFrameWidth, java.lang.Integer encodedFrameHeight, java.lang.Integer encodedFrameBitDepth, java.lang.Double encodedFramesPerSecond) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.trackId = trackId;
    this.rtpStreamId = rtpStreamId;
    this.remoteTrackId = remoteTrackId;
    this.remoteUserId = remoteUserId;
    this.remoteClientId = remoteClientId;
    this.remotePeerConnectionId = remotePeerConnectionId;
    this.sampleSeq = sampleSeq;
    this.ssrc = ssrc;
    this.packetsReceived = packetsReceived;
    this.packetsLost = packetsLost;
    this.jitter = jitter;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.burstPacketsLost = burstPacketsLost;
    this.burstPacketsDiscarded = burstPacketsDiscarded;
    this.burstLossCount = burstLossCount;
    this.burstDiscardCount = burstDiscardCount;
    this.burstLossRate = burstLossRate;
    this.burstDiscardRate = burstDiscardRate;
    this.gapLossRate = gapLossRate;
    this.gapDiscardRate = gapDiscardRate;
    this.voiceActivityFlag = voiceActivityFlag;
    this.lastPacketReceivedTimestamp = lastPacketReceivedTimestamp;
    this.averageRtcpInterval = averageRtcpInterval;
    this.headerBytesReceived = headerBytesReceived;
    this.fecPacketsReceived = fecPacketsReceived;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.bytesReceived = bytesReceived;
    this.packetsFailedDecryption = packetsFailedDecryption;
    this.packetsDuplicated = packetsDuplicated;
    this.perDscpPacketsReceived = perDscpPacketsReceived;
    this.nackCount = nackCount;
    this.totalProcessingDelay = totalProcessingDelay;
    this.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;
    this.jitterBufferDelay = jitterBufferDelay;
    this.jitterBufferEmittedCount = jitterBufferEmittedCount;
    this.decoderImplementation = decoderImplementation;
    this.packetsSent = packetsSent;
    this.bytesSent = bytesSent;
    this.remoteTimestamp = remoteTimestamp;
    this.reportsSent = reportsSent;
    this.ended = ended;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.channels = channels;
    this.sdpFmtpLine = sdpFmtpLine;
    this.framesDropped = framesDropped;
    this.partialFramesLost = partialFramesLost;
    this.fullFramesLost = fullFramesLost;
    this.framesDecoded = framesDecoded;
    this.keyFramesDecoded = keyFramesDecoded;
    this.frameWidth = frameWidth;
    this.frameHeight = frameHeight;
    this.frameBitDepth = frameBitDepth;
    this.framesPerSecond = framesPerSecond;
    this.qpSum = qpSum;
    this.totalDecodeTime = totalDecodeTime;
    this.totalInterFrameDelay = totalInterFrameDelay;
    this.totalSquaredInterFrameDelay = totalSquaredInterFrameDelay;
    this.firCount = firCount;
    this.pliCount = pliCount;
    this.sliCount = sliCount;
    this.framesReceived = framesReceived;
    this.rid = rid;
    this.lastPacketSentTimestamp = lastPacketSentTimestamp;
    this.headerBytesSent = headerBytesSent;
    this.packetsDiscardedOnSend = packetsDiscardedOnSend;
    this.bytesDiscardedOnSend = bytesDiscardedOnSend;
    this.fecPacketsSent = fecPacketsSent;
    this.retransmittedPacketsSent = retransmittedPacketsSent;
    this.retransmittedBytesSent = retransmittedBytesSent;
    this.targetBitrate = targetBitrate;
    this.totalEncodedBytesTarget = totalEncodedBytesTarget;
    this.totalSamplesSent = totalSamplesSent;
    this.samplesEncodedWithSilk = samplesEncodedWithSilk;
    this.samplesEncodedWithCelt = samplesEncodedWithCelt;
    this.totalPacketSendDelay = totalPacketSendDelay;
    this.perDscpPacketsSent = perDscpPacketsSent;
    this.encoderImplementation = encoderImplementation;
    this.roundTripTime = roundTripTime;
    this.totalRoundTripTime = totalRoundTripTime;
    this.fractionLost = fractionLost;
    this.reportsReceived = reportsReceived;
    this.roundTripTimeMeasurements = roundTripTimeMeasurements;
    this.relayedSource = relayedSource;
    this.audioLevel = audioLevel;
    this.totalAudioEnergy = totalAudioEnergy;
    this.totalSamplesDuration = totalSamplesDuration;
    this.echoReturnLoss = echoReturnLoss;
    this.echoReturnLossEnhancement = echoReturnLossEnhancement;
    this.framesSent = framesSent;
    this.hugeFramesSent = hugeFramesSent;
    this.framesEncoded = framesEncoded;
    this.keyFramesEncoded = keyFramesEncoded;
    this.framesDiscardedOnSend = framesDiscardedOnSend;
    this.totalEncodeTime = totalEncodeTime;
    this.qualityLimitationDurationCPU = qualityLimitationDurationCPU;
    this.qualityLimitationDurationNone = qualityLimitationDurationNone;
    this.qualityLimitationDurationBandwidth = qualityLimitationDurationBandwidth;
    this.qualityLimitationDurationOther = qualityLimitationDurationOther;
    this.qualityLimitationReason = qualityLimitationReason;
    this.qualityLimitationResolutionChanges = qualityLimitationResolutionChanges;
    this.encodedFrameWidth = encodedFrameWidth;
    this.encodedFrameHeight = encodedFrameHeight;
    this.encodedFrameBitDepth = encodedFrameBitDepth;
    this.encodedFramesPerSecond = encodedFramesPerSecond;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return label;
    case 10: return trackId;
    case 11: return rtpStreamId;
    case 12: return remoteTrackId;
    case 13: return remoteUserId;
    case 14: return remoteClientId;
    case 15: return remotePeerConnectionId;
    case 16: return sampleSeq;
    case 17: return ssrc;
    case 18: return packetsReceived;
    case 19: return packetsLost;
    case 20: return jitter;
    case 21: return packetsDiscarded;
    case 22: return packetsRepaired;
    case 23: return burstPacketsLost;
    case 24: return burstPacketsDiscarded;
    case 25: return burstLossCount;
    case 26: return burstDiscardCount;
    case 27: return burstLossRate;
    case 28: return burstDiscardRate;
    case 29: return gapLossRate;
    case 30: return gapDiscardRate;
    case 31: return voiceActivityFlag;
    case 32: return lastPacketReceivedTimestamp;
    case 33: return averageRtcpInterval;
    case 34: return headerBytesReceived;
    case 35: return fecPacketsReceived;
    case 36: return fecPacketsDiscarded;
    case 37: return bytesReceived;
    case 38: return packetsFailedDecryption;
    case 39: return packetsDuplicated;
    case 40: return perDscpPacketsReceived;
    case 41: return nackCount;
    case 42: return totalProcessingDelay;
    case 43: return estimatedPlayoutTimestamp;
    case 44: return jitterBufferDelay;
    case 45: return jitterBufferEmittedCount;
    case 46: return decoderImplementation;
    case 47: return packetsSent;
    case 48: return bytesSent;
    case 49: return remoteTimestamp;
    case 50: return reportsSent;
    case 51: return ended;
    case 52: return payloadType;
    case 53: return mimeType;
    case 54: return clockRate;
    case 55: return channels;
    case 56: return sdpFmtpLine;
    case 57: return framesDropped;
    case 58: return partialFramesLost;
    case 59: return fullFramesLost;
    case 60: return framesDecoded;
    case 61: return keyFramesDecoded;
    case 62: return frameWidth;
    case 63: return frameHeight;
    case 64: return frameBitDepth;
    case 65: return framesPerSecond;
    case 66: return qpSum;
    case 67: return totalDecodeTime;
    case 68: return totalInterFrameDelay;
    case 69: return totalSquaredInterFrameDelay;
    case 70: return firCount;
    case 71: return pliCount;
    case 72: return sliCount;
    case 73: return framesReceived;
    case 74: return rid;
    case 75: return lastPacketSentTimestamp;
    case 76: return headerBytesSent;
    case 77: return packetsDiscardedOnSend;
    case 78: return bytesDiscardedOnSend;
    case 79: return fecPacketsSent;
    case 80: return retransmittedPacketsSent;
    case 81: return retransmittedBytesSent;
    case 82: return targetBitrate;
    case 83: return totalEncodedBytesTarget;
    case 84: return totalSamplesSent;
    case 85: return samplesEncodedWithSilk;
    case 86: return samplesEncodedWithCelt;
    case 87: return totalPacketSendDelay;
    case 88: return perDscpPacketsSent;
    case 89: return encoderImplementation;
    case 90: return roundTripTime;
    case 91: return totalRoundTripTime;
    case 92: return fractionLost;
    case 93: return reportsReceived;
    case 94: return roundTripTimeMeasurements;
    case 95: return relayedSource;
    case 96: return audioLevel;
    case 97: return totalAudioEnergy;
    case 98: return totalSamplesDuration;
    case 99: return echoReturnLoss;
    case 100: return echoReturnLossEnhancement;
    case 101: return framesSent;
    case 102: return hugeFramesSent;
    case 103: return framesEncoded;
    case 104: return keyFramesEncoded;
    case 105: return framesDiscardedOnSend;
    case 106: return totalEncodeTime;
    case 107: return qualityLimitationDurationCPU;
    case 108: return qualityLimitationDurationNone;
    case 109: return qualityLimitationDurationBandwidth;
    case 110: return qualityLimitationDurationOther;
    case 111: return qualityLimitationReason;
    case 112: return qualityLimitationResolutionChanges;
    case 113: return encodedFrameWidth;
    case 114: return encodedFrameHeight;
    case 115: return encodedFrameBitDepth;
    case 116: return encodedFramesPerSecond;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = (java.lang.String)value$; break;
    case 5: roomId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: userId = (java.lang.String)value$; break;
    case 8: peerConnectionId = (java.lang.String)value$; break;
    case 9: label = (java.lang.String)value$; break;
    case 10: trackId = (java.lang.String)value$; break;
    case 11: rtpStreamId = (java.lang.String)value$; break;
    case 12: remoteTrackId = (java.lang.String)value$; break;
    case 13: remoteUserId = (java.lang.String)value$; break;
    case 14: remoteClientId = (java.lang.String)value$; break;
    case 15: remotePeerConnectionId = (java.lang.String)value$; break;
    case 16: sampleSeq = (java.lang.Integer)value$; break;
    case 17: ssrc = (java.lang.Long)value$; break;
    case 18: packetsReceived = (java.lang.Integer)value$; break;
    case 19: packetsLost = (java.lang.Integer)value$; break;
    case 20: jitter = (java.lang.Double)value$; break;
    case 21: packetsDiscarded = (java.lang.Integer)value$; break;
    case 22: packetsRepaired = (java.lang.Integer)value$; break;
    case 23: burstPacketsLost = (java.lang.Integer)value$; break;
    case 24: burstPacketsDiscarded = (java.lang.Integer)value$; break;
    case 25: burstLossCount = (java.lang.Integer)value$; break;
    case 26: burstDiscardCount = (java.lang.Integer)value$; break;
    case 27: burstLossRate = (java.lang.Double)value$; break;
    case 28: burstDiscardRate = (java.lang.Double)value$; break;
    case 29: gapLossRate = (java.lang.Double)value$; break;
    case 30: gapDiscardRate = (java.lang.Double)value$; break;
    case 31: voiceActivityFlag = (java.lang.Boolean)value$; break;
    case 32: lastPacketReceivedTimestamp = (java.lang.Double)value$; break;
    case 33: averageRtcpInterval = (java.lang.Double)value$; break;
    case 34: headerBytesReceived = (java.lang.Long)value$; break;
    case 35: fecPacketsReceived = (java.lang.Integer)value$; break;
    case 36: fecPacketsDiscarded = (java.lang.Integer)value$; break;
    case 37: bytesReceived = (java.lang.Long)value$; break;
    case 38: packetsFailedDecryption = (java.lang.Integer)value$; break;
    case 39: packetsDuplicated = (java.lang.Integer)value$; break;
    case 40: perDscpPacketsReceived = (java.lang.Double)value$; break;
    case 41: nackCount = (java.lang.Integer)value$; break;
    case 42: totalProcessingDelay = (java.lang.Double)value$; break;
    case 43: estimatedPlayoutTimestamp = (java.lang.Double)value$; break;
    case 44: jitterBufferDelay = (java.lang.Double)value$; break;
    case 45: jitterBufferEmittedCount = (java.lang.Integer)value$; break;
    case 46: decoderImplementation = (java.lang.String)value$; break;
    case 47: packetsSent = (java.lang.Integer)value$; break;
    case 48: bytesSent = (java.lang.Long)value$; break;
    case 49: remoteTimestamp = (java.lang.Double)value$; break;
    case 50: reportsSent = (java.lang.Integer)value$; break;
    case 51: ended = (java.lang.Boolean)value$; break;
    case 52: payloadType = (java.lang.Integer)value$; break;
    case 53: mimeType = (java.lang.String)value$; break;
    case 54: clockRate = (java.lang.Long)value$; break;
    case 55: channels = (java.lang.Integer)value$; break;
    case 56: sdpFmtpLine = (java.lang.String)value$; break;
    case 57: framesDropped = (java.lang.Integer)value$; break;
    case 58: partialFramesLost = (java.lang.Double)value$; break;
    case 59: fullFramesLost = (java.lang.Integer)value$; break;
    case 60: framesDecoded = (java.lang.Integer)value$; break;
    case 61: keyFramesDecoded = (java.lang.Integer)value$; break;
    case 62: frameWidth = (java.lang.Integer)value$; break;
    case 63: frameHeight = (java.lang.Integer)value$; break;
    case 64: frameBitDepth = (java.lang.Integer)value$; break;
    case 65: framesPerSecond = (java.lang.Double)value$; break;
    case 66: qpSum = (java.lang.Long)value$; break;
    case 67: totalDecodeTime = (java.lang.Long)value$; break;
    case 68: totalInterFrameDelay = (java.lang.Long)value$; break;
    case 69: totalSquaredInterFrameDelay = (java.lang.Long)value$; break;
    case 70: firCount = (java.lang.Integer)value$; break;
    case 71: pliCount = (java.lang.Integer)value$; break;
    case 72: sliCount = (java.lang.Integer)value$; break;
    case 73: framesReceived = (java.lang.Integer)value$; break;
    case 74: rid = (java.lang.String)value$; break;
    case 75: lastPacketSentTimestamp = (java.lang.Long)value$; break;
    case 76: headerBytesSent = (java.lang.Long)value$; break;
    case 77: packetsDiscardedOnSend = (java.lang.Integer)value$; break;
    case 78: bytesDiscardedOnSend = (java.lang.Long)value$; break;
    case 79: fecPacketsSent = (java.lang.Integer)value$; break;
    case 80: retransmittedPacketsSent = (java.lang.Integer)value$; break;
    case 81: retransmittedBytesSent = (java.lang.Long)value$; break;
    case 82: targetBitrate = (java.lang.Long)value$; break;
    case 83: totalEncodedBytesTarget = (java.lang.Long)value$; break;
    case 84: totalSamplesSent = (java.lang.Integer)value$; break;
    case 85: samplesEncodedWithSilk = (java.lang.Integer)value$; break;
    case 86: samplesEncodedWithCelt = (java.lang.Integer)value$; break;
    case 87: totalPacketSendDelay = (java.lang.Double)value$; break;
    case 88: perDscpPacketsSent = (java.lang.Double)value$; break;
    case 89: encoderImplementation = (java.lang.String)value$; break;
    case 90: roundTripTime = (java.lang.Double)value$; break;
    case 91: totalRoundTripTime = (java.lang.Double)value$; break;
    case 92: fractionLost = (java.lang.Double)value$; break;
    case 93: reportsReceived = (java.lang.Integer)value$; break;
    case 94: roundTripTimeMeasurements = (java.lang.Integer)value$; break;
    case 95: relayedSource = (java.lang.Boolean)value$; break;
    case 96: audioLevel = (java.lang.Double)value$; break;
    case 97: totalAudioEnergy = (java.lang.Double)value$; break;
    case 98: totalSamplesDuration = (java.lang.Double)value$; break;
    case 99: echoReturnLoss = (java.lang.Double)value$; break;
    case 100: echoReturnLossEnhancement = (java.lang.Double)value$; break;
    case 101: framesSent = (java.lang.Integer)value$; break;
    case 102: hugeFramesSent = (java.lang.Integer)value$; break;
    case 103: framesEncoded = (java.lang.Integer)value$; break;
    case 104: keyFramesEncoded = (java.lang.Integer)value$; break;
    case 105: framesDiscardedOnSend = (java.lang.Integer)value$; break;
    case 106: totalEncodeTime = (java.lang.Double)value$; break;
    case 107: qualityLimitationDurationCPU = (java.lang.Double)value$; break;
    case 108: qualityLimitationDurationNone = (java.lang.Double)value$; break;
    case 109: qualityLimitationDurationBandwidth = (java.lang.Double)value$; break;
    case 110: qualityLimitationDurationOther = (java.lang.Double)value$; break;
    case 111: qualityLimitationReason = (java.lang.String)value$; break;
    case 112: qualityLimitationResolutionChanges = (java.lang.Integer)value$; break;
    case 113: encodedFrameWidth = (java.lang.Integer)value$; break;
    case 114: encodedFrameHeight = (java.lang.Integer)value$; break;
    case 115: encodedFrameBitDepth = (java.lang.Integer)value$; break;
    case 116: encodedFramesPerSecond = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is labeled with
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track
   */
  public java.lang.String getTrackId() {
    return trackId;
  }


  /**
   * Gets the value of the 'rtpStreamId' field.
   * @return The id of the RTP stream connected to a remote media unit (such as an SFU)
   */
  public java.lang.String getRtpStreamId() {
    return rtpStreamId;
  }


  /**
   * Gets the value of the 'remoteTrackId' field.
   * @return Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
   */
  public java.lang.String getRemoteTrackId() {
    return remoteTrackId;
  }


  /**
   * Gets the value of the 'remoteUserId' field.
   * @return Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   */
  public java.lang.String getRemoteUserId() {
    return remoteUserId;
  }


  /**
   * Gets the value of the 'remoteClientId' field.
   * @return Only For Inbound Media Track Reports
The observer matched remote client Id
   */
  public java.lang.String getRemoteClientId() {
    return remoteClientId;
  }


  /**
   * Gets the value of the 'remotePeerConnectionId' field.
   * @return Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
   */
  public java.lang.String getRemotePeerConnectionId() {
    return remotePeerConnectionId;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'ssrc' field.
   * @return The RTP SSRC field
   */
  public java.lang.Long getSsrc() {
    return ssrc;
  }


  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }


  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of bytes received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }


  /**
   * Gets the value of the 'jitter' field.
   * @return The corresponded synchronization source reported jitter
   */
  public java.lang.Double getJitter() {
    return jitter;
  }


  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }


  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsRepaired() {
    return packetsRepaired;
  }


  /**
   * Gets the value of the 'burstPacketsLost' field.
   * @return The total number of packets lost in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsLost() {
    return burstPacketsLost;
  }


  /**
   * Gets the value of the 'burstPacketsDiscarded' field.
   * @return The total number of packets discarded in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsDiscarded() {
    return burstPacketsDiscarded;
  }


  /**
   * Gets the value of the 'burstLossCount' field.
   * @return The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   */
  public java.lang.Integer getBurstLossCount() {
    return burstLossCount;
  }


  /**
   * Gets the value of the 'burstDiscardCount' field.
   * @return The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   */
  public java.lang.Integer getBurstDiscardCount() {
    return burstDiscardCount;
  }


  /**
   * Gets the value of the 'burstLossRate' field.
   * @return The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstLossRate() {
    return burstLossRate;
  }


  /**
   * Gets the value of the 'burstDiscardRate' field.
   * @return The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstDiscardRate() {
    return burstDiscardRate;
  }


  /**
   * Gets the value of the 'gapLossRate' field.
   * @return The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapLossRate() {
    return gapLossRate;
  }


  /**
   * Gets the value of the 'gapDiscardRate' field.
   * @return The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapDiscardRate() {
    return gapDiscardRate;
  }


  /**
   * Gets the value of the 'voiceActivityFlag' field.
   * @return Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
   */
  public java.lang.Boolean getVoiceActivityFlag() {
    return voiceActivityFlag;
  }


  /**
   * Gets the value of the 'lastPacketReceivedTimestamp' field.
   * @return Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Double getLastPacketReceivedTimestamp() {
    return lastPacketReceivedTimestamp;
  }


  /**
   * Gets the value of the 'averageRtcpInterval' field.
   * @return The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getAverageRtcpInterval() {
    return averageRtcpInterval;
  }


  /**
   * Gets the value of the 'headerBytesReceived' field.
   * @return Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getHeaderBytesReceived() {
    return headerBytesReceived;
  }


  /**
   * Gets the value of the 'fecPacketsReceived' field.
   * @return Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFecPacketsReceived() {
    return fecPacketsReceived;
  }


  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Gets the value of the 'packetsFailedDecryption' field.
   * @return Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Integer getPacketsFailedDecryption() {
    return packetsFailedDecryption;
  }


  /**
   * Gets the value of the 'packetsDuplicated' field.
   * @return Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   */
  public java.lang.Integer getPacketsDuplicated() {
    return packetsDuplicated;
  }


  /**
   * Gets the value of the 'perDscpPacketsReceived' field.
   * @return Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getPerDscpPacketsReceived() {
    return perDscpPacketsReceived;
  }


  /**
   * Gets the value of the 'nackCount' field.
   * @return Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }


  /**
   * Gets the value of the 'totalProcessingDelay' field.
   * @return Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   */
  public java.lang.Double getTotalProcessingDelay() {
    return totalProcessingDelay;
  }


  /**
   * Gets the value of the 'estimatedPlayoutTimestamp' field.
   * @return Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
   */
  public java.lang.Double getEstimatedPlayoutTimestamp() {
    return estimatedPlayoutTimestamp;
  }


  /**
   * Gets the value of the 'jitterBufferDelay' field.
   * @return Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   */
  public java.lang.Double getJitterBufferDelay() {
    return jitterBufferDelay;
  }


  /**
   * Gets the value of the 'jitterBufferEmittedCount' field.
   * @return Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getJitterBufferEmittedCount() {
    return jitterBufferEmittedCount;
  }


  /**
   * Gets the value of the 'decoderImplementation' field.
   * @return Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
   */
  public java.lang.String getDecoderImplementation() {
    return decoderImplementation;
  }


  /**
   * Gets the value of the 'packetsSent' field.
   * @return Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'remoteTimestamp' field.
   * @return Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   */
  public java.lang.Double getRemoteTimestamp() {
    return remoteTimestamp;
  }


  /**
   * Gets the value of the 'reportsSent' field.
   * @return Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   */
  public java.lang.Integer getReportsSent() {
    return reportsSent;
  }


  /**
   * Gets the value of the 'ended' field.
   * @return Flag represents if the receiver ended the media stream track or not.
   */
  public java.lang.Boolean getEnded() {
    return ended;
  }


  /**
   * Gets the value of the 'payloadType' field.
   * @return The type of the payload the RTP packet SSRC belongs to
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }


  /**
   * Gets the value of the 'mimeType' field.
   * @return the MIME type of the codec (e.g.: video/vp8)
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }


  /**
   * Gets the value of the 'clockRate' field.
   * @return The negotiated clock rate the RTP timestamp is generated of
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }


  /**
   * Gets the value of the 'channels' field.
   * @return The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   */
  public java.lang.Integer getChannels() {
    return channels;
  }


  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The a=fmtp line in the SDP corresponding to the codec
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }


  /**
   * Gets the value of the 'framesDropped' field.
   * @return Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
   */
  public java.lang.Integer getFramesDropped() {
    return framesDropped;
  }


  /**
   * Gets the value of the 'partialFramesLost' field.
   * @return Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
   */
  public java.lang.Double getPartialFramesLost() {
    return partialFramesLost;
  }


  /**
   * Gets the value of the 'fullFramesLost' field.
   * @return Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
   */
  public java.lang.Integer getFullFramesLost() {
    return fullFramesLost;
  }


  /**
   * Gets the value of the 'framesDecoded' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFramesDecoded() {
    return framesDecoded;
  }


  /**
   * Gets the value of the 'keyFramesDecoded' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getKeyFramesDecoded() {
    return keyFramesDecoded;
  }


  /**
   * Gets the value of the 'frameWidth' field.
   * @return Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFrameWidth() {
    return frameWidth;
  }


  /**
   * Gets the value of the 'frameHeight' field.
   * @return Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFrameHeight() {
    return frameHeight;
  }


  /**
   * Gets the value of the 'frameBitDepth' field.
   * @return Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFrameBitDepth() {
    return frameBitDepth;
  }


  /**
   * Gets the value of the 'framesPerSecond' field.
   * @return Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Double getFramesPerSecond() {
    return framesPerSecond;
  }


  /**
   * Gets the value of the 'qpSum' field.
   * @return Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
   */
  public java.lang.Long getQpSum() {
    return qpSum;
  }


  /**
   * Gets the value of the 'totalDecodeTime' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
   */
  public java.lang.Long getTotalDecodeTime() {
    return totalDecodeTime;
  }


  /**
   * Gets the value of the 'totalInterFrameDelay' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
   */
  public java.lang.Long getTotalInterFrameDelay() {
    return totalInterFrameDelay;
  }


  /**
   * Gets the value of the 'totalSquaredInterFrameDelay' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
   */
  public java.lang.Long getTotalSquaredInterFrameDelay() {
    return totalSquaredInterFrameDelay;
  }


  /**
   * Gets the value of the 'firCount' field.
   * @return Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }


  /**
   * Gets the value of the 'pliCount' field.
   * @return Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }


  /**
   * Gets the value of the 'sliCount' field.
   * @return Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getSliCount() {
    return sliCount;
  }


  /**
   * Gets the value of the 'framesReceived' field.
   * @return Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getFramesReceived() {
    return framesReceived;
  }


  /**
   * Gets the value of the 'rid' field.
   * @return Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
   */
  public java.lang.String getRid() {
    return rid;
  }


  /**
   * Gets the value of the 'lastPacketSentTimestamp' field.
   * @return Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
   */
  public java.lang.Long getLastPacketSentTimestamp() {
    return lastPacketSentTimestamp;
  }


  /**
   * Gets the value of the 'headerBytesSent' field.
   * @return Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getHeaderBytesSent() {
    return headerBytesSent;
  }


  /**
   * Gets the value of the 'packetsDiscardedOnSend' field.
   * @return Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getPacketsDiscardedOnSend() {
    return packetsDiscardedOnSend;
  }


  /**
   * Gets the value of the 'bytesDiscardedOnSend' field.
   * @return Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getBytesDiscardedOnSend() {
    return bytesDiscardedOnSend;
  }


  /**
   * Gets the value of the 'fecPacketsSent' field.
   * @return Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFecPacketsSent() {
    return fecPacketsSent;
  }


  /**
   * Gets the value of the 'retransmittedPacketsSent' field.
   * @return Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
   */
  public java.lang.Integer getRetransmittedPacketsSent() {
    return retransmittedPacketsSent;
  }


  /**
   * Gets the value of the 'retransmittedBytesSent' field.
   * @return Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
   */
  public java.lang.Long getRetransmittedBytesSent() {
    return retransmittedBytesSent;
  }


  /**
   * Gets the value of the 'targetBitrate' field.
   * @return Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
   */
  public java.lang.Long getTargetBitrate() {
    return targetBitrate;
  }


  /**
   * Gets the value of the 'totalEncodedBytesTarget' field.
   * @return Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
   */
  public java.lang.Long getTotalEncodedBytesTarget() {
    return totalEncodedBytesTarget;
  }


  /**
   * Gets the value of the 'totalSamplesSent' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
   */
  public java.lang.Integer getTotalSamplesSent() {
    return totalSamplesSent;
  }


  /**
   * Gets the value of the 'samplesEncodedWithSilk' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
   */
  public java.lang.Integer getSamplesEncodedWithSilk() {
    return samplesEncodedWithSilk;
  }


  /**
   * Gets the value of the 'samplesEncodedWithCelt' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
   */
  public java.lang.Integer getSamplesEncodedWithCelt() {
    return samplesEncodedWithCelt;
  }


  /**
   * Gets the value of the 'totalPacketSendDelay' field.
   * @return Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
   */
  public java.lang.Double getTotalPacketSendDelay() {
    return totalPacketSendDelay;
  }


  /**
   * Gets the value of the 'perDscpPacketsSent' field.
   * @return Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getPerDscpPacketsSent() {
    return perDscpPacketsSent;
  }


  /**
   * Gets the value of the 'encoderImplementation' field.
   * @return Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
   */
  public java.lang.String getEncoderImplementation() {
    return encoderImplementation;
  }


  /**
   * Gets the value of the 'roundTripTime' field.
   * @return Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
   */
  public java.lang.Double getRoundTripTime() {
    return roundTripTime;
  }


  /**
   * Gets the value of the 'totalRoundTripTime' field.
   * @return Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
   */
  public java.lang.Double getTotalRoundTripTime() {
    return totalRoundTripTime;
  }


  /**
   * Gets the value of the 'fractionLost' field.
   * @return Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
   */
  public java.lang.Double getFractionLost() {
    return fractionLost;
  }


  /**
   * Gets the value of the 'reportsReceived' field.
   * @return Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
   */
  public java.lang.Integer getReportsReceived() {
    return reportsReceived;
  }


  /**
   * Gets the value of the 'roundTripTimeMeasurements' field.
   * @return Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
   */
  public java.lang.Integer getRoundTripTimeMeasurements() {
    return roundTripTimeMeasurements;
  }


  /**
   * Gets the value of the 'relayedSource' field.
   * @return Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
   */
  public java.lang.Boolean getRelayedSource() {
    return relayedSource;
  }


  /**
   * Gets the value of the 'audioLevel' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
   */
  public java.lang.Double getAudioLevel() {
    return audioLevel;
  }


  /**
   * Gets the value of the 'totalAudioEnergy' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
   */
  public java.lang.Double getTotalAudioEnergy() {
    return totalAudioEnergy;
  }


  /**
   * Gets the value of the 'totalSamplesDuration' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
   */
  public java.lang.Double getTotalSamplesDuration() {
    return totalSamplesDuration;
  }


  /**
   * Gets the value of the 'echoReturnLoss' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
   */
  public java.lang.Double getEchoReturnLoss() {
    return echoReturnLoss;
  }


  /**
   * Gets the value of the 'echoReturnLossEnhancement' field.
   * @return Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
   */
  public java.lang.Double getEchoReturnLossEnhancement() {
    return echoReturnLossEnhancement;
  }


  /**
   * Gets the value of the 'framesSent' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
   */
  public java.lang.Integer getFramesSent() {
    return framesSent;
  }


  /**
   * Gets the value of the 'hugeFramesSent' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
   */
  public java.lang.Integer getHugeFramesSent() {
    return hugeFramesSent;
  }


  /**
   * Gets the value of the 'framesEncoded' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
   */
  public java.lang.Integer getFramesEncoded() {
    return framesEncoded;
  }


  /**
   * Gets the value of the 'keyFramesEncoded' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
   */
  public java.lang.Integer getKeyFramesEncoded() {
    return keyFramesEncoded;
  }


  /**
   * Gets the value of the 'framesDiscardedOnSend' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
   */
  public java.lang.Integer getFramesDiscardedOnSend() {
    return framesDiscardedOnSend;
  }


  /**
   * Gets the value of the 'totalEncodeTime' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
   */
  public java.lang.Double getTotalEncodeTime() {
    return totalEncodeTime;
  }


  /**
   * Gets the value of the 'qualityLimitationDurationCPU' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
   */
  public java.lang.Double getQualityLimitationDurationCPU() {
    return qualityLimitationDurationCPU;
  }


  /**
   * Gets the value of the 'qualityLimitationDurationNone' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
   */
  public java.lang.Double getQualityLimitationDurationNone() {
    return qualityLimitationDurationNone;
  }


  /**
   * Gets the value of the 'qualityLimitationDurationBandwidth' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
   */
  public java.lang.Double getQualityLimitationDurationBandwidth() {
    return qualityLimitationDurationBandwidth;
  }


  /**
   * Gets the value of the 'qualityLimitationDurationOther' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
   */
  public java.lang.Double getQualityLimitationDurationOther() {
    return qualityLimitationDurationOther;
  }


  /**
   * Gets the value of the 'qualityLimitationReason' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
   */
  public java.lang.String getQualityLimitationReason() {
    return qualityLimitationReason;
  }


  /**
   * Gets the value of the 'qualityLimitationResolutionChanges' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getQualityLimitationResolutionChanges() {
    return qualityLimitationResolutionChanges;
  }


  /**
   * Gets the value of the 'encodedFrameWidth' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameWidth() {
    return encodedFrameWidth;
  }


  /**
   * Gets the value of the 'encodedFrameHeight' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameHeight() {
    return encodedFrameHeight;
  }


  /**
   * Gets the value of the 'encodedFrameBitDepth' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getEncodedFrameBitDepth() {
    return encodedFrameBitDepth;
  }


  /**
   * Gets the value of the 'encodedFramesPerSecond' field.
   * @return Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Double getEncodedFramesPerSecond() {
    return encodedFramesPerSecond;
  }


  /**
   * Creates a new MediaTrackReport RecordBuilder.
   * @return A new MediaTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder();
  }

  /**
   * Creates a new MediaTrackReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MediaTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder other) {
    return new org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder(other);
  }

  /**
   * Creates a new MediaTrackReport RecordBuilder by copying an existing MediaTrackReport instance.
   * @param other The existing instance to copy.
   * @return A new MediaTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.MediaTrackReport other) {
    return new org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder(other);
  }

  /**
   * RecordBuilder for MediaTrackReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MediaTrackReport>
    implements org.apache.avro.data.RecordBuilder<MediaTrackReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label the peer connection is labeled with */
    private java.lang.String label;
    /** The id of the track */
    private java.lang.String trackId;
    /** The id of the RTP stream connected to a remote media unit (such as an SFU) */
    private java.lang.String rtpStreamId;
    /** Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from */
    private java.lang.String remoteTrackId;
    /** Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
    private java.lang.String remoteUserId;
    /** Only For Inbound Media Track Reports
The observer matched remote client Id */
    private java.lang.String remoteClientId;
    /** Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id */
    private java.lang.String remotePeerConnectionId;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The RTP SSRC field */
    private long ssrc;
    /** The total number of packets received on the corresponded synchronization source */
    private java.lang.Integer packetsReceived;
    /** The total number of bytes received on the corresponded synchronization source */
    private java.lang.Integer packetsLost;
    /** The corresponded synchronization source reported jitter */
    private java.lang.Double jitter;
    /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
    private java.lang.Integer packetsRepaired;
    /** The total number of packets lost in burst (RFC6958) */
    private java.lang.Integer burstPacketsLost;
    /** The total number of packets discarded in burst (RFC6958) */
    private java.lang.Integer burstPacketsDiscarded;
    /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
    private java.lang.Integer burstLossCount;
    /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
    private java.lang.Integer burstDiscardCount;
    /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstLossRate;
    /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstDiscardRate;
    /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapLossRate;
    /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapDiscardRate;
    /** Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header */
    private java.lang.Boolean voiceActivityFlag;
    /** Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
    private java.lang.Double lastPacketReceivedTimestamp;
    /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
    private java.lang.Double averageRtcpInterval;
    /** Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
    private java.lang.Long headerBytesReceived;
    /** Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Integer fecPacketsReceived;
    /** Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Integer fecPacketsDiscarded;
    /** Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Long bytesReceived;
    /** Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Integer packetsFailedDecryption;
    /** Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
    private java.lang.Integer packetsDuplicated;
    /** Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Double perDscpPacketsReceived;
    /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
    private java.lang.Integer nackCount;
    /** Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
    private java.lang.Double totalProcessingDelay;
    /** Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source */
    private java.lang.Double estimatedPlayoutTimestamp;
    /** Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
    private java.lang.Double jitterBufferDelay;
    /** Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
    private java.lang.Integer jitterBufferEmittedCount;
    /** Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library */
    private java.lang.String decoderImplementation;
    /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
    private java.lang.Integer packetsSent;
    /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
    private java.lang.Long bytesSent;
    /** Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
    private java.lang.Double remoteTimestamp;
    /** Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
    private java.lang.Integer reportsSent;
    /** Flag represents if the receiver ended the media stream track or not. */
    private java.lang.Boolean ended;
    /** The type of the payload the RTP packet SSRC belongs to */
    private java.lang.Integer payloadType;
    /** the MIME type of the codec (e.g.: video/vp8) */
    private java.lang.String mimeType;
    /** The negotiated clock rate the RTP timestamp is generated of */
    private java.lang.Long clockRate;
    /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
    private java.lang.Integer channels;
    /** The a=fmtp line in the SDP corresponding to the codec */
    private java.lang.String sdpFmtpLine;
    /** Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source */
    private java.lang.Integer framesDropped;
    /** Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source */
    private java.lang.Double partialFramesLost;
    /** Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source */
    private java.lang.Integer fullFramesLost;
    /** Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc) */
    private java.lang.Integer framesDecoded;
    /** Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer keyFramesDecoded;
    /** Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer frameWidth;
    /** Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer frameHeight;
    /** Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer frameBitDepth;
    /** Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
    private java.lang.Double framesPerSecond;
    /** Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc) */
    private java.lang.Long qpSum;
    /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc) */
    private java.lang.Long totalDecodeTime;
    /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc) */
    private java.lang.Long totalInterFrameDelay;
    /** Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays */
    private java.lang.Long totalSquaredInterFrameDelay;
    /** Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private java.lang.Integer firCount;
    /** Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private java.lang.Integer pliCount;
    /** Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc) */
    private java.lang.Integer sliCount;
    /** Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer framesReceived;
    /** Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source */
    private java.lang.String rid;
    /** Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms) */
    private java.lang.Long lastPacketSentTimestamp;
    /** Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc) */
    private java.lang.Long headerBytesSent;
    /** Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Integer packetsDiscardedOnSend;
    /** Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc) */
    private java.lang.Long bytesDiscardedOnSend;
    /** Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Integer fecPacketsSent;
    /** Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc). */
    private java.lang.Integer retransmittedPacketsSent;
    /** Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc). */
    private java.lang.Long retransmittedBytesSent;
    /** Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second. */
    private java.lang.Long targetBitrate;
    /** Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets */
    private java.lang.Long totalEncodedBytesTarget;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source */
    private java.lang.Integer totalSamplesSent;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source */
    private java.lang.Integer samplesEncodedWithSilk;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source */
    private java.lang.Integer samplesEncodedWithCelt;
    /** Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source */
    private java.lang.Double totalPacketSendDelay;
    /** Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc) */
    private java.lang.Double perDscpPacketsSent;
    /** Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library */
    private java.lang.String encoderImplementation;
    /** Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source */
    private java.lang.Double roundTripTime;
    /** Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source */
    private java.lang.Double totalRoundTripTime;
    /** Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source */
    private java.lang.Double fractionLost;
    /** Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source */
    private java.lang.Integer reportsReceived;
    /** Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source */
    private java.lang.Integer roundTripTimeMeasurements;
    /** Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version) */
    private java.lang.Boolean relayedSource;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source */
    private java.lang.Double audioLevel;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source */
    private java.lang.Double totalAudioEnergy;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds */
    private java.lang.Double totalSamplesDuration;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source. */
    private java.lang.Double echoReturnLoss;
    /** Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source. */
    private java.lang.Double echoReturnLossEnhancement;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source */
    private java.lang.Integer framesSent;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source */
    private java.lang.Integer hugeFramesSent;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source */
    private java.lang.Integer framesEncoded;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source */
    private java.lang.Integer keyFramesEncoded;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source */
    private java.lang.Integer framesDiscardedOnSend;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source */
    private java.lang.Double totalEncodeTime;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU */
    private java.lang.Double qualityLimitationDurationCPU;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state */
    private java.lang.Double qualityLimitationDurationNone;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth */
    private java.lang.Double qualityLimitationDurationBandwidth;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor */
    private java.lang.Double qualityLimitationDurationOther;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited */
    private java.lang.String qualityLimitationReason;
    /** Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc) */
    private java.lang.Integer qualityLimitationResolutionChanges;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameWidth;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameHeight;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc) */
    private java.lang.Integer encodedFrameBitDepth;
    /** Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc) */
    private java.lang.Double encodedFramesPerSecond;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[11].schema(), other.rtpStreamId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteTrackId)) {
        this.remoteTrackId = data().deepCopy(fields()[12].schema(), other.remoteTrackId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[13].schema(), other.remoteUserId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[14].schema(), other.remoteClientId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[15].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[16].schema(), other.sampleSeq);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[17].schema(), other.ssrc);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[18].schema(), other.packetsReceived);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[19].schema(), other.packetsLost);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.jitter)) {
        this.jitter = data().deepCopy(fields()[20].schema(), other.jitter);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[21].schema(), other.packetsDiscarded);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[22].schema(), other.packetsRepaired);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[23].schema(), other.burstPacketsLost);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[24].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[25].schema(), other.burstLossCount);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[26].schema(), other.burstDiscardCount);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[27].schema(), other.burstLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[28].schema(), other.burstDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[29].schema(), other.gapLossRate);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[30].schema(), other.gapDiscardRate);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[31].schema(), other.voiceActivityFlag);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[32].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[33].schema(), other.averageRtcpInterval);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[34].schema(), other.headerBytesReceived);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[35].schema(), other.fecPacketsReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[36].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[37].schema(), other.bytesReceived);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[38].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[39].schema(), other.packetsDuplicated);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[40].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[41].schema(), other.nackCount);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[42].schema(), other.totalProcessingDelay);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[43].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[44].schema(), other.jitterBufferDelay);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[45].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[46].schema(), other.decoderImplementation);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[47].schema(), other.packetsSent);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[48].schema(), other.bytesSent);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[49].schema(), other.remoteTimestamp);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[50].schema(), other.reportsSent);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.ended)) {
        this.ended = data().deepCopy(fields()[51].schema(), other.ended);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[52].schema(), other.payloadType);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[53].schema(), other.mimeType);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[54].schema(), other.clockRate);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.channels)) {
        this.channels = data().deepCopy(fields()[55].schema(), other.channels);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[56].schema(), other.sdpFmtpLine);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[57].schema(), other.framesDropped);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[58].schema(), other.partialFramesLost);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[59].schema(), other.fullFramesLost);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[60].schema(), other.framesDecoded);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[61].schema(), other.keyFramesDecoded);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[62].schema(), other.frameWidth);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[63].schema(), other.frameHeight);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[64].schema(), other.frameBitDepth);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[65].schema(), other.framesPerSecond);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[66].schema(), other.qpSum);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[67].schema(), other.totalDecodeTime);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[68].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[69].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.firCount)) {
        this.firCount = data().deepCopy(fields()[70].schema(), other.firCount);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[71].schema(), other.pliCount);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[72].schema(), other.sliCount);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[73].schema(), other.framesReceived);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.rid)) {
        this.rid = data().deepCopy(fields()[74].schema(), other.rid);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[75].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[76].schema(), other.headerBytesSent);
        fieldSetFlags()[76] = true;
      }
      if (isValidValue(fields()[77], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[77].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[78].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[79].schema(), other.fecPacketsSent);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[80].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[80] = true;
      }
      if (isValidValue(fields()[81], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[81].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[81] = true;
      }
      if (isValidValue(fields()[82], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[82].schema(), other.targetBitrate);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[83].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.totalSamplesSent)) {
        this.totalSamplesSent = data().deepCopy(fields()[84].schema(), other.totalSamplesSent);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.samplesEncodedWithSilk)) {
        this.samplesEncodedWithSilk = data().deepCopy(fields()[85].schema(), other.samplesEncodedWithSilk);
        fieldSetFlags()[85] = true;
      }
      if (isValidValue(fields()[86], other.samplesEncodedWithCelt)) {
        this.samplesEncodedWithCelt = data().deepCopy(fields()[86].schema(), other.samplesEncodedWithCelt);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[87].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[88].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[89].schema(), other.encoderImplementation);
        fieldSetFlags()[89] = true;
      }
      if (isValidValue(fields()[90], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[90].schema(), other.roundTripTime);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[91].schema(), other.totalRoundTripTime);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[92].schema(), other.fractionLost);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[93].schema(), other.reportsReceived);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[94].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[95].schema(), other.relayedSource);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[96].schema(), other.audioLevel);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[97].schema(), other.totalAudioEnergy);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[98].schema(), other.totalSamplesDuration);
        fieldSetFlags()[98] = true;
      }
      if (isValidValue(fields()[99], other.echoReturnLoss)) {
        this.echoReturnLoss = data().deepCopy(fields()[99].schema(), other.echoReturnLoss);
        fieldSetFlags()[99] = true;
      }
      if (isValidValue(fields()[100], other.echoReturnLossEnhancement)) {
        this.echoReturnLossEnhancement = data().deepCopy(fields()[100].schema(), other.echoReturnLossEnhancement);
        fieldSetFlags()[100] = true;
      }
      if (isValidValue(fields()[101], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[101].schema(), other.framesSent);
        fieldSetFlags()[101] = true;
      }
      if (isValidValue(fields()[102], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[102].schema(), other.hugeFramesSent);
        fieldSetFlags()[102] = true;
      }
      if (isValidValue(fields()[103], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[103].schema(), other.framesEncoded);
        fieldSetFlags()[103] = true;
      }
      if (isValidValue(fields()[104], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[104].schema(), other.keyFramesEncoded);
        fieldSetFlags()[104] = true;
      }
      if (isValidValue(fields()[105], other.framesDiscardedOnSend)) {
        this.framesDiscardedOnSend = data().deepCopy(fields()[105].schema(), other.framesDiscardedOnSend);
        fieldSetFlags()[105] = true;
      }
      if (isValidValue(fields()[106], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[106].schema(), other.totalEncodeTime);
        fieldSetFlags()[106] = true;
      }
      if (isValidValue(fields()[107], other.qualityLimitationDurationCPU)) {
        this.qualityLimitationDurationCPU = data().deepCopy(fields()[107].schema(), other.qualityLimitationDurationCPU);
        fieldSetFlags()[107] = true;
      }
      if (isValidValue(fields()[108], other.qualityLimitationDurationNone)) {
        this.qualityLimitationDurationNone = data().deepCopy(fields()[108].schema(), other.qualityLimitationDurationNone);
        fieldSetFlags()[108] = true;
      }
      if (isValidValue(fields()[109], other.qualityLimitationDurationBandwidth)) {
        this.qualityLimitationDurationBandwidth = data().deepCopy(fields()[109].schema(), other.qualityLimitationDurationBandwidth);
        fieldSetFlags()[109] = true;
      }
      if (isValidValue(fields()[110], other.qualityLimitationDurationOther)) {
        this.qualityLimitationDurationOther = data().deepCopy(fields()[110].schema(), other.qualityLimitationDurationOther);
        fieldSetFlags()[110] = true;
      }
      if (isValidValue(fields()[111], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[111].schema(), other.qualityLimitationReason);
        fieldSetFlags()[111] = true;
      }
      if (isValidValue(fields()[112], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[112].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[112] = true;
      }
      if (isValidValue(fields()[113], other.encodedFrameWidth)) {
        this.encodedFrameWidth = data().deepCopy(fields()[113].schema(), other.encodedFrameWidth);
        fieldSetFlags()[113] = true;
      }
      if (isValidValue(fields()[114], other.encodedFrameHeight)) {
        this.encodedFrameHeight = data().deepCopy(fields()[114].schema(), other.encodedFrameHeight);
        fieldSetFlags()[114] = true;
      }
      if (isValidValue(fields()[115], other.encodedFrameBitDepth)) {
        this.encodedFrameBitDepth = data().deepCopy(fields()[115].schema(), other.encodedFrameBitDepth);
        fieldSetFlags()[115] = true;
      }
      if (isValidValue(fields()[116], other.encodedFramesPerSecond)) {
        this.encodedFramesPerSecond = data().deepCopy(fields()[116].schema(), other.encodedFramesPerSecond);
        fieldSetFlags()[116] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MediaTrackReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.MediaTrackReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[11].schema(), other.rtpStreamId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteTrackId)) {
        this.remoteTrackId = data().deepCopy(fields()[12].schema(), other.remoteTrackId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[13].schema(), other.remoteUserId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[14].schema(), other.remoteClientId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[15].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[16].schema(), other.sampleSeq);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[17].schema(), other.ssrc);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[18].schema(), other.packetsReceived);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[19].schema(), other.packetsLost);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.jitter)) {
        this.jitter = data().deepCopy(fields()[20].schema(), other.jitter);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[21].schema(), other.packetsDiscarded);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[22].schema(), other.packetsRepaired);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[23].schema(), other.burstPacketsLost);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[24].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[25].schema(), other.burstLossCount);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[26].schema(), other.burstDiscardCount);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[27].schema(), other.burstLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[28].schema(), other.burstDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[29].schema(), other.gapLossRate);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[30].schema(), other.gapDiscardRate);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[31].schema(), other.voiceActivityFlag);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[32].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[33].schema(), other.averageRtcpInterval);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[34].schema(), other.headerBytesReceived);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[35].schema(), other.fecPacketsReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[36].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[37].schema(), other.bytesReceived);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[38].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[39].schema(), other.packetsDuplicated);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[40].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[41].schema(), other.nackCount);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[42].schema(), other.totalProcessingDelay);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[43].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[44].schema(), other.jitterBufferDelay);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[45].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[46].schema(), other.decoderImplementation);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[47].schema(), other.packetsSent);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[48].schema(), other.bytesSent);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[49].schema(), other.remoteTimestamp);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[50].schema(), other.reportsSent);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.ended)) {
        this.ended = data().deepCopy(fields()[51].schema(), other.ended);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[52].schema(), other.payloadType);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[53].schema(), other.mimeType);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[54].schema(), other.clockRate);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.channels)) {
        this.channels = data().deepCopy(fields()[55].schema(), other.channels);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[56].schema(), other.sdpFmtpLine);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.framesDropped)) {
        this.framesDropped = data().deepCopy(fields()[57].schema(), other.framesDropped);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.partialFramesLost)) {
        this.partialFramesLost = data().deepCopy(fields()[58].schema(), other.partialFramesLost);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.fullFramesLost)) {
        this.fullFramesLost = data().deepCopy(fields()[59].schema(), other.fullFramesLost);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[60].schema(), other.framesDecoded);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[61].schema(), other.keyFramesDecoded);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.frameWidth)) {
        this.frameWidth = data().deepCopy(fields()[62].schema(), other.frameWidth);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.frameHeight)) {
        this.frameHeight = data().deepCopy(fields()[63].schema(), other.frameHeight);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.frameBitDepth)) {
        this.frameBitDepth = data().deepCopy(fields()[64].schema(), other.frameBitDepth);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.framesPerSecond)) {
        this.framesPerSecond = data().deepCopy(fields()[65].schema(), other.framesPerSecond);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[66].schema(), other.qpSum);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[67].schema(), other.totalDecodeTime);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[68].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[69].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.firCount)) {
        this.firCount = data().deepCopy(fields()[70].schema(), other.firCount);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[71].schema(), other.pliCount);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[72].schema(), other.sliCount);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[73].schema(), other.framesReceived);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.rid)) {
        this.rid = data().deepCopy(fields()[74].schema(), other.rid);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.lastPacketSentTimestamp)) {
        this.lastPacketSentTimestamp = data().deepCopy(fields()[75].schema(), other.lastPacketSentTimestamp);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.headerBytesSent)) {
        this.headerBytesSent = data().deepCopy(fields()[76].schema(), other.headerBytesSent);
        fieldSetFlags()[76] = true;
      }
      if (isValidValue(fields()[77], other.packetsDiscardedOnSend)) {
        this.packetsDiscardedOnSend = data().deepCopy(fields()[77].schema(), other.packetsDiscardedOnSend);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.bytesDiscardedOnSend)) {
        this.bytesDiscardedOnSend = data().deepCopy(fields()[78].schema(), other.bytesDiscardedOnSend);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.fecPacketsSent)) {
        this.fecPacketsSent = data().deepCopy(fields()[79].schema(), other.fecPacketsSent);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.retransmittedPacketsSent)) {
        this.retransmittedPacketsSent = data().deepCopy(fields()[80].schema(), other.retransmittedPacketsSent);
        fieldSetFlags()[80] = true;
      }
      if (isValidValue(fields()[81], other.retransmittedBytesSent)) {
        this.retransmittedBytesSent = data().deepCopy(fields()[81].schema(), other.retransmittedBytesSent);
        fieldSetFlags()[81] = true;
      }
      if (isValidValue(fields()[82], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[82].schema(), other.targetBitrate);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.totalEncodedBytesTarget)) {
        this.totalEncodedBytesTarget = data().deepCopy(fields()[83].schema(), other.totalEncodedBytesTarget);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.totalSamplesSent)) {
        this.totalSamplesSent = data().deepCopy(fields()[84].schema(), other.totalSamplesSent);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.samplesEncodedWithSilk)) {
        this.samplesEncodedWithSilk = data().deepCopy(fields()[85].schema(), other.samplesEncodedWithSilk);
        fieldSetFlags()[85] = true;
      }
      if (isValidValue(fields()[86], other.samplesEncodedWithCelt)) {
        this.samplesEncodedWithCelt = data().deepCopy(fields()[86].schema(), other.samplesEncodedWithCelt);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.totalPacketSendDelay)) {
        this.totalPacketSendDelay = data().deepCopy(fields()[87].schema(), other.totalPacketSendDelay);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.perDscpPacketsSent)) {
        this.perDscpPacketsSent = data().deepCopy(fields()[88].schema(), other.perDscpPacketsSent);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.encoderImplementation)) {
        this.encoderImplementation = data().deepCopy(fields()[89].schema(), other.encoderImplementation);
        fieldSetFlags()[89] = true;
      }
      if (isValidValue(fields()[90], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[90].schema(), other.roundTripTime);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.totalRoundTripTime)) {
        this.totalRoundTripTime = data().deepCopy(fields()[91].schema(), other.totalRoundTripTime);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[92].schema(), other.fractionLost);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.reportsReceived)) {
        this.reportsReceived = data().deepCopy(fields()[93].schema(), other.reportsReceived);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.roundTripTimeMeasurements)) {
        this.roundTripTimeMeasurements = data().deepCopy(fields()[94].schema(), other.roundTripTimeMeasurements);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.relayedSource)) {
        this.relayedSource = data().deepCopy(fields()[95].schema(), other.relayedSource);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.audioLevel)) {
        this.audioLevel = data().deepCopy(fields()[96].schema(), other.audioLevel);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.totalAudioEnergy)) {
        this.totalAudioEnergy = data().deepCopy(fields()[97].schema(), other.totalAudioEnergy);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.totalSamplesDuration)) {
        this.totalSamplesDuration = data().deepCopy(fields()[98].schema(), other.totalSamplesDuration);
        fieldSetFlags()[98] = true;
      }
      if (isValidValue(fields()[99], other.echoReturnLoss)) {
        this.echoReturnLoss = data().deepCopy(fields()[99].schema(), other.echoReturnLoss);
        fieldSetFlags()[99] = true;
      }
      if (isValidValue(fields()[100], other.echoReturnLossEnhancement)) {
        this.echoReturnLossEnhancement = data().deepCopy(fields()[100].schema(), other.echoReturnLossEnhancement);
        fieldSetFlags()[100] = true;
      }
      if (isValidValue(fields()[101], other.framesSent)) {
        this.framesSent = data().deepCopy(fields()[101].schema(), other.framesSent);
        fieldSetFlags()[101] = true;
      }
      if (isValidValue(fields()[102], other.hugeFramesSent)) {
        this.hugeFramesSent = data().deepCopy(fields()[102].schema(), other.hugeFramesSent);
        fieldSetFlags()[102] = true;
      }
      if (isValidValue(fields()[103], other.framesEncoded)) {
        this.framesEncoded = data().deepCopy(fields()[103].schema(), other.framesEncoded);
        fieldSetFlags()[103] = true;
      }
      if (isValidValue(fields()[104], other.keyFramesEncoded)) {
        this.keyFramesEncoded = data().deepCopy(fields()[104].schema(), other.keyFramesEncoded);
        fieldSetFlags()[104] = true;
      }
      if (isValidValue(fields()[105], other.framesDiscardedOnSend)) {
        this.framesDiscardedOnSend = data().deepCopy(fields()[105].schema(), other.framesDiscardedOnSend);
        fieldSetFlags()[105] = true;
      }
      if (isValidValue(fields()[106], other.totalEncodeTime)) {
        this.totalEncodeTime = data().deepCopy(fields()[106].schema(), other.totalEncodeTime);
        fieldSetFlags()[106] = true;
      }
      if (isValidValue(fields()[107], other.qualityLimitationDurationCPU)) {
        this.qualityLimitationDurationCPU = data().deepCopy(fields()[107].schema(), other.qualityLimitationDurationCPU);
        fieldSetFlags()[107] = true;
      }
      if (isValidValue(fields()[108], other.qualityLimitationDurationNone)) {
        this.qualityLimitationDurationNone = data().deepCopy(fields()[108].schema(), other.qualityLimitationDurationNone);
        fieldSetFlags()[108] = true;
      }
      if (isValidValue(fields()[109], other.qualityLimitationDurationBandwidth)) {
        this.qualityLimitationDurationBandwidth = data().deepCopy(fields()[109].schema(), other.qualityLimitationDurationBandwidth);
        fieldSetFlags()[109] = true;
      }
      if (isValidValue(fields()[110], other.qualityLimitationDurationOther)) {
        this.qualityLimitationDurationOther = data().deepCopy(fields()[110].schema(), other.qualityLimitationDurationOther);
        fieldSetFlags()[110] = true;
      }
      if (isValidValue(fields()[111], other.qualityLimitationReason)) {
        this.qualityLimitationReason = data().deepCopy(fields()[111].schema(), other.qualityLimitationReason);
        fieldSetFlags()[111] = true;
      }
      if (isValidValue(fields()[112], other.qualityLimitationResolutionChanges)) {
        this.qualityLimitationResolutionChanges = data().deepCopy(fields()[112].schema(), other.qualityLimitationResolutionChanges);
        fieldSetFlags()[112] = true;
      }
      if (isValidValue(fields()[113], other.encodedFrameWidth)) {
        this.encodedFrameWidth = data().deepCopy(fields()[113].schema(), other.encodedFrameWidth);
        fieldSetFlags()[113] = true;
      }
      if (isValidValue(fields()[114], other.encodedFrameHeight)) {
        this.encodedFrameHeight = data().deepCopy(fields()[114].schema(), other.encodedFrameHeight);
        fieldSetFlags()[114] = true;
      }
      if (isValidValue(fields()[115], other.encodedFrameBitDepth)) {
        this.encodedFrameBitDepth = data().deepCopy(fields()[115].schema(), other.encodedFrameBitDepth);
        fieldSetFlags()[115] = true;
      }
      if (isValidValue(fields()[116], other.encodedFramesPerSecond)) {
        this.encodedFramesPerSecond = data().deepCopy(fields()[116].schema(), other.encodedFramesPerSecond);
        fieldSetFlags()[116] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is labeled with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }

    /**
      * Sets the value of the 'trackId' field.
      * The id of the track
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[10], value);
      this.trackId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return The value.
      */
    public java.lang.String getRtpStreamId() {
      return rtpStreamId;
    }

    /**
      * Sets the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @param value The value of 'rtpStreamId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRtpStreamId(java.lang.String value) {
      validate(fields()[11], value);
      this.rtpStreamId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpStreamId' field has been set.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return True if the 'rtpStreamId' field has been set, false otherwise.
      */
    public boolean hasRtpStreamId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'rtpStreamId' field.
      * The id of the RTP stream connected to a remote media unit (such as an SFU)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRtpStreamId() {
      rtpStreamId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteTrackId' field.
      * Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
      * @return The value.
      */
    public java.lang.String getRemoteTrackId() {
      return remoteTrackId;
    }

    /**
      * Sets the value of the 'remoteTrackId' field.
      * Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
      * @param value The value of 'remoteTrackId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRemoteTrackId(java.lang.String value) {
      validate(fields()[12], value);
      this.remoteTrackId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteTrackId' field has been set.
      * Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
      * @return True if the 'remoteTrackId' field has been set, false otherwise.
      */
    public boolean hasRemoteTrackId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'remoteTrackId' field.
      * Only For Inbound Media Track Reports
The id of the remote track this inbound track is originated from
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRemoteTrackId() {
      remoteTrackId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteUserId' field.
      * Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return The value.
      */
    public java.lang.String getRemoteUserId() {
      return remoteUserId;
    }

    /**
      * Sets the value of the 'remoteUserId' field.
      * Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @param value The value of 'remoteUserId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRemoteUserId(java.lang.String value) {
      validate(fields()[13], value);
      this.remoteUserId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteUserId' field has been set.
      * Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return True if the 'remoteUserId' field has been set, false otherwise.
      */
    public boolean hasRemoteUserId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'remoteUserId' field.
      * Only For Inbound Media Track Reports
The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRemoteUserId() {
      remoteUserId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteClientId' field.
      * Only For Inbound Media Track Reports
The observer matched remote client Id
      * @return The value.
      */
    public java.lang.String getRemoteClientId() {
      return remoteClientId;
    }

    /**
      * Sets the value of the 'remoteClientId' field.
      * Only For Inbound Media Track Reports
The observer matched remote client Id
      * @param value The value of 'remoteClientId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRemoteClientId(java.lang.String value) {
      validate(fields()[14], value);
      this.remoteClientId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteClientId' field has been set.
      * Only For Inbound Media Track Reports
The observer matched remote client Id
      * @return True if the 'remoteClientId' field has been set, false otherwise.
      */
    public boolean hasRemoteClientId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'remoteClientId' field.
      * Only For Inbound Media Track Reports
The observer matched remote client Id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRemoteClientId() {
      remoteClientId = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePeerConnectionId' field.
      * Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
      * @return The value.
      */
    public java.lang.String getRemotePeerConnectionId() {
      return remotePeerConnectionId;
    }

    /**
      * Sets the value of the 'remotePeerConnectionId' field.
      * Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
      * @param value The value of 'remotePeerConnectionId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRemotePeerConnectionId(java.lang.String value) {
      validate(fields()[15], value);
      this.remotePeerConnectionId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePeerConnectionId' field has been set.
      * Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
      * @return True if the 'remotePeerConnectionId' field has been set, false otherwise.
      */
    public boolean hasRemotePeerConnectionId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'remotePeerConnectionId' field.
      * Only For Inbound Media Track Reports
The observer matched remote Peer Connection Id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRemotePeerConnectionId() {
      remotePeerConnectionId = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSampleSeq(int value) {
      validate(fields()[16], value);
      this.sampleSeq = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSampleSeq() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return The value.
      */
    public java.lang.Long getSsrc() {
      return ssrc;
    }

    /**
      * Sets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSsrc(long value) {
      validate(fields()[17], value);
      this.ssrc = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The RTP SSRC field
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSsrc() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }

    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[18], value);
      this.packetsReceived = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded synchronization source
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }

    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[19], value);
      this.packetsLost = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of bytes received on the corresponded synchronization source
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }

    /**
      * Sets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setJitter(java.lang.Double value) {
      validate(fields()[20], value);
      this.jitter = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The corresponded synchronization source reported jitter
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }

    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[21], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsRepaired() {
      return packetsRepaired;
    }

    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsRepaired(java.lang.Integer value) {
      validate(fields()[22], value);
      this.packetsRepaired = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsLost() {
      return burstPacketsLost;
    }

    /**
      * Sets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @param value The value of 'burstPacketsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstPacketsLost(java.lang.Integer value) {
      validate(fields()[23], value);
      this.burstPacketsLost = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsLost' field has been set.
      * The total number of packets lost in burst (RFC6958)
      * @return True if the 'burstPacketsLost' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsLost() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstPacketsLost() {
      burstPacketsLost = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsDiscarded() {
      return burstPacketsDiscarded;
    }

    /**
      * Sets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @param value The value of 'burstPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[24], value);
      this.burstPacketsDiscarded = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsDiscarded' field has been set.
      * The total number of packets discarded in burst (RFC6958)
      * @return True if the 'burstPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsDiscarded() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstPacketsDiscarded() {
      burstPacketsDiscarded = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstLossCount() {
      return burstLossCount;
    }

    /**
      * Sets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @param value The value of 'burstLossCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstLossCount(java.lang.Integer value) {
      validate(fields()[25], value);
      this.burstLossCount = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossCount' field has been set.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return True if the 'burstLossCount' field has been set, false otherwise.
      */
    public boolean hasBurstLossCount() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstLossCount() {
      burstLossCount = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstDiscardCount() {
      return burstDiscardCount;
    }

    /**
      * Sets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @param value The value of 'burstDiscardCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstDiscardCount(java.lang.Integer value) {
      validate(fields()[26], value);
      this.burstDiscardCount = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardCount' field has been set.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return True if the 'burstDiscardCount' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardCount() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstDiscardCount() {
      burstDiscardCount = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstLossRate() {
      return burstLossRate;
    }

    /**
      * Sets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstLossRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstLossRate(java.lang.Double value) {
      validate(fields()[27], value);
      this.burstLossRate = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossRate' field has been set.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstLossRate' field has been set, false otherwise.
      */
    public boolean hasBurstLossRate() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstLossRate() {
      burstLossRate = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstDiscardRate() {
      return burstDiscardRate;
    }

    /**
      * Sets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstDiscardRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBurstDiscardRate(java.lang.Double value) {
      validate(fields()[28], value);
      this.burstDiscardRate = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardRate' field has been set.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstDiscardRate' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardRate() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBurstDiscardRate() {
      burstDiscardRate = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapLossRate() {
      return gapLossRate;
    }

    /**
      * Sets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapLossRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setGapLossRate(java.lang.Double value) {
      validate(fields()[29], value);
      this.gapLossRate = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'gapLossRate' field has been set.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapLossRate' field has been set, false otherwise.
      */
    public boolean hasGapLossRate() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearGapLossRate() {
      gapLossRate = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapDiscardRate() {
      return gapDiscardRate;
    }

    /**
      * Sets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapDiscardRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setGapDiscardRate(java.lang.Double value) {
      validate(fields()[30], value);
      this.gapDiscardRate = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'gapDiscardRate' field has been set.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapDiscardRate' field has been set, false otherwise.
      */
    public boolean hasGapDiscardRate() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearGapDiscardRate() {
      gapDiscardRate = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'voiceActivityFlag' field.
      * Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return The value.
      */
    public java.lang.Boolean getVoiceActivityFlag() {
      return voiceActivityFlag;
    }

    /**
      * Sets the value of the 'voiceActivityFlag' field.
      * Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @param value The value of 'voiceActivityFlag'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setVoiceActivityFlag(java.lang.Boolean value) {
      validate(fields()[31], value);
      this.voiceActivityFlag = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'voiceActivityFlag' field has been set.
      * Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return True if the 'voiceActivityFlag' field has been set, false otherwise.
      */
    public boolean hasVoiceActivityFlag() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'voiceActivityFlag' field.
      * Only For Audio Reports
Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearVoiceActivityFlag() {
      voiceActivityFlag = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketReceivedTimestamp' field.
      * Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getLastPacketReceivedTimestamp() {
      return lastPacketReceivedTimestamp;
    }

    /**
      * Sets the value of the 'lastPacketReceivedTimestamp' field.
      * Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @param value The value of 'lastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setLastPacketReceivedTimestamp(java.lang.Double value) {
      validate(fields()[32], value);
      this.lastPacketReceivedTimestamp = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketReceivedTimestamp' field has been set.
      * Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return True if the 'lastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketReceivedTimestamp() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'lastPacketReceivedTimestamp' field.
      * Only For Inbound Media Track Reports
Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearLastPacketReceivedTimestamp() {
      lastPacketReceivedTimestamp = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getAverageRtcpInterval() {
      return averageRtcpInterval;
    }

    /**
      * Sets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @param value The value of 'averageRtcpInterval'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setAverageRtcpInterval(java.lang.Double value) {
      validate(fields()[33], value);
      this.averageRtcpInterval = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'averageRtcpInterval' field has been set.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return True if the 'averageRtcpInterval' field has been set, false otherwise.
      */
    public boolean hasAverageRtcpInterval() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearAverageRtcpInterval() {
      averageRtcpInterval = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getHeaderBytesReceived() {
      return headerBytesReceived;
    }

    /**
      * Sets the value of the 'headerBytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setHeaderBytesReceived(java.lang.Long value) {
      validate(fields()[34], value);
      this.headerBytesReceived = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesReceived' field has been set.
      * Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesReceived' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesReceived() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'headerBytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearHeaderBytesReceived() {
      headerBytesReceived = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsReceived' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFecPacketsReceived() {
      return fecPacketsReceived;
    }

    /**
      * Sets the value of the 'fecPacketsReceived' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFecPacketsReceived(java.lang.Integer value) {
      validate(fields()[35], value);
      this.fecPacketsReceived = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsReceived' field has been set.
      * Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasFecPacketsReceived() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'fecPacketsReceived' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFecPacketsReceived() {
      fecPacketsReceived = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }

    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFecPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[36], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * Only For Inbound Media Track Reports
Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[37], value);
      this.bytesReceived = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Only For Inbound Media Track Reports
Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsFailedDecryption' field.
      * Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Integer getPacketsFailedDecryption() {
      return packetsFailedDecryption;
    }

    /**
      * Sets the value of the 'packetsFailedDecryption' field.
      * Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'packetsFailedDecryption'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsFailedDecryption(java.lang.Integer value) {
      validate(fields()[38], value);
      this.packetsFailedDecryption = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsFailedDecryption' field has been set.
      * Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'packetsFailedDecryption' field has been set, false otherwise.
      */
    public boolean hasPacketsFailedDecryption() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'packetsFailedDecryption' field.
      * Only For Inbound Media Track Reports
Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsFailedDecryption() {
      packetsFailedDecryption = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDuplicated' field.
      * Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Integer getPacketsDuplicated() {
      return packetsDuplicated;
    }

    /**
      * Sets the value of the 'packetsDuplicated' field.
      * Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @param value The value of 'packetsDuplicated'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsDuplicated(java.lang.Integer value) {
      validate(fields()[39], value);
      this.packetsDuplicated = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDuplicated' field has been set.
      * Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return True if the 'packetsDuplicated' field has been set, false otherwise.
      */
    public boolean hasPacketsDuplicated() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'packetsDuplicated' field.
      * Only For Inbound Media Track Reports
Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsDuplicated() {
      packetsDuplicated = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsReceived' field.
      * Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getPerDscpPacketsReceived() {
      return perDscpPacketsReceived;
    }

    /**
      * Sets the value of the 'perDscpPacketsReceived' field.
      * Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPerDscpPacketsReceived(java.lang.Double value) {
      validate(fields()[40], value);
      this.perDscpPacketsReceived = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsReceived' field has been set.
      * Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsReceived() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'perDscpPacketsReceived' field.
      * Only For Inbound Media Track Reports
The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPerDscpPacketsReceived() {
      perDscpPacketsReceived = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }

    /**
      * Sets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[41], value);
      this.nackCount = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalProcessingDelay' field.
      * Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return The value.
      */
    public java.lang.Double getTotalProcessingDelay() {
      return totalProcessingDelay;
    }

    /**
      * Sets the value of the 'totalProcessingDelay' field.
      * Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @param value The value of 'totalProcessingDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalProcessingDelay(java.lang.Double value) {
      validate(fields()[42], value);
      this.totalProcessingDelay = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'totalProcessingDelay' field has been set.
      * Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return True if the 'totalProcessingDelay' field has been set, false otherwise.
      */
    public boolean hasTotalProcessingDelay() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'totalProcessingDelay' field.
      * Only For Inbound Media Track Reports
The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalProcessingDelay() {
      totalProcessingDelay = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedPlayoutTimestamp' field.
      * Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getEstimatedPlayoutTimestamp() {
      return estimatedPlayoutTimestamp;
    }

    /**
      * Sets the value of the 'estimatedPlayoutTimestamp' field.
      * Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
      * @param value The value of 'estimatedPlayoutTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEstimatedPlayoutTimestamp(java.lang.Double value) {
      validate(fields()[43], value);
      this.estimatedPlayoutTimestamp = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedPlayoutTimestamp' field has been set.
      * Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
      * @return True if the 'estimatedPlayoutTimestamp' field has been set, false otherwise.
      */
    public boolean hasEstimatedPlayoutTimestamp() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'estimatedPlayoutTimestamp' field.
      * Only For Inbound Media Track Reports
The estimated playout time of the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEstimatedPlayoutTimestamp() {
      estimatedPlayoutTimestamp = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferDelay' field.
      * Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return The value.
      */
    public java.lang.Double getJitterBufferDelay() {
      return jitterBufferDelay;
    }

    /**
      * Sets the value of the 'jitterBufferDelay' field.
      * Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @param value The value of 'jitterBufferDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setJitterBufferDelay(java.lang.Double value) {
      validate(fields()[44], value);
      this.jitterBufferDelay = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferDelay' field has been set.
      * Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return True if the 'jitterBufferDelay' field has been set, false otherwise.
      */
    public boolean hasJitterBufferDelay() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'jitterBufferDelay' field.
      * Only For Inbound Media Track Reports
The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearJitterBufferDelay() {
      jitterBufferDelay = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferEmittedCount' field.
      * Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getJitterBufferEmittedCount() {
      return jitterBufferEmittedCount;
    }

    /**
      * Sets the value of the 'jitterBufferEmittedCount' field.
      * Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @param value The value of 'jitterBufferEmittedCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setJitterBufferEmittedCount(java.lang.Integer value) {
      validate(fields()[45], value);
      this.jitterBufferEmittedCount = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferEmittedCount' field has been set.
      * Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return True if the 'jitterBufferEmittedCount' field has been set, false otherwise.
      */
    public boolean hasJitterBufferEmittedCount() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'jitterBufferEmittedCount' field.
      * Only For Inbound Media Track Reports
The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearJitterBufferEmittedCount() {
      jitterBufferEmittedCount = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'decoderImplementation' field.
      * Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
      * @return The value.
      */
    public java.lang.String getDecoderImplementation() {
      return decoderImplementation;
    }

    /**
      * Sets the value of the 'decoderImplementation' field.
      * Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
      * @param value The value of 'decoderImplementation'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setDecoderImplementation(java.lang.String value) {
      validate(fields()[46], value);
      this.decoderImplementation = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'decoderImplementation' field has been set.
      * Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
      * @return True if the 'decoderImplementation' field has been set, false otherwise.
      */
    public boolean hasDecoderImplementation() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'decoderImplementation' field.
      * Only For Inbound Media Track Reports
Indicate the name of the decoder implementation library
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearDecoderImplementation() {
      decoderImplementation = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }

    /**
      * Sets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[47], value);
      this.packetsSent = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[48], value);
      this.bytesSent = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteTimestamp' field.
      * Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getRemoteTimestamp() {
      return remoteTimestamp;
    }

    /**
      * Sets the value of the 'remoteTimestamp' field.
      * Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @param value The value of 'remoteTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRemoteTimestamp(java.lang.Double value) {
      validate(fields()[49], value);
      this.remoteTimestamp = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteTimestamp' field has been set.
      * Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return True if the 'remoteTimestamp' field has been set, false otherwise.
      */
    public boolean hasRemoteTimestamp() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'remoteTimestamp' field.
      * Only For Inbound Media Track Reports
The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRemoteTimestamp() {
      remoteTimestamp = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsSent' field.
      * Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return The value.
      */
    public java.lang.Integer getReportsSent() {
      return reportsSent;
    }

    /**
      * Sets the value of the 'reportsSent' field.
      * Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @param value The value of 'reportsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setReportsSent(java.lang.Integer value) {
      validate(fields()[50], value);
      this.reportsSent = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsSent' field has been set.
      * Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return True if the 'reportsSent' field has been set, false otherwise.
      */
    public boolean hasReportsSent() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'reportsSent' field.
      * Only For Inbound Media Track Reports
The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearReportsSent() {
      reportsSent = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return The value.
      */
    public java.lang.Boolean getEnded() {
      return ended;
    }

    /**
      * Sets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEnded(java.lang.Boolean value) {
      validate(fields()[51], value);
      this.ended = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * Flag represents if the receiver ended the media stream track or not.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEnded() {
      ended = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }

    /**
      * Sets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[52], value);
      this.payloadType = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The type of the payload the RTP packet SSRC belongs to
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }

    /**
      * Sets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[53], value);
      this.mimeType = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }

    /**
      * Sets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[54], value);
      this.clockRate = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return The value.
      */
    public java.lang.Integer getChannels() {
      return channels;
    }

    /**
      * Sets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setChannels(java.lang.Integer value) {
      validate(fields()[55], value);
      this.channels = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }

    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[56], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDropped' field.
      * Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesDropped() {
      return framesDropped;
    }

    /**
      * Sets the value of the 'framesDropped' field.
      * Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
      * @param value The value of 'framesDropped'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesDropped(java.lang.Integer value) {
      validate(fields()[57], value);
      this.framesDropped = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDropped' field has been set.
      * Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return True if the 'framesDropped' field has been set, false otherwise.
      */
    public boolean hasFramesDropped() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'framesDropped' field.
      * Only For Video Reports
The total number of frames dropped at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesDropped() {
      framesDropped = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'partialFramesLost' field.
      * Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getPartialFramesLost() {
      return partialFramesLost;
    }

    /**
      * Sets the value of the 'partialFramesLost' field.
      * Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @param value The value of 'partialFramesLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPartialFramesLost(java.lang.Double value) {
      validate(fields()[58], value);
      this.partialFramesLost = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'partialFramesLost' field has been set.
      * Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return True if the 'partialFramesLost' field has been set, false otherwise.
      */
    public boolean hasPartialFramesLost() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'partialFramesLost' field.
      * Only For Video Reports
The total number of partial frames lost at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPartialFramesLost() {
      partialFramesLost = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullFramesLost' field.
      * Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getFullFramesLost() {
      return fullFramesLost;
    }

    /**
      * Sets the value of the 'fullFramesLost' field.
      * Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
      * @param value The value of 'fullFramesLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFullFramesLost(java.lang.Integer value) {
      validate(fields()[59], value);
      this.fullFramesLost = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'fullFramesLost' field has been set.
      * Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return True if the 'fullFramesLost' field has been set, false otherwise.
      */
    public boolean hasFullFramesLost() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'fullFramesLost' field.
      * Only For Video Reports
The total number of full frames lost at decoding process on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFullFramesLost() {
      fullFramesLost = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFramesDecoded() {
      return framesDecoded;
    }

    /**
      * Sets the value of the 'framesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesDecoded(java.lang.Integer value) {
      validate(fields()[60], value);
      this.framesDecoded = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of frames completly and without error decoded on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getKeyFramesDecoded() {
      return keyFramesDecoded;
    }

    /**
      * Sets the value of the 'keyFramesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @param value The value of 'keyFramesDecoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setKeyFramesDecoded(java.lang.Integer value) {
      validate(fields()[61], value);
      this.keyFramesDecoded = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesDecoded' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return True if the 'keyFramesDecoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesDecoded() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'keyFramesDecoded' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Indicate the number of keyframes received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearKeyFramesDecoded() {
      keyFramesDecoded = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameWidth' field.
      * Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFrameWidth() {
      return frameWidth;
    }

    /**
      * Sets the value of the 'frameWidth' field.
      * Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameWidth'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFrameWidth(java.lang.Integer value) {
      validate(fields()[62], value);
      this.frameWidth = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'frameWidth' field has been set.
      * Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameWidth' field has been set, false otherwise.
      */
    public boolean hasFrameWidth() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'frameWidth' field.
      * Only For Video Reports
Indicate the width of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFrameWidth() {
      frameWidth = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameHeight' field.
      * Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFrameHeight() {
      return frameHeight;
    }

    /**
      * Sets the value of the 'frameHeight' field.
      * Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameHeight'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFrameHeight(java.lang.Integer value) {
      validate(fields()[63], value);
      this.frameHeight = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'frameHeight' field has been set.
      * Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameHeight' field has been set, false otherwise.
      */
    public boolean hasFrameHeight() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'frameHeight' field.
      * Only For Video Reports
Indicate the height of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFrameHeight() {
      frameHeight = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameBitDepth' field.
      * Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFrameBitDepth() {
      return frameBitDepth;
    }

    /**
      * Sets the value of the 'frameBitDepth' field.
      * Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'frameBitDepth'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFrameBitDepth(java.lang.Integer value) {
      validate(fields()[64], value);
      this.frameBitDepth = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'frameBitDepth' field has been set.
      * Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'frameBitDepth' field has been set, false otherwise.
      */
    public boolean hasFrameBitDepth() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'frameBitDepth' field.
      * Only For Video Reports
Indicate the bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFrameBitDepth() {
      frameBitDepth = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesPerSecond' field.
      * Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getFramesPerSecond() {
      return framesPerSecond;
    }

    /**
      * Sets the value of the 'framesPerSecond' field.
      * Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesPerSecond'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesPerSecond(java.lang.Double value) {
      validate(fields()[65], value);
      this.framesPerSecond = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'framesPerSecond' field has been set.
      * Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return True if the 'framesPerSecond' field has been set, false otherwise.
      */
    public boolean hasFramesPerSecond() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'framesPerSecond' field.
      * Only For Video Reports
Indicate the number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesPerSecond() {
      framesPerSecond = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'qpSum' field.
      * Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getQpSum() {
      return qpSum;
    }

    /**
      * Sets the value of the 'qpSum' field.
      * Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @param value The value of 'qpSum'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQpSum(java.lang.Long value) {
      validate(fields()[66], value);
      this.qpSum = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'qpSum' field has been set.
      * Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return True if the 'qpSum' field has been set, false otherwise.
      */
    public boolean hasQpSum() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'qpSum' field.
      * Only For Video Reports
sum of QP values of frames decoded on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQpSum() {
      qpSum = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDecodeTime' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getTotalDecodeTime() {
      return totalDecodeTime;
    }

    /**
      * Sets the value of the 'totalDecodeTime' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @param value The value of 'totalDecodeTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalDecodeTime(java.lang.Long value) {
      validate(fields()[67], value);
      this.totalDecodeTime = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDecodeTime' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return True if the 'totalDecodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalDecodeTime() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'totalDecodeTime' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of seconds spent on decoding frames on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalDecodeTime() {
      totalDecodeTime = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getTotalInterFrameDelay() {
      return totalInterFrameDelay;
    }

    /**
      * Sets the value of the 'totalInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @param value The value of 'totalInterFrameDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalInterFrameDelay(java.lang.Long value) {
      validate(fields()[68], value);
      this.totalInterFrameDelay = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'totalInterFrameDelay' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return True if the 'totalInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalInterFrameDelay() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'totalInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalInterFrameDelay() {
      totalInterFrameDelay = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSquaredInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return The value.
      */
    public java.lang.Long getTotalSquaredInterFrameDelay() {
      return totalSquaredInterFrameDelay;
    }

    /**
      * Sets the value of the 'totalSquaredInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @param value The value of 'totalSquaredInterFrameDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalSquaredInterFrameDelay(java.lang.Long value) {
      validate(fields()[69], value);
      this.totalSquaredInterFrameDelay = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSquaredInterFrameDelay' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return True if the 'totalSquaredInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalSquaredInterFrameDelay() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'totalSquaredInterFrameDelay' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
The total number of inter frame delay squere on the corresponded synchronization source (ssrc) Useful for variance calculation for interframe delays
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalSquaredInterFrameDelay() {
      totalSquaredInterFrameDelay = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }

    /**
      * Sets the value of the 'firCount' field.
      * Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[70], value);
      this.firCount = value;
      fieldSetFlags()[70] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[70];
    }


    /**
      * Clears the value of the 'firCount' field.
      * Only For Video Reports
Count the total number of Full Intra Request sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[70] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }

    /**
      * Sets the value of the 'pliCount' field.
      * Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[71], value);
      this.pliCount = value;
      fieldSetFlags()[71] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[71];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * Only For Video Reports
Count the total number of Picture Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[71] = false;
      return this;
    }

    /**
      * Gets the value of the 'sliCount' field.
      * Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getSliCount() {
      return sliCount;
    }

    /**
      * Sets the value of the 'sliCount' field.
      * Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'sliCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSliCount(java.lang.Integer value) {
      validate(fields()[72], value);
      this.sliCount = value;
      fieldSetFlags()[72] = true;
      return this;
    }

    /**
      * Checks whether the 'sliCount' field has been set.
      * Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'sliCount' field has been set, false otherwise.
      */
    public boolean hasSliCount() {
      return fieldSetFlags()[72];
    }


    /**
      * Clears the value of the 'sliCount' field.
      * Only For Video Reports
Count the total number of Slice Loss Indication sent by this receiver and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSliCount() {
      sliCount = null;
      fieldSetFlags()[72] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesReceived' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFramesReceived() {
      return framesReceived;
    }

    /**
      * Sets the value of the 'framesReceived' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @param value The value of 'framesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesReceived(java.lang.Integer value) {
      validate(fields()[73], value);
      this.framesReceived = value;
      fieldSetFlags()[73] = true;
      return this;
    }

    /**
      * Checks whether the 'framesReceived' field has been set.
      * Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return True if the 'framesReceived' field has been set, false otherwise.
      */
    public boolean hasFramesReceived() {
      return fieldSetFlags()[73];
    }


    /**
      * Clears the value of the 'framesReceived' field.
      * Only For Video Reports
Only For Inbound Media Track Reports
Represents the total number of complete frames received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesReceived() {
      framesReceived = null;
      fieldSetFlags()[73] = false;
      return this;
    }

    /**
      * Gets the value of the 'rid' field.
      * Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
      * @return The value.
      */
    public java.lang.String getRid() {
      return rid;
    }

    /**
      * Sets the value of the 'rid' field.
      * Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
      * @param value The value of 'rid'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRid(java.lang.String value) {
      validate(fields()[74], value);
      this.rid = value;
      fieldSetFlags()[74] = true;
      return this;
    }

    /**
      * Checks whether the 'rid' field has been set.
      * Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
      * @return True if the 'rid' field has been set, false otherwise.
      */
    public boolean hasRid() {
      return fieldSetFlags()[74];
    }


    /**
      * Clears the value of the 'rid' field.
      * Only For Outbound Media Track Reports
 The rid encoding parameter of the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRid() {
      rid = null;
      fieldSetFlags()[74] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketSentTimestamp' field.
      * Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
      * @return The value.
      */
    public java.lang.Long getLastPacketSentTimestamp() {
      return lastPacketSentTimestamp;
    }

    /**
      * Sets the value of the 'lastPacketSentTimestamp' field.
      * Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
      * @param value The value of 'lastPacketSentTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setLastPacketSentTimestamp(java.lang.Long value) {
      validate(fields()[75], value);
      this.lastPacketSentTimestamp = value;
      fieldSetFlags()[75] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketSentTimestamp' field has been set.
      * Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
      * @return True if the 'lastPacketSentTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketSentTimestamp() {
      return fieldSetFlags()[75];
    }


    /**
      * Clears the value of the 'lastPacketSentTimestamp' field.
      * Only For Outbound Media Track Reports
 the timestamp the last packet was sent. (UTC epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearLastPacketSentTimestamp() {
      lastPacketSentTimestamp = null;
      fieldSetFlags()[75] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getHeaderBytesSent() {
      return headerBytesSent;
    }

    /**
      * Sets the value of the 'headerBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setHeaderBytesSent(java.lang.Long value) {
      validate(fields()[76], value);
      this.headerBytesSent = value;
      fieldSetFlags()[76] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesSent' field has been set.
      * Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesSent' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesSent() {
      return fieldSetFlags()[76];
    }


    /**
      * Clears the value of the 'headerBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of RTP header and padding bytes sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearHeaderBytesSent() {
      headerBytesSent = null;
      fieldSetFlags()[76] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscardedOnSend() {
      return packetsDiscardedOnSend;
    }

    /**
      * Sets the value of the 'packetsDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'packetsDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPacketsDiscardedOnSend(java.lang.Integer value) {
      validate(fields()[77], value);
      this.packetsDiscardedOnSend = value;
      fieldSetFlags()[77] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscardedOnSend' field has been set.
      * Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'packetsDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscardedOnSend() {
      return fieldSetFlags()[77];
    }


    /**
      * Clears the value of the 'packetsDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP packets discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPacketsDiscardedOnSend() {
      packetsDiscardedOnSend = null;
      fieldSetFlags()[77] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getBytesDiscardedOnSend() {
      return bytesDiscardedOnSend;
    }

    /**
      * Sets the value of the 'bytesDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @param value The value of 'bytesDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setBytesDiscardedOnSend(java.lang.Long value) {
      validate(fields()[78], value);
      this.bytesDiscardedOnSend = value;
      fieldSetFlags()[78] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesDiscardedOnSend' field has been set.
      * Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return True if the 'bytesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasBytesDiscardedOnSend() {
      return fieldSetFlags()[78];
    }


    /**
      * Clears the value of the 'bytesDiscardedOnSend' field.
      * Only For Outbound Media Track Reports
Total number of RTP bytes discarded at sender side over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearBytesDiscardedOnSend() {
      bytesDiscardedOnSend = null;
      fieldSetFlags()[78] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFecPacketsSent() {
      return fecPacketsSent;
    }

    /**
      * Sets the value of the 'fecPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFecPacketsSent(java.lang.Integer value) {
      validate(fields()[79], value);
      this.fecPacketsSent = value;
      fieldSetFlags()[79] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsSent' field has been set.
      * Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsSent' field has been set, false otherwise.
      */
    public boolean hasFecPacketsSent() {
      return fieldSetFlags()[79];
    }


    /**
      * Clears the value of the 'fecPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of FEC packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFecPacketsSent() {
      fecPacketsSent = null;
      fieldSetFlags()[79] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Integer getRetransmittedPacketsSent() {
      return retransmittedPacketsSent;
    }

    /**
      * Sets the value of the 'retransmittedPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @param value The value of 'retransmittedPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRetransmittedPacketsSent(java.lang.Integer value) {
      validate(fields()[80], value);
      this.retransmittedPacketsSent = value;
      fieldSetFlags()[80] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedPacketsSent' field has been set.
      * Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return True if the 'retransmittedPacketsSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedPacketsSent() {
      return fieldSetFlags()[80];
    }


    /**
      * Clears the value of the 'retransmittedPacketsSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted packets sent over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRetransmittedPacketsSent() {
      retransmittedPacketsSent = null;
      fieldSetFlags()[80] = false;
      return this;
    }

    /**
      * Gets the value of the 'retransmittedBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Long getRetransmittedBytesSent() {
      return retransmittedBytesSent;
    }

    /**
      * Sets the value of the 'retransmittedBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @param value The value of 'retransmittedBytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRetransmittedBytesSent(java.lang.Long value) {
      validate(fields()[81], value);
      this.retransmittedBytesSent = value;
      fieldSetFlags()[81] = true;
      return this;
    }

    /**
      * Checks whether the 'retransmittedBytesSent' field has been set.
      * Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return True if the 'retransmittedBytesSent' field has been set, false otherwise.
      */
    public boolean hasRetransmittedBytesSent() {
      return fieldSetFlags()[81];
    }


    /**
      * Clears the value of the 'retransmittedBytesSent' field.
      * Only For Outbound Media Track Reports
Total number of retransmitted bytes sent over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRetransmittedBytesSent() {
      retransmittedBytesSent = null;
      fieldSetFlags()[81] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetBitrate' field.
      * Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
      * @return The value.
      */
    public java.lang.Long getTargetBitrate() {
      return targetBitrate;
    }

    /**
      * Sets the value of the 'targetBitrate' field.
      * Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
      * @param value The value of 'targetBitrate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTargetBitrate(java.lang.Long value) {
      validate(fields()[82], value);
      this.targetBitrate = value;
      fieldSetFlags()[82] = true;
      return this;
    }

    /**
      * Checks whether the 'targetBitrate' field has been set.
      * Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
      * @return True if the 'targetBitrate' field has been set, false otherwise.
      */
    public boolean hasTargetBitrate() {
      return fieldSetFlags()[82];
    }


    /**
      * Clears the value of the 'targetBitrate' field.
      * Only For Outbound Media Track Reports
Reflects the current encoder target in bits per second.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTargetBitrate() {
      targetBitrate = null;
      fieldSetFlags()[82] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodedBytesTarget' field.
      * Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return The value.
      */
    public java.lang.Long getTotalEncodedBytesTarget() {
      return totalEncodedBytesTarget;
    }

    /**
      * Sets the value of the 'totalEncodedBytesTarget' field.
      * Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @param value The value of 'totalEncodedBytesTarget'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalEncodedBytesTarget(java.lang.Long value) {
      validate(fields()[83], value);
      this.totalEncodedBytesTarget = value;
      fieldSetFlags()[83] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodedBytesTarget' field has been set.
      * Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return True if the 'totalEncodedBytesTarget' field has been set, false otherwise.
      */
    public boolean hasTotalEncodedBytesTarget() {
      return fieldSetFlags()[83];
    }


    /**
      * Clears the value of the 'totalEncodedBytesTarget' field.
      * Only For Outbound Media Track Reports
The total number of bytes of RTP coherent frames encoded completly depending on the frame size the encoder targets
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalEncodedBytesTarget() {
      totalEncodedBytesTarget = null;
      fieldSetFlags()[83] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesSent' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getTotalSamplesSent() {
      return totalSamplesSent;
    }

    /**
      * Sets the value of the 'totalSamplesSent' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
      * @param value The value of 'totalSamplesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalSamplesSent(java.lang.Integer value) {
      validate(fields()[84], value);
      this.totalSamplesSent = value;
      fieldSetFlags()[84] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesSent' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
      * @return True if the 'totalSamplesSent' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesSent() {
      return fieldSetFlags()[84];
    }


    /**
      * Clears the value of the 'totalSamplesSent' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples sent over the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalSamplesSent() {
      totalSamplesSent = null;
      fieldSetFlags()[84] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesEncodedWithSilk' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getSamplesEncodedWithSilk() {
      return samplesEncodedWithSilk;
    }

    /**
      * Sets the value of the 'samplesEncodedWithSilk' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @param value The value of 'samplesEncodedWithSilk'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSamplesEncodedWithSilk(java.lang.Integer value) {
      validate(fields()[85], value);
      this.samplesEncodedWithSilk = value;
      fieldSetFlags()[85] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesEncodedWithSilk' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return True if the 'samplesEncodedWithSilk' field has been set, false otherwise.
      */
    public boolean hasSamplesEncodedWithSilk() {
      return fieldSetFlags()[85];
    }


    /**
      * Clears the value of the 'samplesEncodedWithSilk' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by SILK portion in opus sent over the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSamplesEncodedWithSilk() {
      samplesEncodedWithSilk = null;
      fieldSetFlags()[85] = false;
      return this;
    }

    /**
      * Gets the value of the 'samplesEncodedWithCelt' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getSamplesEncodedWithCelt() {
      return samplesEncodedWithCelt;
    }

    /**
      * Sets the value of the 'samplesEncodedWithCelt' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @param value The value of 'samplesEncodedWithCelt'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setSamplesEncodedWithCelt(java.lang.Integer value) {
      validate(fields()[86], value);
      this.samplesEncodedWithCelt = value;
      fieldSetFlags()[86] = true;
      return this;
    }

    /**
      * Checks whether the 'samplesEncodedWithCelt' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return True if the 'samplesEncodedWithCelt' field has been set, false otherwise.
      */
    public boolean hasSamplesEncodedWithCelt() {
      return fieldSetFlags()[86];
    }


    /**
      * Clears the value of the 'samplesEncodedWithCelt' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
The total number of samples encoded by CELT portion in opus sent over the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearSamplesEncodedWithCelt() {
      samplesEncodedWithCelt = null;
      fieldSetFlags()[86] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPacketSendDelay' field.
      * Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalPacketSendDelay() {
      return totalPacketSendDelay;
    }

    /**
      * Sets the value of the 'totalPacketSendDelay' field.
      * Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @param value The value of 'totalPacketSendDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalPacketSendDelay(java.lang.Double value) {
      validate(fields()[87], value);
      this.totalPacketSendDelay = value;
      fieldSetFlags()[87] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPacketSendDelay' field has been set.
      * Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return True if the 'totalPacketSendDelay' field has been set, false otherwise.
      */
    public boolean hasTotalPacketSendDelay() {
      return fieldSetFlags()[87];
    }


    /**
      * Clears the value of the 'totalPacketSendDelay' field.
      * Only For Outbound Media Track Reports
The total number of delay packets buffered at the sender side in seconds over the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalPacketSendDelay() {
      totalPacketSendDelay = null;
      fieldSetFlags()[87] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsSent' field.
      * Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getPerDscpPacketsSent() {
      return perDscpPacketsSent;
    }

    /**
      * Sets the value of the 'perDscpPacketsSent' field.
      * Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setPerDscpPacketsSent(java.lang.Double value) {
      validate(fields()[88], value);
      this.perDscpPacketsSent = value;
      fieldSetFlags()[88] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsSent' field has been set.
      * Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsSent' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsSent() {
      return fieldSetFlags()[88];
    }


    /**
      * Clears the value of the 'perDscpPacketsSent' field.
      * Only For Outbound Media Track Reports
The total number of DSCP flagged RTP packets sent over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearPerDscpPacketsSent() {
      perDscpPacketsSent = null;
      fieldSetFlags()[88] = false;
      return this;
    }

    /**
      * Gets the value of the 'encoderImplementation' field.
      * Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
      * @return The value.
      */
    public java.lang.String getEncoderImplementation() {
      return encoderImplementation;
    }

    /**
      * Sets the value of the 'encoderImplementation' field.
      * Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
      * @param value The value of 'encoderImplementation'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEncoderImplementation(java.lang.String value) {
      validate(fields()[89], value);
      this.encoderImplementation = value;
      fieldSetFlags()[89] = true;
      return this;
    }

    /**
      * Checks whether the 'encoderImplementation' field has been set.
      * Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
      * @return True if the 'encoderImplementation' field has been set, false otherwise.
      */
    public boolean hasEncoderImplementation() {
      return fieldSetFlags()[89];
    }


    /**
      * Clears the value of the 'encoderImplementation' field.
      * Only For Outbound Media Track Reports
Indicate the name of the encoder implementation library
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEncoderImplementation() {
      encoderImplementation = null;
      fieldSetFlags()[89] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTime' field.
      * Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getRoundTripTime() {
      return roundTripTime;
    }

    /**
      * Sets the value of the 'roundTripTime' field.
      * Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @param value The value of 'roundTripTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRoundTripTime(java.lang.Double value) {
      validate(fields()[90], value);
      this.roundTripTime = value;
      fieldSetFlags()[90] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTime' field has been set.
      * Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return True if the 'roundTripTime' field has been set, false otherwise.
      */
    public boolean hasRoundTripTime() {
      return fieldSetFlags()[90];
    }


    /**
      * Clears the value of the 'roundTripTime' field.
      * Only For Outbound Media Track Reports
RTT measurement in seconds based on (most likely) SR, and RR belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRoundTripTime() {
      roundTripTime = null;
      fieldSetFlags()[90] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRoundTripTime' field.
      * Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalRoundTripTime() {
      return totalRoundTripTime;
    }

    /**
      * Sets the value of the 'totalRoundTripTime' field.
      * Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
      * @param value The value of 'totalRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalRoundTripTime(java.lang.Double value) {
      validate(fields()[91], value);
      this.totalRoundTripTime = value;
      fieldSetFlags()[91] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRoundTripTime' field has been set.
      * Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
      * @return True if the 'totalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasTotalRoundTripTime() {
      return fieldSetFlags()[91];
    }


    /**
      * Clears the value of the 'totalRoundTripTime' field.
      * Only For Outbound Media Track Reports
The sum of RTT measurements belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalRoundTripTime() {
      totalRoundTripTime = null;
      fieldSetFlags()[91] = false;
      return this;
    }

    /**
      * Gets the value of the 'fractionLost' field.
      * Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getFractionLost() {
      return fractionLost;
    }

    /**
      * Sets the value of the 'fractionLost' field.
      * Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
      * @param value The value of 'fractionLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFractionLost(java.lang.Double value) {
      validate(fields()[92], value);
      this.fractionLost = value;
      fieldSetFlags()[92] = true;
      return this;
    }

    /**
      * Checks whether the 'fractionLost' field has been set.
      * Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return True if the 'fractionLost' field has been set, false otherwise.
      */
    public boolean hasFractionLost() {
      return fieldSetFlags()[92];
    }


    /**
      * Clears the value of the 'fractionLost' field.
      * Only For Outbound Media Track Reports
The receiver reported fractional lost belongs to the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFractionLost() {
      fractionLost = null;
      fieldSetFlags()[92] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsReceived' field.
      * Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return The value.
      */
    public java.lang.Integer getReportsReceived() {
      return reportsReceived;
    }

    /**
      * Sets the value of the 'reportsReceived' field.
      * Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @param value The value of 'reportsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setReportsReceived(java.lang.Integer value) {
      validate(fields()[93], value);
      this.reportsReceived = value;
      fieldSetFlags()[93] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsReceived' field has been set.
      * Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return True if the 'reportsReceived' field has been set, false otherwise.
      */
    public boolean hasReportsReceived() {
      return fieldSetFlags()[93];
    }


    /**
      * Clears the value of the 'reportsReceived' field.
      * Only For Outbound Media Track Reports
The total number of RR reports received, which is the base of the remote inbound calculation on this source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearReportsReceived() {
      reportsReceived = null;
      fieldSetFlags()[93] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTimeMeasurements' field.
      * Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
      * @return The value.
      */
    public java.lang.Integer getRoundTripTimeMeasurements() {
      return roundTripTimeMeasurements;
    }

    /**
      * Sets the value of the 'roundTripTimeMeasurements' field.
      * Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
      * @param value The value of 'roundTripTimeMeasurements'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRoundTripTimeMeasurements(java.lang.Integer value) {
      validate(fields()[94], value);
      this.roundTripTimeMeasurements = value;
      fieldSetFlags()[94] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTimeMeasurements' field has been set.
      * Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
      * @return True if the 'roundTripTimeMeasurements' field has been set, false otherwise.
      */
    public boolean hasRoundTripTimeMeasurements() {
      return fieldSetFlags()[94];
    }


    /**
      * Clears the value of the 'roundTripTimeMeasurements' field.
      * Only For Outbound Media Track Reports
The total number of calculated RR measurements received on this source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRoundTripTimeMeasurements() {
      roundTripTimeMeasurements = null;
      fieldSetFlags()[94] = false;
      return this;
    }

    /**
      * Gets the value of the 'relayedSource' field.
      * Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return The value.
      */
    public java.lang.Boolean getRelayedSource() {
      return relayedSource;
    }

    /**
      * Sets the value of the 'relayedSource' field.
      * Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @param value The value of 'relayedSource'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setRelayedSource(java.lang.Boolean value) {
      validate(fields()[95], value);
      this.relayedSource = value;
      fieldSetFlags()[95] = true;
      return this;
    }

    /**
      * Checks whether the 'relayedSource' field has been set.
      * Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return True if the 'relayedSource' field has been set, false otherwise.
      */
    public boolean hasRelayedSource() {
      return fieldSetFlags()[95];
    }


    /**
      * Clears the value of the 'relayedSource' field.
      * Only For Outbound Media Track Reports
True if the corresponded media source is remote, false otherwise (or null depending on browser and version)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearRelayedSource() {
      relayedSource = null;
      fieldSetFlags()[95] = false;
      return this;
    }

    /**
      * Gets the value of the 'audioLevel' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
      * @return The value.
      */
    public java.lang.Double getAudioLevel() {
      return audioLevel;
    }

    /**
      * Sets the value of the 'audioLevel' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
      * @param value The value of 'audioLevel'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setAudioLevel(java.lang.Double value) {
      validate(fields()[96], value);
      this.audioLevel = value;
      fieldSetFlags()[96] = true;
      return this;
    }

    /**
      * Checks whether the 'audioLevel' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
      * @return True if the 'audioLevel' field has been set, false otherwise.
      */
    public boolean hasAudioLevel() {
      return fieldSetFlags()[96];
    }


    /**
      * Clears the value of the 'audioLevel' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the audio level reported by the media source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearAudioLevel() {
      audioLevel = null;
      fieldSetFlags()[96] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAudioEnergy' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
      * @return The value.
      */
    public java.lang.Double getTotalAudioEnergy() {
      return totalAudioEnergy;
    }

    /**
      * Sets the value of the 'totalAudioEnergy' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
      * @param value The value of 'totalAudioEnergy'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalAudioEnergy(java.lang.Double value) {
      validate(fields()[97], value);
      this.totalAudioEnergy = value;
      fieldSetFlags()[97] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAudioEnergy' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
      * @return True if the 'totalAudioEnergy' field has been set, false otherwise.
      */
    public boolean hasTotalAudioEnergy() {
      return fieldSetFlags()[97];
    }


    /**
      * Clears the value of the 'totalAudioEnergy' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the energy level reported by the media source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalAudioEnergy() {
      totalAudioEnergy = null;
      fieldSetFlags()[97] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSamplesDuration' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return The value.
      */
    public java.lang.Double getTotalSamplesDuration() {
      return totalSamplesDuration;
    }

    /**
      * Sets the value of the 'totalSamplesDuration' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @param value The value of 'totalSamplesDuration'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalSamplesDuration(java.lang.Double value) {
      validate(fields()[98], value);
      this.totalSamplesDuration = value;
      fieldSetFlags()[98] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSamplesDuration' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return True if the 'totalSamplesDuration' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesDuration() {
      return fieldSetFlags()[98];
    }


    /**
      * Clears the value of the 'totalSamplesDuration' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the total duration of the audio samples the media source actually transconverted in seconds
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalSamplesDuration() {
      totalSamplesDuration = null;
      fieldSetFlags()[98] = false;
      return this;
    }

    /**
      * Gets the value of the 'echoReturnLoss' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
      * @return The value.
      */
    public java.lang.Double getEchoReturnLoss() {
      return echoReturnLoss;
    }

    /**
      * Sets the value of the 'echoReturnLoss' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
      * @param value The value of 'echoReturnLoss'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEchoReturnLoss(java.lang.Double value) {
      validate(fields()[99], value);
      this.echoReturnLoss = value;
      fieldSetFlags()[99] = true;
      return this;
    }

    /**
      * Checks whether the 'echoReturnLoss' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
      * @return True if the 'echoReturnLoss' field has been set, false otherwise.
      */
    public boolean hasEchoReturnLoss() {
      return fieldSetFlags()[99];
    }


    /**
      * Clears the value of the 'echoReturnLoss' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels corresponded to the media source.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEchoReturnLoss() {
      echoReturnLoss = null;
      fieldSetFlags()[99] = false;
      return this;
    }

    /**
      * Gets the value of the 'echoReturnLossEnhancement' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return The value.
      */
    public java.lang.Double getEchoReturnLossEnhancement() {
      return echoReturnLossEnhancement;
    }

    /**
      * Sets the value of the 'echoReturnLossEnhancement' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @param value The value of 'echoReturnLossEnhancement'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEchoReturnLossEnhancement(java.lang.Double value) {
      validate(fields()[100], value);
      this.echoReturnLossEnhancement = value;
      fieldSetFlags()[100] = true;
      return this;
    }

    /**
      * Checks whether the 'echoReturnLossEnhancement' field has been set.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return True if the 'echoReturnLossEnhancement' field has been set, false otherwise.
      */
    public boolean hasEchoReturnLossEnhancement() {
      return fieldSetFlags()[100];
    }


    /**
      * Clears the value of the 'echoReturnLossEnhancement' field.
      * Only For Audio Reports
Only For Outbound Media Track Reports
Represents the echo cancellation in decibels added as a postprocessing by the library after the audio is catched from the emdia source.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEchoReturnLossEnhancement() {
      echoReturnLossEnhancement = null;
      fieldSetFlags()[100] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesSent() {
      return framesSent;
    }

    /**
      * Sets the value of the 'framesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
      * @param value The value of 'framesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesSent(java.lang.Integer value) {
      validate(fields()[101], value);
      this.framesSent = value;
      fieldSetFlags()[101] = true;
      return this;
    }

    /**
      * Checks whether the 'framesSent' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
      * @return True if the 'framesSent' field has been set, false otherwise.
      */
    public boolean hasFramesSent() {
      return fieldSetFlags()[101];
    }


    /**
      * Clears the value of the 'framesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesSent() {
      framesSent = null;
      fieldSetFlags()[101] = false;
      return this;
    }

    /**
      * Gets the value of the 'hugeFramesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getHugeFramesSent() {
      return hugeFramesSent;
    }

    /**
      * Sets the value of the 'hugeFramesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @param value The value of 'hugeFramesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setHugeFramesSent(java.lang.Integer value) {
      validate(fields()[102], value);
      this.hugeFramesSent = value;
      fieldSetFlags()[102] = true;
      return this;
    }

    /**
      * Checks whether the 'hugeFramesSent' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return True if the 'hugeFramesSent' field has been set, false otherwise.
      */
    public boolean hasHugeFramesSent() {
      return fieldSetFlags()[102];
    }


    /**
      * Clears the value of the 'hugeFramesSent' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of huge frames (2.5x greater than the average size of frame) sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearHugeFramesSent() {
      hugeFramesSent = null;
      fieldSetFlags()[102] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesEncoded() {
      return framesEncoded;
    }

    /**
      * Sets the value of the 'framesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
      * @param value The value of 'framesEncoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesEncoded(java.lang.Integer value) {
      validate(fields()[103], value);
      this.framesEncoded = value;
      fieldSetFlags()[103] = true;
      return this;
    }

    /**
      * Checks whether the 'framesEncoded' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
      * @return True if the 'framesEncoded' field has been set, false otherwise.
      */
    public boolean hasFramesEncoded() {
      return fieldSetFlags()[103];
    }


    /**
      * Clears the value of the 'framesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames encoded over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesEncoded() {
      framesEncoded = null;
      fieldSetFlags()[103] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getKeyFramesEncoded() {
      return keyFramesEncoded;
    }

    /**
      * Sets the value of the 'keyFramesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
      * @param value The value of 'keyFramesEncoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setKeyFramesEncoded(java.lang.Integer value) {
      validate(fields()[104], value);
      this.keyFramesEncoded = value;
      fieldSetFlags()[104] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesEncoded' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
      * @return True if the 'keyFramesEncoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesEncoded() {
      return fieldSetFlags()[104];
    }


    /**
      * Clears the value of the 'keyFramesEncoded' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of keyframes sent over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearKeyFramesEncoded() {
      keyFramesEncoded = null;
      fieldSetFlags()[104] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDiscardedOnSend' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getFramesDiscardedOnSend() {
      return framesDiscardedOnSend;
    }

    /**
      * Sets the value of the 'framesDiscardedOnSend' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
      * @param value The value of 'framesDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setFramesDiscardedOnSend(java.lang.Integer value) {
      validate(fields()[105], value);
      this.framesDiscardedOnSend = value;
      fieldSetFlags()[105] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDiscardedOnSend' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
      * @return True if the 'framesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasFramesDiscardedOnSend() {
      return fieldSetFlags()[105];
    }


    /**
      * Clears the value of the 'framesDiscardedOnSend' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of frames discarded before sending over the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearFramesDiscardedOnSend() {
      framesDiscardedOnSend = null;
      fieldSetFlags()[105] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEncodeTime' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return The value.
      */
    public java.lang.Double getTotalEncodeTime() {
      return totalEncodeTime;
    }

    /**
      * Sets the value of the 'totalEncodeTime' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @param value The value of 'totalEncodeTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setTotalEncodeTime(java.lang.Double value) {
      validate(fields()[106], value);
      this.totalEncodeTime = value;
      fieldSetFlags()[106] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEncodeTime' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return True if the 'totalEncodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalEncodeTime() {
      return fieldSetFlags()[106];
    }


    /**
      * Clears the value of the 'totalEncodeTime' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The sum of encoding time spent by the encoder corresponded to the synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearTotalEncodeTime() {
      totalEncodeTime = null;
      fieldSetFlags()[106] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationCPU' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationCPU() {
      return qualityLimitationDurationCPU;
    }

    /**
      * Sets the value of the 'qualityLimitationDurationCPU' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @param value The value of 'qualityLimitationDurationCPU'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationDurationCPU(java.lang.Double value) {
      validate(fields()[107], value);
      this.qualityLimitationDurationCPU = value;
      fieldSetFlags()[107] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationCPU' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return True if the 'qualityLimitationDurationCPU' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationCPU() {
      return fieldSetFlags()[107];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationCPU' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state due to CPU
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationDurationCPU() {
      qualityLimitationDurationCPU = null;
      fieldSetFlags()[107] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationNone' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationNone() {
      return qualityLimitationDurationNone;
    }

    /**
      * Sets the value of the 'qualityLimitationDurationNone' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @param value The value of 'qualityLimitationDurationNone'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationDurationNone(java.lang.Double value) {
      validate(fields()[108], value);
      this.qualityLimitationDurationNone = value;
      fieldSetFlags()[108] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationNone' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return True if the 'qualityLimitationDurationNone' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationNone() {
      return fieldSetFlags()[108];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationNone' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was not in a limited state
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationDurationNone() {
      qualityLimitationDurationNone = null;
      fieldSetFlags()[108] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationBandwidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationBandwidth() {
      return qualityLimitationDurationBandwidth;
    }

    /**
      * Sets the value of the 'qualityLimitationDurationBandwidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @param value The value of 'qualityLimitationDurationBandwidth'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationDurationBandwidth(java.lang.Double value) {
      validate(fields()[109], value);
      this.qualityLimitationDurationBandwidth = value;
      fieldSetFlags()[109] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationBandwidth' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return True if the 'qualityLimitationDurationBandwidth' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationBandwidth() {
      return fieldSetFlags()[109];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationBandwidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becasue of bandwidth
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationDurationBandwidth() {
      qualityLimitationDurationBandwidth = null;
      fieldSetFlags()[109] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationDurationOther' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return The value.
      */
    public java.lang.Double getQualityLimitationDurationOther() {
      return qualityLimitationDurationOther;
    }

    /**
      * Sets the value of the 'qualityLimitationDurationOther' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @param value The value of 'qualityLimitationDurationOther'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationDurationOther(java.lang.Double value) {
      validate(fields()[110], value);
      this.qualityLimitationDurationOther = value;
      fieldSetFlags()[110] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationDurationOther' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return True if the 'qualityLimitationDurationOther' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationDurationOther() {
      return fieldSetFlags()[110];
    }


    /**
      * Clears the value of the 'qualityLimitationDurationOther' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Time elapsed in seconds when the the corresponding synchronization source (ssrc) was in a limited state becaue of other factor
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationDurationOther() {
      qualityLimitationDurationOther = null;
      fieldSetFlags()[110] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationReason' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return The value.
      */
    public java.lang.String getQualityLimitationReason() {
      return qualityLimitationReason;
    }

    /**
      * Sets the value of the 'qualityLimitationReason' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @param value The value of 'qualityLimitationReason'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationReason(java.lang.String value) {
      validate(fields()[111], value);
      this.qualityLimitationReason = value;
      fieldSetFlags()[111] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationReason' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return True if the 'qualityLimitationReason' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationReason() {
      return fieldSetFlags()[111];
    }


    /**
      * Clears the value of the 'qualityLimitationReason' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate a reason for the corresponding synchronization source (ssrc) quality is limited
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationReason() {
      qualityLimitationReason = null;
      fieldSetFlags()[111] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualityLimitationResolutionChanges' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getQualityLimitationResolutionChanges() {
      return qualityLimitationResolutionChanges;
    }

    /**
      * Sets the value of the 'qualityLimitationResolutionChanges' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @param value The value of 'qualityLimitationResolutionChanges'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setQualityLimitationResolutionChanges(java.lang.Integer value) {
      validate(fields()[112], value);
      this.qualityLimitationResolutionChanges = value;
      fieldSetFlags()[112] = true;
      return this;
    }

    /**
      * Checks whether the 'qualityLimitationResolutionChanges' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return True if the 'qualityLimitationResolutionChanges' field has been set, false otherwise.
      */
    public boolean hasQualityLimitationResolutionChanges() {
      return fieldSetFlags()[112];
    }


    /**
      * Clears the value of the 'qualityLimitationResolutionChanges' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
The number of quality limiatation changes happened for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearQualityLimitationResolutionChanges() {
      qualityLimitationResolutionChanges = null;
      fieldSetFlags()[112] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameWidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameWidth() {
      return encodedFrameWidth;
    }

    /**
      * Sets the value of the 'encodedFrameWidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameWidth'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEncodedFrameWidth(java.lang.Integer value) {
      validate(fields()[113], value);
      this.encodedFrameWidth = value;
      fieldSetFlags()[113] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameWidth' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameWidth' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameWidth() {
      return fieldSetFlags()[113];
    }


    /**
      * Clears the value of the 'encodedFrameWidth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded width of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEncodedFrameWidth() {
      encodedFrameWidth = null;
      fieldSetFlags()[113] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameHeight' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameHeight() {
      return encodedFrameHeight;
    }

    /**
      * Sets the value of the 'encodedFrameHeight' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameHeight'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEncodedFrameHeight(java.lang.Integer value) {
      validate(fields()[114], value);
      this.encodedFrameHeight = value;
      fieldSetFlags()[114] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameHeight' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameHeight' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameHeight() {
      return fieldSetFlags()[114];
    }


    /**
      * Clears the value of the 'encodedFrameHeight' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded height of the frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEncodedFrameHeight() {
      encodedFrameHeight = null;
      fieldSetFlags()[114] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFrameBitDepth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getEncodedFrameBitDepth() {
      return encodedFrameBitDepth;
    }

    /**
      * Sets the value of the 'encodedFrameBitDepth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFrameBitDepth'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEncodedFrameBitDepth(java.lang.Integer value) {
      validate(fields()[115], value);
      this.encodedFrameBitDepth = value;
      fieldSetFlags()[115] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFrameBitDepth' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFrameBitDepth' field has been set, false otherwise.
      */
    public boolean hasEncodedFrameBitDepth() {
      return fieldSetFlags()[115];
    }


    /**
      * Clears the value of the 'encodedFrameBitDepth' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded bit depth per pixel of the last decoded frame received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEncodedFrameBitDepth() {
      encodedFrameBitDepth = null;
      fieldSetFlags()[115] = false;
      return this;
    }

    /**
      * Gets the value of the 'encodedFramesPerSecond' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getEncodedFramesPerSecond() {
      return encodedFramesPerSecond;
    }

    /**
      * Sets the value of the 'encodedFramesPerSecond' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @param value The value of 'encodedFramesPerSecond'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder setEncodedFramesPerSecond(java.lang.Double value) {
      validate(fields()[116], value);
      this.encodedFramesPerSecond = value;
      fieldSetFlags()[116] = true;
      return this;
    }

    /**
      * Checks whether the 'encodedFramesPerSecond' field has been set.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return True if the 'encodedFramesPerSecond' field has been set, false otherwise.
      */
    public boolean hasEncodedFramesPerSecond() {
      return fieldSetFlags()[116];
    }


    /**
      * Clears the value of the 'encodedFramesPerSecond' field.
      * Only For Video Reports
Only For Outbound Media Track Reports
Indicate the encoded number of decoded frames in the last second received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.MediaTrackReport.Builder clearEncodedFramesPerSecond() {
      encodedFramesPerSecond = null;
      fieldSetFlags()[116] = false;
      return this;
    }

    @Override
    public MediaTrackReport build() {
      try {
        MediaTrackReport record = new MediaTrackReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.trackId = fieldSetFlags()[10] ? this.trackId : (java.lang.String) defaultValue(fields()[10]);
        record.rtpStreamId = fieldSetFlags()[11] ? this.rtpStreamId : (java.lang.String) defaultValue(fields()[11]);
        record.remoteTrackId = fieldSetFlags()[12] ? this.remoteTrackId : (java.lang.String) defaultValue(fields()[12]);
        record.remoteUserId = fieldSetFlags()[13] ? this.remoteUserId : (java.lang.String) defaultValue(fields()[13]);
        record.remoteClientId = fieldSetFlags()[14] ? this.remoteClientId : (java.lang.String) defaultValue(fields()[14]);
        record.remotePeerConnectionId = fieldSetFlags()[15] ? this.remotePeerConnectionId : (java.lang.String) defaultValue(fields()[15]);
        record.sampleSeq = fieldSetFlags()[16] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[16]);
        record.ssrc = fieldSetFlags()[17] ? this.ssrc : (java.lang.Long) defaultValue(fields()[17]);
        record.packetsReceived = fieldSetFlags()[18] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[18]);
        record.packetsLost = fieldSetFlags()[19] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[19]);
        record.jitter = fieldSetFlags()[20] ? this.jitter : (java.lang.Double) defaultValue(fields()[20]);
        record.packetsDiscarded = fieldSetFlags()[21] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[21]);
        record.packetsRepaired = fieldSetFlags()[22] ? this.packetsRepaired : (java.lang.Integer) defaultValue(fields()[22]);
        record.burstPacketsLost = fieldSetFlags()[23] ? this.burstPacketsLost : (java.lang.Integer) defaultValue(fields()[23]);
        record.burstPacketsDiscarded = fieldSetFlags()[24] ? this.burstPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[24]);
        record.burstLossCount = fieldSetFlags()[25] ? this.burstLossCount : (java.lang.Integer) defaultValue(fields()[25]);
        record.burstDiscardCount = fieldSetFlags()[26] ? this.burstDiscardCount : (java.lang.Integer) defaultValue(fields()[26]);
        record.burstLossRate = fieldSetFlags()[27] ? this.burstLossRate : (java.lang.Double) defaultValue(fields()[27]);
        record.burstDiscardRate = fieldSetFlags()[28] ? this.burstDiscardRate : (java.lang.Double) defaultValue(fields()[28]);
        record.gapLossRate = fieldSetFlags()[29] ? this.gapLossRate : (java.lang.Double) defaultValue(fields()[29]);
        record.gapDiscardRate = fieldSetFlags()[30] ? this.gapDiscardRate : (java.lang.Double) defaultValue(fields()[30]);
        record.voiceActivityFlag = fieldSetFlags()[31] ? this.voiceActivityFlag : (java.lang.Boolean) defaultValue(fields()[31]);
        record.lastPacketReceivedTimestamp = fieldSetFlags()[32] ? this.lastPacketReceivedTimestamp : (java.lang.Double) defaultValue(fields()[32]);
        record.averageRtcpInterval = fieldSetFlags()[33] ? this.averageRtcpInterval : (java.lang.Double) defaultValue(fields()[33]);
        record.headerBytesReceived = fieldSetFlags()[34] ? this.headerBytesReceived : (java.lang.Long) defaultValue(fields()[34]);
        record.fecPacketsReceived = fieldSetFlags()[35] ? this.fecPacketsReceived : (java.lang.Integer) defaultValue(fields()[35]);
        record.fecPacketsDiscarded = fieldSetFlags()[36] ? this.fecPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[36]);
        record.bytesReceived = fieldSetFlags()[37] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[37]);
        record.packetsFailedDecryption = fieldSetFlags()[38] ? this.packetsFailedDecryption : (java.lang.Integer) defaultValue(fields()[38]);
        record.packetsDuplicated = fieldSetFlags()[39] ? this.packetsDuplicated : (java.lang.Integer) defaultValue(fields()[39]);
        record.perDscpPacketsReceived = fieldSetFlags()[40] ? this.perDscpPacketsReceived : (java.lang.Double) defaultValue(fields()[40]);
        record.nackCount = fieldSetFlags()[41] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[41]);
        record.totalProcessingDelay = fieldSetFlags()[42] ? this.totalProcessingDelay : (java.lang.Double) defaultValue(fields()[42]);
        record.estimatedPlayoutTimestamp = fieldSetFlags()[43] ? this.estimatedPlayoutTimestamp : (java.lang.Double) defaultValue(fields()[43]);
        record.jitterBufferDelay = fieldSetFlags()[44] ? this.jitterBufferDelay : (java.lang.Double) defaultValue(fields()[44]);
        record.jitterBufferEmittedCount = fieldSetFlags()[45] ? this.jitterBufferEmittedCount : (java.lang.Integer) defaultValue(fields()[45]);
        record.decoderImplementation = fieldSetFlags()[46] ? this.decoderImplementation : (java.lang.String) defaultValue(fields()[46]);
        record.packetsSent = fieldSetFlags()[47] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[47]);
        record.bytesSent = fieldSetFlags()[48] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[48]);
        record.remoteTimestamp = fieldSetFlags()[49] ? this.remoteTimestamp : (java.lang.Double) defaultValue(fields()[49]);
        record.reportsSent = fieldSetFlags()[50] ? this.reportsSent : (java.lang.Integer) defaultValue(fields()[50]);
        record.ended = fieldSetFlags()[51] ? this.ended : (java.lang.Boolean) defaultValue(fields()[51]);
        record.payloadType = fieldSetFlags()[52] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[52]);
        record.mimeType = fieldSetFlags()[53] ? this.mimeType : (java.lang.String) defaultValue(fields()[53]);
        record.clockRate = fieldSetFlags()[54] ? this.clockRate : (java.lang.Long) defaultValue(fields()[54]);
        record.channels = fieldSetFlags()[55] ? this.channels : (java.lang.Integer) defaultValue(fields()[55]);
        record.sdpFmtpLine = fieldSetFlags()[56] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[56]);
        record.framesDropped = fieldSetFlags()[57] ? this.framesDropped : (java.lang.Integer) defaultValue(fields()[57]);
        record.partialFramesLost = fieldSetFlags()[58] ? this.partialFramesLost : (java.lang.Double) defaultValue(fields()[58]);
        record.fullFramesLost = fieldSetFlags()[59] ? this.fullFramesLost : (java.lang.Integer) defaultValue(fields()[59]);
        record.framesDecoded = fieldSetFlags()[60] ? this.framesDecoded : (java.lang.Integer) defaultValue(fields()[60]);
        record.keyFramesDecoded = fieldSetFlags()[61] ? this.keyFramesDecoded : (java.lang.Integer) defaultValue(fields()[61]);
        record.frameWidth = fieldSetFlags()[62] ? this.frameWidth : (java.lang.Integer) defaultValue(fields()[62]);
        record.frameHeight = fieldSetFlags()[63] ? this.frameHeight : (java.lang.Integer) defaultValue(fields()[63]);
        record.frameBitDepth = fieldSetFlags()[64] ? this.frameBitDepth : (java.lang.Integer) defaultValue(fields()[64]);
        record.framesPerSecond = fieldSetFlags()[65] ? this.framesPerSecond : (java.lang.Double) defaultValue(fields()[65]);
        record.qpSum = fieldSetFlags()[66] ? this.qpSum : (java.lang.Long) defaultValue(fields()[66]);
        record.totalDecodeTime = fieldSetFlags()[67] ? this.totalDecodeTime : (java.lang.Long) defaultValue(fields()[67]);
        record.totalInterFrameDelay = fieldSetFlags()[68] ? this.totalInterFrameDelay : (java.lang.Long) defaultValue(fields()[68]);
        record.totalSquaredInterFrameDelay = fieldSetFlags()[69] ? this.totalSquaredInterFrameDelay : (java.lang.Long) defaultValue(fields()[69]);
        record.firCount = fieldSetFlags()[70] ? this.firCount : (java.lang.Integer) defaultValue(fields()[70]);
        record.pliCount = fieldSetFlags()[71] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[71]);
        record.sliCount = fieldSetFlags()[72] ? this.sliCount : (java.lang.Integer) defaultValue(fields()[72]);
        record.framesReceived = fieldSetFlags()[73] ? this.framesReceived : (java.lang.Integer) defaultValue(fields()[73]);
        record.rid = fieldSetFlags()[74] ? this.rid : (java.lang.String) defaultValue(fields()[74]);
        record.lastPacketSentTimestamp = fieldSetFlags()[75] ? this.lastPacketSentTimestamp : (java.lang.Long) defaultValue(fields()[75]);
        record.headerBytesSent = fieldSetFlags()[76] ? this.headerBytesSent : (java.lang.Long) defaultValue(fields()[76]);
        record.packetsDiscardedOnSend = fieldSetFlags()[77] ? this.packetsDiscardedOnSend : (java.lang.Integer) defaultValue(fields()[77]);
        record.bytesDiscardedOnSend = fieldSetFlags()[78] ? this.bytesDiscardedOnSend : (java.lang.Long) defaultValue(fields()[78]);
        record.fecPacketsSent = fieldSetFlags()[79] ? this.fecPacketsSent : (java.lang.Integer) defaultValue(fields()[79]);
        record.retransmittedPacketsSent = fieldSetFlags()[80] ? this.retransmittedPacketsSent : (java.lang.Integer) defaultValue(fields()[80]);
        record.retransmittedBytesSent = fieldSetFlags()[81] ? this.retransmittedBytesSent : (java.lang.Long) defaultValue(fields()[81]);
        record.targetBitrate = fieldSetFlags()[82] ? this.targetBitrate : (java.lang.Long) defaultValue(fields()[82]);
        record.totalEncodedBytesTarget = fieldSetFlags()[83] ? this.totalEncodedBytesTarget : (java.lang.Long) defaultValue(fields()[83]);
        record.totalSamplesSent = fieldSetFlags()[84] ? this.totalSamplesSent : (java.lang.Integer) defaultValue(fields()[84]);
        record.samplesEncodedWithSilk = fieldSetFlags()[85] ? this.samplesEncodedWithSilk : (java.lang.Integer) defaultValue(fields()[85]);
        record.samplesEncodedWithCelt = fieldSetFlags()[86] ? this.samplesEncodedWithCelt : (java.lang.Integer) defaultValue(fields()[86]);
        record.totalPacketSendDelay = fieldSetFlags()[87] ? this.totalPacketSendDelay : (java.lang.Double) defaultValue(fields()[87]);
        record.perDscpPacketsSent = fieldSetFlags()[88] ? this.perDscpPacketsSent : (java.lang.Double) defaultValue(fields()[88]);
        record.encoderImplementation = fieldSetFlags()[89] ? this.encoderImplementation : (java.lang.String) defaultValue(fields()[89]);
        record.roundTripTime = fieldSetFlags()[90] ? this.roundTripTime : (java.lang.Double) defaultValue(fields()[90]);
        record.totalRoundTripTime = fieldSetFlags()[91] ? this.totalRoundTripTime : (java.lang.Double) defaultValue(fields()[91]);
        record.fractionLost = fieldSetFlags()[92] ? this.fractionLost : (java.lang.Double) defaultValue(fields()[92]);
        record.reportsReceived = fieldSetFlags()[93] ? this.reportsReceived : (java.lang.Integer) defaultValue(fields()[93]);
        record.roundTripTimeMeasurements = fieldSetFlags()[94] ? this.roundTripTimeMeasurements : (java.lang.Integer) defaultValue(fields()[94]);
        record.relayedSource = fieldSetFlags()[95] ? this.relayedSource : (java.lang.Boolean) defaultValue(fields()[95]);
        record.audioLevel = fieldSetFlags()[96] ? this.audioLevel : (java.lang.Double) defaultValue(fields()[96]);
        record.totalAudioEnergy = fieldSetFlags()[97] ? this.totalAudioEnergy : (java.lang.Double) defaultValue(fields()[97]);
        record.totalSamplesDuration = fieldSetFlags()[98] ? this.totalSamplesDuration : (java.lang.Double) defaultValue(fields()[98]);
        record.echoReturnLoss = fieldSetFlags()[99] ? this.echoReturnLoss : (java.lang.Double) defaultValue(fields()[99]);
        record.echoReturnLossEnhancement = fieldSetFlags()[100] ? this.echoReturnLossEnhancement : (java.lang.Double) defaultValue(fields()[100]);
        record.framesSent = fieldSetFlags()[101] ? this.framesSent : (java.lang.Integer) defaultValue(fields()[101]);
        record.hugeFramesSent = fieldSetFlags()[102] ? this.hugeFramesSent : (java.lang.Integer) defaultValue(fields()[102]);
        record.framesEncoded = fieldSetFlags()[103] ? this.framesEncoded : (java.lang.Integer) defaultValue(fields()[103]);
        record.keyFramesEncoded = fieldSetFlags()[104] ? this.keyFramesEncoded : (java.lang.Integer) defaultValue(fields()[104]);
        record.framesDiscardedOnSend = fieldSetFlags()[105] ? this.framesDiscardedOnSend : (java.lang.Integer) defaultValue(fields()[105]);
        record.totalEncodeTime = fieldSetFlags()[106] ? this.totalEncodeTime : (java.lang.Double) defaultValue(fields()[106]);
        record.qualityLimitationDurationCPU = fieldSetFlags()[107] ? this.qualityLimitationDurationCPU : (java.lang.Double) defaultValue(fields()[107]);
        record.qualityLimitationDurationNone = fieldSetFlags()[108] ? this.qualityLimitationDurationNone : (java.lang.Double) defaultValue(fields()[108]);
        record.qualityLimitationDurationBandwidth = fieldSetFlags()[109] ? this.qualityLimitationDurationBandwidth : (java.lang.Double) defaultValue(fields()[109]);
        record.qualityLimitationDurationOther = fieldSetFlags()[110] ? this.qualityLimitationDurationOther : (java.lang.Double) defaultValue(fields()[110]);
        record.qualityLimitationReason = fieldSetFlags()[111] ? this.qualityLimitationReason : (java.lang.String) defaultValue(fields()[111]);
        record.qualityLimitationResolutionChanges = fieldSetFlags()[112] ? this.qualityLimitationResolutionChanges : (java.lang.Integer) defaultValue(fields()[112]);
        record.encodedFrameWidth = fieldSetFlags()[113] ? this.encodedFrameWidth : (java.lang.Integer) defaultValue(fields()[113]);
        record.encodedFrameHeight = fieldSetFlags()[114] ? this.encodedFrameHeight : (java.lang.Integer) defaultValue(fields()[114]);
        record.encodedFrameBitDepth = fieldSetFlags()[115] ? this.encodedFrameBitDepth : (java.lang.Integer) defaultValue(fields()[115]);
        record.encodedFramesPerSecond = fieldSetFlags()[116] ? this.encodedFramesPerSecond : (java.lang.Double) defaultValue(fields()[116]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
