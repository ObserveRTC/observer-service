micronaut:
  server:
    port: ${APPLICATION_SERVER_PORT:7080}
    application:
      name: "webrtc-observer"
  heartbeat:
    enabled: true
  metrics:
    enabled: ${METRICS_ENABLED:True}
    export:
      prometheus:
        enabled: true
        descriptions: true
        step: PT1M
  security:
    enabled: false

---
endpoints:
  all:
    port: ${APPLICATION_MANAGEMENT_PORT:7081}
  prometheus:
    enabled: true
    sensitive: false
  health:
    enabled: true
    sensitive: false
  logout:
    get-allowed: true
---
observer:
  security:
    websockets:
      expirationInMin: 0
    ipAddressConverter:
      enabled: False
      algorithm: SHA-256
      salt: "MySalt"

  obfuscations:
    enabled: false
    obfuscate-ice-addresses: ANONYMIZATION
    obfuscate-user-id: ANONYMIZATION
    obfuscate-room-id: NONE
    anonymization:
      hash-algorithm: "SHA-512"
      salt: "mySuperSalt"


  sources:
    pcSamples:
      enabled: true
      defaultServiceName: "defaultServiceName"
      security:
        dropUnknownServices: false
    clientSamples:
      enabled: true
    sfuSamples:
      enabled: true

  repositories:
    mediaTracksMaxIdleTime: 300
    peerConnectionsMaxIdleTime: 300
    clientMaxIdleTime: 300
    sfuMaxIdleTime: 60
    sfuTransportMaxIdleTime: 600
    sfuRtpPadMaxIdleTime: 600
    eventsCollectingTimeInS: 3

  evaluators:
    impairablePCsCallName: "impairable-peer-connections-default-call-name"
    clientSamplesBufferMaxTimeInS: 30
    clientSamplesBufferMaxItems: 1000
    sfuSamplesBufferMaxTimeInS: 5
    sfuSamplesBufferMaxItems: 1000
    sfuReportsPreCollectingTimeInS: 3
    sfuReportsPreCollectingMaxItems: 1000
    clientReportsPreCollectingTimeInS: 3
    clientReportsPreCollectingMaxItems: 1000

#  sinks:
#    MyLogger:
#      type: LoggerSink
#      config:
#        printReports: true
#        printTypeSummary: true

#    MySocketIO:
#      type: SocketIOSink
#      config:
#        uri: "http://localhost:5080"

#    MyWebsocket:
#      type: WebsocketSink
#      config:
#        uri: "ws://localhost:1880/ws/samples"

#    MyKafka:
#      type: KafkaSink
#      config:
#        muxReports: true
#        muxTopic: "observertc-reports"
#        demuxTopicPrefix: "ortc_"
#        properties:
#          bootstrap.servers: localhost:9092

#    MyMongo:
#      type: MongoSink
#      config:
#        uri: "mongodb://root:password@localhost:27017"
#        database: "reports"

  outboundReports:
    keyAssignmentStrategy:
    reportFormat: JSON
    reportObserverEvents: true
    reportCallEvents: true
    reportCallMeta: true
    reportClientExtensions: true
    reportInboundAudioTracks: true
    reportInboundVideoTracks: true
    reportOutboundAudioTracks: true
    reportOutboundVideoTracks: true
    reportClientTransports: true
    reportClientDataChannels: true
    reportMediaTracks: true
    reportSfuEvents: true
    reportSfuMeta: true
    reportSfuTransports: true

    reportSfuSctpStreams: true

    reportSfuOutboundRtpStreams: true
    reportSfuInboundRtpStreams: true

    reportSfuRtpPadOnlyWithCallId: true

  hazelcast:
    configFile: ${HAZELCAST_CONFIG_FILE:`classpath:hazelcast.yaml`}
    memberNamesPool:
      - "Lisa"
      - "Bart"
      - "Homer"
      - "Marge"
      - "Maggie"
      - "Barney"
      - "Mo"
      - "Ned"
      - "Milhouse"
      - "Grampa"
      - "Krusty"
      - "Smithers"
      - "Ralph"
      - "Tony"
      - "Jacqueline"
      - "Nelson"

