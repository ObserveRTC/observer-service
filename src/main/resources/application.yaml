micronaut:
  server:
    port: ${APPLICATION_SERVER_PORT:7080}
    application:
      name: "webrtc-observer"
  heartbeat:
    enabled: true
  metrics:
    enabled: ${METRICS_ENABLED:True}
    export:
      prometheus:
        enabled: true
        descriptions: true
        step: PT1M
  security:
    enabled: false

---
endpoints:
  all:
    port: ${APPLICATION_MANAGEMENT_PORT:7081}
  prometheus:
    enabled: true
    sensitive: false
  health:
    enabled: true
    sensitive: false
  logout:
    get-allowed: true
---
observer:
  security:
    websockets:
      expirationInMin: 0
    ipAddressConverter:
      enabled: False
      algorithm: SHA-256
      salt: "MySalt"

  obfuscations:
    enabled: false
    obfuscate-ice-addresses: ANONYMIZATION
    obfuscate-user-id: ANONYMIZATION
    obfuscate-room-id: NONE
    anonymization:
      hash-algorithm: "SHA-512"
      salt: "mySuperSalt"


  sources:
#    allowedServiceIds: []
    restapi:
      acceptClientSamples: true
      acceptSfuSamples: true
      maxClientSamplesBatch: 100
      maxSfuSamplesBatch: 100

    websockets:
      enabled: true
      maxClientSamplesBatch: 100
      maxSfuSamplesBatch: 100
      decrypter:
        type: AES-256
        config:
          key: ${AES-KEY}
#      decompressor:
#        type: JSZIP
#        config:
#          key: value

  repository:
    mediaTracksMaxIdleTime: 300
    peerConnectionsMaxIdleTime: 300
    clientMaxIdleTime: 300
    sfuMaxIdleTime: 60
    sfuTransportMaxIdleTime: 600
    sfuRtpPadMaxIdleTime: 600

  buffers:
    repositoryEventsDebouncers:
      maxItems: 100
      maxTimeInS: 3

    clientSamples:
      maxItems: 100
      maxTimeInS: 10

    sfuSamples:
      maxItems: 100
      maxTimeInS: 10

    clientProcessDebouncers:
      maxItems: 10000
      maxTimeInS: 3

    sfuProcessDebouncers:
      maxItems: 10000
      maxTimeInS: 3

    outboundReports:
      maxItems: 10000
      maxTimeInS: 10

  evaluators: {}

#  sinks:
#    MyLogger:
#      type: LoggerSink
#      config:
#        printReports: true
#        printTypeSummary: true

#    MySocketIO:
#      type: SocketIOSink
#      config:
#        uri: "http://localhost:5080"

#    MyWebsocket:
#      type: WebsocketSink
#      config:
#        uri: "ws://localhost:1880/ws/samples"

#    MyKafka:
#      type: KafkaSink
#      config:
#        muxReports: false
##        muxTopic: "observertc-reports"
#        demuxTopicPrefix: "observertc-"
#        properties:
#          bootstrap.servers: localhost:9092

#    MyMongo:
#      type: MongoSink
#      config:
#        uri: "mongodb://root:password@localhost:27017"
#        database: "reports"

  reports:
    format: JSON
    sendObserverEvents: true
    sendCallEvents: true
    sendCallMeta: true
    sendClientExtensions: true
    sendInboundAudioTracks: true
    sendInboundVideoTracks: true
    sendOutboundAudioTracks: true
    sendOutboundVideoTracks: true
    sendClientTransports: true
    sendClientDataChannels: true
    sendMediaTracks: true
    sendSfuEvents: true
    sendSfuMeta: true
    sendSfuTransports: true
    sendSfuSctpStreams: true
    sendSfuOutboundRtpStreams: true
    sendSfuInboundRtpStreams: true
    reportSfuRtpPadOnlyWithCallId: 10

  hazelcast:
    configFile: ${HAZELCAST_CONFIG_FILE:`classpath:hazelcast.yaml`}
    # for more information which level what represent take a look: java.util.logging.Level
    # Possible values are: ALL, FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE
#    logs:
#      - "CONFIG"
#      - "WARNING"
#      - "SEVERE"
    config:
      cluster-name: my-hz-cluster
    memberNamesPool:
      - "Lisa"
      - "Bart"
      - "Homer"
      - "Marge"
      - "Maggie"
      - "Barney"
      - "Mo"
      - "Ned"
      - "Milhouse"
      - "Grampa"
      - "Krusty"
      - "Smithers"
      - "Ralph"
      - "Tony"
      - "Jacqueline"
      - "Nelson"

