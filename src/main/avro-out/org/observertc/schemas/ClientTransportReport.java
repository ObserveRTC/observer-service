/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A Report created for Client PeerConnection Transport. It is a combination of Transport report, sender, receiver, local, remote and candidate pair of ICE together with the used certificates */
@org.apache.avro.specific.AvroGenerated
public class ClientTransportReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8075768290929072675L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientTransportReport\",\"namespace\":\"org.observertc.schemas\",\"doc\":\"A Report created for Client PeerConnection Transport. It is a combination of Transport report, sender, receiver, local, remote and candidate pair of ICE together with the used certificates\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is marked with\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of packets sent on the corresponded transport\",\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of packets received on the corresponded transport\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the total amount of bytes sent on the corresponded transport\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the total amount of bytes received on the corresponded transport\",\"default\":null},{\"name\":\"iceRole\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current role of ICE under DTLS Transport\",\"default\":null},{\"name\":\"iceLocalUsernameFragment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport\",\"default\":null},{\"name\":\"dtlsState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the current state of DTLS for the peer connection transport layer\",\"default\":null},{\"name\":\"iceTransportState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer\",\"default\":null},{\"name\":\"tlsVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the version number of the TLS used in the corresponded transport\",\"default\":null},{\"name\":\"dtlsCipher\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the DTLS cipher used in the corresponded transport\",\"default\":null},{\"name\":\"srtpCipher\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the SRTP cipher used in the corresponded transport\",\"default\":null},{\"name\":\"tlsGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Represents the name of the IANA TLS Supported Groups used in the corresponded transport\",\"default\":null},{\"name\":\"selectedCandidatePairChanges\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of candidate pair changes over the peer connection\",\"default\":null},{\"name\":\"localAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address of the candidate (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"localPort\",\"type\":[\"null\",\"int\"],\"doc\":\"The locally used port to communicate with the remote peer\",\"default\":null},{\"name\":\"localProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used by the local endpoint for the corresponded transport\",\"default\":null},{\"name\":\"localCandidateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the ICE candidate used at the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"localCandidateICEServerUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The url of the ICE server used by the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"localCandidateRelayProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address of the candidate (IPv4, IPv6, FQDN)\",\"default\":null},{\"name\":\"remotePort\",\"type\":[\"null\",\"int\"],\"doc\":\"The remotely used port to communicate with the remote peer\",\"default\":null},{\"name\":\"remoteProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The protocol used by the remote endpoint for the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the ICE candidate used at the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateICEServerUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The url of the ICE server used by the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"remoteCandidateRelayProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport\",\"default\":null},{\"name\":\"candidatePairState\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport\",\"default\":null},{\"name\":\"candidatePairPacketsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets sent using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes sent using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total number of bytes received using the last selected candidate pair over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairLastPacketSentTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"candidatePairLastPacketReceivedTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"candidatePairFirstRequestTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"candidatePairLastRequestTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"candidatePairLastResponseTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the last STUN res","ponse was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)\",\"default\":null},{\"name\":\"candidatePairTotalRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairCurrentRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairAvailableOutgoingBitrate\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairAvailableIncomingBitrate\",\"type\":[\"null\",\"double\"],\"doc\":\"The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport\",\"default\":null},{\"name\":\"candidatePairCircuitBreakerTriggerCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair\",\"default\":null},{\"name\":\"candidatePairRequestsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRequestsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponsesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponsesSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRetransmissionReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRetransmissionSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentRequestsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentExpiredTimestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairBytesDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairPacketsDiscardedOnSend\",\"type\":[\"null\",\"long\"],\"doc\":\"Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairRequestBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairConsentRequestBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"candidatePairResponseBytesSent\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport\",\"default\":null},{\"name\":\"sctpSmoothedRoundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. \",\"default\":null},{\"name\":\"sctpCongestionWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest congestion window, corresponding to spinfo_cwnd.\",\"default\":null},{\"name\":\"sctpReceiverWindow\",\"type\":[\"null\",\"double\"],\"doc\":\"The latest receiver window, corresponding to sstat_rwnd.\",\"default\":null},{\"name\":\"sctpMtu\",\"type\":[\"null\",\"int\"],\"doc\":\"The latest maximum transmission unit, corresponding to spinfo_mtu.\",\"default\":null},{\"name\":\"sctpUnackData\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClientTransportReport> ENCODER =
      new BinaryMessageEncoder<ClientTransportReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClientTransportReport> DECODER =
      new BinaryMessageDecoder<ClientTransportReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClientTransportReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClientTransportReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClientTransportReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClientTransportReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClientTransportReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClientTransportReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClientTransportReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClientTransportReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the service */
  private java.lang.String serviceId;
  /** The media unit id the report belongs to */
  private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
  private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
  private long timestamp;
  /** The generated unique identifier of the call */
  private java.lang.String callId;
  /** webrtc app provided room id */
  private java.lang.String roomId;
  /** The generated unique identifier of the client */
  private java.lang.String clientId;
  /** webrtc app provided user identifier */
  private java.lang.String userId;
  /** The unique identifier of the peer connection */
  private java.lang.String peerConnectionId;
  /** The webrtc app provided label the peer connection is marked with */
  private java.lang.String label;
  /** Represents the total number of packets sent on the corresponded transport */
  private java.lang.Integer packetsSent;
  /** Represents the total number of packets received on the corresponded transport */
  private java.lang.Integer packetsReceived;
  /** Represents the total amount of bytes sent on the corresponded transport */
  private java.lang.Long bytesSent;
  /** Represents the total amount of bytes received on the corresponded transport */
  private java.lang.Long bytesReceived;
  /** Represent the current role of ICE under DTLS Transport */
  private java.lang.String iceRole;
  /** Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport */
  private java.lang.String iceLocalUsernameFragment;
  /** Represents the current state of DTLS for the peer connection transport layer */
  private java.lang.String dtlsState;
  /** Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer */
  private java.lang.String iceTransportState;
  /** Represents the version number of the TLS used in the corresponded transport */
  private java.lang.String tlsVersion;
  /** Represents the name of the DTLS cipher used in the corresponded transport */
  private java.lang.String dtlsCipher;
  /** Represents the name of the SRTP cipher used in the corresponded transport */
  private java.lang.String srtpCipher;
  /** Represents the name of the IANA TLS Supported Groups used in the corresponded transport */
  private java.lang.String tlsGroup;
  /** The total number of candidate pair changes over the peer connection */
  private java.lang.Integer selectedCandidatePairChanges;
  /** The address of the candidate (IPv4, IPv6, FQDN) */
  private java.lang.String localAddress;
  /** The locally used port to communicate with the remote peer */
  private java.lang.Integer localPort;
  /** The protocol used by the local endpoint for the corresponded transport */
  private java.lang.String localProtocol;
  /** The type of the ICE candidate used at the local endpoint on the corresponded transport */
  private java.lang.String localCandidateType;
  /** The url of the ICE server used by the local endpoint on the corresponded transport */
  private java.lang.String localCandidateICEServerUrl;
  /** The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport */
  private java.lang.String localCandidateRelayProtocol;
  /** The address of the candidate (IPv4, IPv6, FQDN) */
  private java.lang.String remoteAddress;
  /** The remotely used port to communicate with the remote peer */
  private java.lang.Integer remotePort;
  /** The protocol used by the remote endpoint for the corresponded transport */
  private java.lang.String remoteProtocol;
  /** The type of the ICE candidate used at the remote endpoint on the corresponded transport */
  private java.lang.String remoteCandidateType;
  /** The url of the ICE server used by the remote endpoint on the corresponded transport */
  private java.lang.String remoteCandidateICEServerUrl;
  /** The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport */
  private java.lang.String remoteCandidateRelayProtocol;
  /** The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport */
  private java.lang.String candidatePairState;
  /** The total number of packets sent using the last selected candidate pair over the corresponded transport */
  private java.lang.Integer candidatePairPacketsSent;
  /** The total number of packets received using the last selected candidate pair over the corresponded transport */
  private java.lang.Integer candidatePairPacketsReceived;
  /** The total number of bytes sent using the last selected candidate pair over the corresponded transport */
  private java.lang.Long candidatePairBytesSent;
  /** The total number of bytes received using the last selected candidate pair over the corresponded transport */
  private java.lang.Long candidatePairBytesReceived;
  /** Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
  private java.lang.Long candidatePairLastPacketSentTimestamp;
  /** Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
  private java.lang.Long candidatePairLastPacketReceivedTimestamp;
  /** Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
  private java.lang.Long candidatePairFirstRequestTimestamp;
  /** Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
  private java.lang.Long candidatePairLastRequestTimestamp;
  /** Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
  private java.lang.Long candidatePairLastResponseTimestamp;
  /** Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport */
  private java.lang.Double candidatePairTotalRoundTripTime;
  /** Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport */
  private java.lang.Double candidatePairCurrentRoundTripTime;
  /** The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport */
  private java.lang.Double candidatePairAvailableOutgoingBitrate;
  /** The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport */
  private java.lang.Double candidatePairAvailableIncomingBitrate;
  /** The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair */
  private java.lang.Integer candidatePairCircuitBreakerTriggerCount;
  /** Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairRequestsReceived;
  /** Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairRequestsSent;
  /** Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairResponsesReceived;
  /** Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairResponsesSent;
  /** Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairRetransmissionReceived;
  /** Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairRetransmissionSent;
  /** Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport */
  private java.lang.Integer candidatePairConsentRequestsSent;
  /** Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairConsentExpiredTimestamp;
  /** Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairBytesDiscardedOnSend;
  /** Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairPacketsDiscardedOnSend;
  /** Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairRequestBytesSent;
  /** Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairConsentRequestBytesSent;
  /** Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport */
  private java.lang.Long candidatePairResponseBytesSent;
  /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds.  */
  private java.lang.Double sctpSmoothedRoundTripTime;
  /** The latest congestion window, corresponding to spinfo_cwnd. */
  private java.lang.Double sctpCongestionWindow;
  /** The latest receiver window, corresponding to sstat_rwnd. */
  private java.lang.Double sctpReceiverWindow;
  /** The latest maximum transmission unit, corresponding to spinfo_mtu. */
  private java.lang.Integer sctpMtu;
  /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata. */
  private java.lang.Integer sctpUnackData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientTransportReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is marked with
   * @param packetsSent Represents the total number of packets sent on the corresponded transport
   * @param packetsReceived Represents the total number of packets received on the corresponded transport
   * @param bytesSent Represents the total amount of bytes sent on the corresponded transport
   * @param bytesReceived Represents the total amount of bytes received on the corresponded transport
   * @param iceRole Represent the current role of ICE under DTLS Transport
   * @param iceLocalUsernameFragment Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
   * @param dtlsState Represents the current state of DTLS for the peer connection transport layer
   * @param iceTransportState Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
   * @param tlsVersion Represents the version number of the TLS used in the corresponded transport
   * @param dtlsCipher Represents the name of the DTLS cipher used in the corresponded transport
   * @param srtpCipher Represents the name of the SRTP cipher used in the corresponded transport
   * @param tlsGroup Represents the name of the IANA TLS Supported Groups used in the corresponded transport
   * @param selectedCandidatePairChanges The total number of candidate pair changes over the peer connection
   * @param localAddress The address of the candidate (IPv4, IPv6, FQDN)
   * @param localPort The locally used port to communicate with the remote peer
   * @param localProtocol The protocol used by the local endpoint for the corresponded transport
   * @param localCandidateType The type of the ICE candidate used at the local endpoint on the corresponded transport
   * @param localCandidateICEServerUrl The url of the ICE server used by the local endpoint on the corresponded transport
   * @param localCandidateRelayProtocol The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
   * @param remoteAddress The address of the candidate (IPv4, IPv6, FQDN)
   * @param remotePort The remotely used port to communicate with the remote peer
   * @param remoteProtocol The protocol used by the remote endpoint for the corresponded transport
   * @param remoteCandidateType The type of the ICE candidate used at the remote endpoint on the corresponded transport
   * @param remoteCandidateICEServerUrl The url of the ICE server used by the remote endpoint on the corresponded transport
   * @param remoteCandidateRelayProtocol The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
   * @param candidatePairState The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
   * @param candidatePairPacketsSent The total number of packets sent using the last selected candidate pair over the corresponded transport
   * @param candidatePairPacketsReceived The total number of packets received using the last selected candidate pair over the corresponded transport
   * @param candidatePairBytesSent The total number of bytes sent using the last selected candidate pair over the corresponded transport
   * @param candidatePairBytesReceived The total number of bytes received using the last selected candidate pair over the corresponded transport
   * @param candidatePairLastPacketSentTimestamp Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   * @param candidatePairLastPacketReceivedTimestamp Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   * @param candidatePairFirstRequestTimestamp Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param candidatePairLastRequestTimestamp Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param candidatePairLastResponseTimestamp Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   * @param candidatePairTotalRoundTripTime Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
   * @param candidatePairCurrentRoundTripTime Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
   * @param candidatePairAvailableOutgoingBitrate The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
   * @param candidatePairAvailableIncomingBitrate The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
   * @param candidatePairCircuitBreakerTriggerCount The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
   * @param candidatePairRequestsReceived Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
   * @param candidatePairRequestsSent Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
   * @param candidatePairResponsesReceived Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
   * @param candidatePairResponsesSent Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
   * @param candidatePairRetransmissionReceived Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
   * @param candidatePairRetransmissionSent Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentRequestsSent Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentExpiredTimestamp Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
   * @param candidatePairBytesDiscardedOnSend Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   * @param candidatePairPacketsDiscardedOnSend Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   * @param candidatePairRequestBytesSent Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
   * @param candidatePairConsentRequestBytesSent Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
   * @param candidatePairResponseBytesSent Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
   * @param sctpSmoothedRoundTripTime The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
   * @param sctpCongestionWindow The latest congestion window, corresponding to spinfo_cwnd.
   * @param sctpReceiverWindow The latest receiver window, corresponding to sstat_rwnd.
   * @param sctpMtu The latest maximum transmission unit, corresponding to spinfo_mtu.
   * @param sctpUnackData The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
   */
  public ClientTransportReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String label, java.lang.Integer packetsSent, java.lang.Integer packetsReceived, java.lang.Long bytesSent, java.lang.Long bytesReceived, java.lang.String iceRole, java.lang.String iceLocalUsernameFragment, java.lang.String dtlsState, java.lang.String iceTransportState, java.lang.String tlsVersion, java.lang.String dtlsCipher, java.lang.String srtpCipher, java.lang.String tlsGroup, java.lang.Integer selectedCandidatePairChanges, java.lang.String localAddress, java.lang.Integer localPort, java.lang.String localProtocol, java.lang.String localCandidateType, java.lang.String localCandidateICEServerUrl, java.lang.String localCandidateRelayProtocol, java.lang.String remoteAddress, java.lang.Integer remotePort, java.lang.String remoteProtocol, java.lang.String remoteCandidateType, java.lang.String remoteCandidateICEServerUrl, java.lang.String remoteCandidateRelayProtocol, java.lang.String candidatePairState, java.lang.Integer candidatePairPacketsSent, java.lang.Integer candidatePairPacketsReceived, java.lang.Long candidatePairBytesSent, java.lang.Long candidatePairBytesReceived, java.lang.Long candidatePairLastPacketSentTimestamp, java.lang.Long candidatePairLastPacketReceivedTimestamp, java.lang.Long candidatePairFirstRequestTimestamp, java.lang.Long candidatePairLastRequestTimestamp, java.lang.Long candidatePairLastResponseTimestamp, java.lang.Double candidatePairTotalRoundTripTime, java.lang.Double candidatePairCurrentRoundTripTime, java.lang.Double candidatePairAvailableOutgoingBitrate, java.lang.Double candidatePairAvailableIncomingBitrate, java.lang.Integer candidatePairCircuitBreakerTriggerCount, java.lang.Integer candidatePairRequestsReceived, java.lang.Integer candidatePairRequestsSent, java.lang.Integer candidatePairResponsesReceived, java.lang.Integer candidatePairResponsesSent, java.lang.Integer candidatePairRetransmissionReceived, java.lang.Integer candidatePairRetransmissionSent, java.lang.Integer candidatePairConsentRequestsSent, java.lang.Long candidatePairConsentExpiredTimestamp, java.lang.Long candidatePairBytesDiscardedOnSend, java.lang.Long candidatePairPacketsDiscardedOnSend, java.lang.Long candidatePairRequestBytesSent, java.lang.Long candidatePairConsentRequestBytesSent, java.lang.Long candidatePairResponseBytesSent, java.lang.Double sctpSmoothedRoundTripTime, java.lang.Double sctpCongestionWindow, java.lang.Double sctpReceiverWindow, java.lang.Integer sctpMtu, java.lang.Integer sctpUnackData) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.packetsSent = packetsSent;
    this.packetsReceived = packetsReceived;
    this.bytesSent = bytesSent;
    this.bytesReceived = bytesReceived;
    this.iceRole = iceRole;
    this.iceLocalUsernameFragment = iceLocalUsernameFragment;
    this.dtlsState = dtlsState;
    this.iceTransportState = iceTransportState;
    this.tlsVersion = tlsVersion;
    this.dtlsCipher = dtlsCipher;
    this.srtpCipher = srtpCipher;
    this.tlsGroup = tlsGroup;
    this.selectedCandidatePairChanges = selectedCandidatePairChanges;
    this.localAddress = localAddress;
    this.localPort = localPort;
    this.localProtocol = localProtocol;
    this.localCandidateType = localCandidateType;
    this.localCandidateICEServerUrl = localCandidateICEServerUrl;
    this.localCandidateRelayProtocol = localCandidateRelayProtocol;
    this.remoteAddress = remoteAddress;
    this.remotePort = remotePort;
    this.remoteProtocol = remoteProtocol;
    this.remoteCandidateType = remoteCandidateType;
    this.remoteCandidateICEServerUrl = remoteCandidateICEServerUrl;
    this.remoteCandidateRelayProtocol = remoteCandidateRelayProtocol;
    this.candidatePairState = candidatePairState;
    this.candidatePairPacketsSent = candidatePairPacketsSent;
    this.candidatePairPacketsReceived = candidatePairPacketsReceived;
    this.candidatePairBytesSent = candidatePairBytesSent;
    this.candidatePairBytesReceived = candidatePairBytesReceived;
    this.candidatePairLastPacketSentTimestamp = candidatePairLastPacketSentTimestamp;
    this.candidatePairLastPacketReceivedTimestamp = candidatePairLastPacketReceivedTimestamp;
    this.candidatePairFirstRequestTimestamp = candidatePairFirstRequestTimestamp;
    this.candidatePairLastRequestTimestamp = candidatePairLastRequestTimestamp;
    this.candidatePairLastResponseTimestamp = candidatePairLastResponseTimestamp;
    this.candidatePairTotalRoundTripTime = candidatePairTotalRoundTripTime;
    this.candidatePairCurrentRoundTripTime = candidatePairCurrentRoundTripTime;
    this.candidatePairAvailableOutgoingBitrate = candidatePairAvailableOutgoingBitrate;
    this.candidatePairAvailableIncomingBitrate = candidatePairAvailableIncomingBitrate;
    this.candidatePairCircuitBreakerTriggerCount = candidatePairCircuitBreakerTriggerCount;
    this.candidatePairRequestsReceived = candidatePairRequestsReceived;
    this.candidatePairRequestsSent = candidatePairRequestsSent;
    this.candidatePairResponsesReceived = candidatePairResponsesReceived;
    this.candidatePairResponsesSent = candidatePairResponsesSent;
    this.candidatePairRetransmissionReceived = candidatePairRetransmissionReceived;
    this.candidatePairRetransmissionSent = candidatePairRetransmissionSent;
    this.candidatePairConsentRequestsSent = candidatePairConsentRequestsSent;
    this.candidatePairConsentExpiredTimestamp = candidatePairConsentExpiredTimestamp;
    this.candidatePairBytesDiscardedOnSend = candidatePairBytesDiscardedOnSend;
    this.candidatePairPacketsDiscardedOnSend = candidatePairPacketsDiscardedOnSend;
    this.candidatePairRequestBytesSent = candidatePairRequestBytesSent;
    this.candidatePairConsentRequestBytesSent = candidatePairConsentRequestBytesSent;
    this.candidatePairResponseBytesSent = candidatePairResponseBytesSent;
    this.sctpSmoothedRoundTripTime = sctpSmoothedRoundTripTime;
    this.sctpCongestionWindow = sctpCongestionWindow;
    this.sctpReceiverWindow = sctpReceiverWindow;
    this.sctpMtu = sctpMtu;
    this.sctpUnackData = sctpUnackData;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return label;
    case 10: return packetsSent;
    case 11: return packetsReceived;
    case 12: return bytesSent;
    case 13: return bytesReceived;
    case 14: return iceRole;
    case 15: return iceLocalUsernameFragment;
    case 16: return dtlsState;
    case 17: return iceTransportState;
    case 18: return tlsVersion;
    case 19: return dtlsCipher;
    case 20: return srtpCipher;
    case 21: return tlsGroup;
    case 22: return selectedCandidatePairChanges;
    case 23: return localAddress;
    case 24: return localPort;
    case 25: return localProtocol;
    case 26: return localCandidateType;
    case 27: return localCandidateICEServerUrl;
    case 28: return localCandidateRelayProtocol;
    case 29: return remoteAddress;
    case 30: return remotePort;
    case 31: return remoteProtocol;
    case 32: return remoteCandidateType;
    case 33: return remoteCandidateICEServerUrl;
    case 34: return remoteCandidateRelayProtocol;
    case 35: return candidatePairState;
    case 36: return candidatePairPacketsSent;
    case 37: return candidatePairPacketsReceived;
    case 38: return candidatePairBytesSent;
    case 39: return candidatePairBytesReceived;
    case 40: return candidatePairLastPacketSentTimestamp;
    case 41: return candidatePairLastPacketReceivedTimestamp;
    case 42: return candidatePairFirstRequestTimestamp;
    case 43: return candidatePairLastRequestTimestamp;
    case 44: return candidatePairLastResponseTimestamp;
    case 45: return candidatePairTotalRoundTripTime;
    case 46: return candidatePairCurrentRoundTripTime;
    case 47: return candidatePairAvailableOutgoingBitrate;
    case 48: return candidatePairAvailableIncomingBitrate;
    case 49: return candidatePairCircuitBreakerTriggerCount;
    case 50: return candidatePairRequestsReceived;
    case 51: return candidatePairRequestsSent;
    case 52: return candidatePairResponsesReceived;
    case 53: return candidatePairResponsesSent;
    case 54: return candidatePairRetransmissionReceived;
    case 55: return candidatePairRetransmissionSent;
    case 56: return candidatePairConsentRequestsSent;
    case 57: return candidatePairConsentExpiredTimestamp;
    case 58: return candidatePairBytesDiscardedOnSend;
    case 59: return candidatePairPacketsDiscardedOnSend;
    case 60: return candidatePairRequestBytesSent;
    case 61: return candidatePairConsentRequestBytesSent;
    case 62: return candidatePairResponseBytesSent;
    case 63: return sctpSmoothedRoundTripTime;
    case 64: return sctpCongestionWindow;
    case 65: return sctpReceiverWindow;
    case 66: return sctpMtu;
    case 67: return sctpUnackData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 2: marker = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = value$ != null ? value$.toString() : null; break;
    case 5: roomId = value$ != null ? value$.toString() : null; break;
    case 6: clientId = value$ != null ? value$.toString() : null; break;
    case 7: userId = value$ != null ? value$.toString() : null; break;
    case 8: peerConnectionId = value$ != null ? value$.toString() : null; break;
    case 9: label = value$ != null ? value$.toString() : null; break;
    case 10: packetsSent = (java.lang.Integer)value$; break;
    case 11: packetsReceived = (java.lang.Integer)value$; break;
    case 12: bytesSent = (java.lang.Long)value$; break;
    case 13: bytesReceived = (java.lang.Long)value$; break;
    case 14: iceRole = value$ != null ? value$.toString() : null; break;
    case 15: iceLocalUsernameFragment = value$ != null ? value$.toString() : null; break;
    case 16: dtlsState = value$ != null ? value$.toString() : null; break;
    case 17: iceTransportState = value$ != null ? value$.toString() : null; break;
    case 18: tlsVersion = value$ != null ? value$.toString() : null; break;
    case 19: dtlsCipher = value$ != null ? value$.toString() : null; break;
    case 20: srtpCipher = value$ != null ? value$.toString() : null; break;
    case 21: tlsGroup = value$ != null ? value$.toString() : null; break;
    case 22: selectedCandidatePairChanges = (java.lang.Integer)value$; break;
    case 23: localAddress = value$ != null ? value$.toString() : null; break;
    case 24: localPort = (java.lang.Integer)value$; break;
    case 25: localProtocol = value$ != null ? value$.toString() : null; break;
    case 26: localCandidateType = value$ != null ? value$.toString() : null; break;
    case 27: localCandidateICEServerUrl = value$ != null ? value$.toString() : null; break;
    case 28: localCandidateRelayProtocol = value$ != null ? value$.toString() : null; break;
    case 29: remoteAddress = value$ != null ? value$.toString() : null; break;
    case 30: remotePort = (java.lang.Integer)value$; break;
    case 31: remoteProtocol = value$ != null ? value$.toString() : null; break;
    case 32: remoteCandidateType = value$ != null ? value$.toString() : null; break;
    case 33: remoteCandidateICEServerUrl = value$ != null ? value$.toString() : null; break;
    case 34: remoteCandidateRelayProtocol = value$ != null ? value$.toString() : null; break;
    case 35: candidatePairState = value$ != null ? value$.toString() : null; break;
    case 36: candidatePairPacketsSent = (java.lang.Integer)value$; break;
    case 37: candidatePairPacketsReceived = (java.lang.Integer)value$; break;
    case 38: candidatePairBytesSent = (java.lang.Long)value$; break;
    case 39: candidatePairBytesReceived = (java.lang.Long)value$; break;
    case 40: candidatePairLastPacketSentTimestamp = (java.lang.Long)value$; break;
    case 41: candidatePairLastPacketReceivedTimestamp = (java.lang.Long)value$; break;
    case 42: candidatePairFirstRequestTimestamp = (java.lang.Long)value$; break;
    case 43: candidatePairLastRequestTimestamp = (java.lang.Long)value$; break;
    case 44: candidatePairLastResponseTimestamp = (java.lang.Long)value$; break;
    case 45: candidatePairTotalRoundTripTime = (java.lang.Double)value$; break;
    case 46: candidatePairCurrentRoundTripTime = (java.lang.Double)value$; break;
    case 47: candidatePairAvailableOutgoingBitrate = (java.lang.Double)value$; break;
    case 48: candidatePairAvailableIncomingBitrate = (java.lang.Double)value$; break;
    case 49: candidatePairCircuitBreakerTriggerCount = (java.lang.Integer)value$; break;
    case 50: candidatePairRequestsReceived = (java.lang.Integer)value$; break;
    case 51: candidatePairRequestsSent = (java.lang.Integer)value$; break;
    case 52: candidatePairResponsesReceived = (java.lang.Integer)value$; break;
    case 53: candidatePairResponsesSent = (java.lang.Integer)value$; break;
    case 54: candidatePairRetransmissionReceived = (java.lang.Integer)value$; break;
    case 55: candidatePairRetransmissionSent = (java.lang.Integer)value$; break;
    case 56: candidatePairConsentRequestsSent = (java.lang.Integer)value$; break;
    case 57: candidatePairConsentExpiredTimestamp = (java.lang.Long)value$; break;
    case 58: candidatePairBytesDiscardedOnSend = (java.lang.Long)value$; break;
    case 59: candidatePairPacketsDiscardedOnSend = (java.lang.Long)value$; break;
    case 60: candidatePairRequestBytesSent = (java.lang.Long)value$; break;
    case 61: candidatePairConsentRequestBytesSent = (java.lang.Long)value$; break;
    case 62: candidatePairResponseBytesSent = (java.lang.Long)value$; break;
    case 63: sctpSmoothedRoundTripTime = (java.lang.Double)value$; break;
    case 64: sctpCongestionWindow = (java.lang.Double)value$; break;
    case 65: sctpReceiverWindow = (java.lang.Double)value$; break;
    case 66: sctpMtu = (java.lang.Integer)value$; break;
    case 67: sctpUnackData = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }



  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }



  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }



  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is marked with
   */
  public java.lang.String getLabel() {
    return label;
  }



  /**
   * Gets the value of the 'packetsSent' field.
   * @return Represents the total number of packets sent on the corresponded transport
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }



  /**
   * Gets the value of the 'packetsReceived' field.
   * @return Represents the total number of packets received on the corresponded transport
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }



  /**
   * Gets the value of the 'bytesSent' field.
   * @return Represents the total amount of bytes sent on the corresponded transport
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }



  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Represents the total amount of bytes received on the corresponded transport
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }



  /**
   * Gets the value of the 'iceRole' field.
   * @return Represent the current role of ICE under DTLS Transport
   */
  public java.lang.String getIceRole() {
    return iceRole;
  }



  /**
   * Gets the value of the 'iceLocalUsernameFragment' field.
   * @return Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
   */
  public java.lang.String getIceLocalUsernameFragment() {
    return iceLocalUsernameFragment;
  }



  /**
   * Gets the value of the 'dtlsState' field.
   * @return Represents the current state of DTLS for the peer connection transport layer
   */
  public java.lang.String getDtlsState() {
    return dtlsState;
  }



  /**
   * Gets the value of the 'iceTransportState' field.
   * @return Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
   */
  public java.lang.String getIceTransportState() {
    return iceTransportState;
  }



  /**
   * Gets the value of the 'tlsVersion' field.
   * @return Represents the version number of the TLS used in the corresponded transport
   */
  public java.lang.String getTlsVersion() {
    return tlsVersion;
  }



  /**
   * Gets the value of the 'dtlsCipher' field.
   * @return Represents the name of the DTLS cipher used in the corresponded transport
   */
  public java.lang.String getDtlsCipher() {
    return dtlsCipher;
  }



  /**
   * Gets the value of the 'srtpCipher' field.
   * @return Represents the name of the SRTP cipher used in the corresponded transport
   */
  public java.lang.String getSrtpCipher() {
    return srtpCipher;
  }



  /**
   * Gets the value of the 'tlsGroup' field.
   * @return Represents the name of the IANA TLS Supported Groups used in the corresponded transport
   */
  public java.lang.String getTlsGroup() {
    return tlsGroup;
  }



  /**
   * Gets the value of the 'selectedCandidatePairChanges' field.
   * @return The total number of candidate pair changes over the peer connection
   */
  public java.lang.Integer getSelectedCandidatePairChanges() {
    return selectedCandidatePairChanges;
  }



  /**
   * Gets the value of the 'localAddress' field.
   * @return The address of the candidate (IPv4, IPv6, FQDN)
   */
  public java.lang.String getLocalAddress() {
    return localAddress;
  }



  /**
   * Gets the value of the 'localPort' field.
   * @return The locally used port to communicate with the remote peer
   */
  public java.lang.Integer getLocalPort() {
    return localPort;
  }



  /**
   * Gets the value of the 'localProtocol' field.
   * @return The protocol used by the local endpoint for the corresponded transport
   */
  public java.lang.String getLocalProtocol() {
    return localProtocol;
  }



  /**
   * Gets the value of the 'localCandidateType' field.
   * @return The type of the ICE candidate used at the local endpoint on the corresponded transport
   */
  public java.lang.String getLocalCandidateType() {
    return localCandidateType;
  }



  /**
   * Gets the value of the 'localCandidateICEServerUrl' field.
   * @return The url of the ICE server used by the local endpoint on the corresponded transport
   */
  public java.lang.String getLocalCandidateICEServerUrl() {
    return localCandidateICEServerUrl;
  }



  /**
   * Gets the value of the 'localCandidateRelayProtocol' field.
   * @return The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
   */
  public java.lang.String getLocalCandidateRelayProtocol() {
    return localCandidateRelayProtocol;
  }



  /**
   * Gets the value of the 'remoteAddress' field.
   * @return The address of the candidate (IPv4, IPv6, FQDN)
   */
  public java.lang.String getRemoteAddress() {
    return remoteAddress;
  }



  /**
   * Gets the value of the 'remotePort' field.
   * @return The remotely used port to communicate with the remote peer
   */
  public java.lang.Integer getRemotePort() {
    return remotePort;
  }



  /**
   * Gets the value of the 'remoteProtocol' field.
   * @return The protocol used by the remote endpoint for the corresponded transport
   */
  public java.lang.String getRemoteProtocol() {
    return remoteProtocol;
  }



  /**
   * Gets the value of the 'remoteCandidateType' field.
   * @return The type of the ICE candidate used at the remote endpoint on the corresponded transport
   */
  public java.lang.String getRemoteCandidateType() {
    return remoteCandidateType;
  }



  /**
   * Gets the value of the 'remoteCandidateICEServerUrl' field.
   * @return The url of the ICE server used by the remote endpoint on the corresponded transport
   */
  public java.lang.String getRemoteCandidateICEServerUrl() {
    return remoteCandidateICEServerUrl;
  }



  /**
   * Gets the value of the 'remoteCandidateRelayProtocol' field.
   * @return The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
   */
  public java.lang.String getRemoteCandidateRelayProtocol() {
    return remoteCandidateRelayProtocol;
  }



  /**
   * Gets the value of the 'candidatePairState' field.
   * @return The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
   */
  public java.lang.String getCandidatePairState() {
    return candidatePairState;
  }



  /**
   * Gets the value of the 'candidatePairPacketsSent' field.
   * @return The total number of packets sent using the last selected candidate pair over the corresponded transport
   */
  public java.lang.Integer getCandidatePairPacketsSent() {
    return candidatePairPacketsSent;
  }



  /**
   * Gets the value of the 'candidatePairPacketsReceived' field.
   * @return The total number of packets received using the last selected candidate pair over the corresponded transport
   */
  public java.lang.Integer getCandidatePairPacketsReceived() {
    return candidatePairPacketsReceived;
  }



  /**
   * Gets the value of the 'candidatePairBytesSent' field.
   * @return The total number of bytes sent using the last selected candidate pair over the corresponded transport
   */
  public java.lang.Long getCandidatePairBytesSent() {
    return candidatePairBytesSent;
  }



  /**
   * Gets the value of the 'candidatePairBytesReceived' field.
   * @return The total number of bytes received using the last selected candidate pair over the corresponded transport
   */
  public java.lang.Long getCandidatePairBytesReceived() {
    return candidatePairBytesReceived;
  }



  /**
   * Gets the value of the 'candidatePairLastPacketSentTimestamp' field.
   * @return Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   */
  public java.lang.Long getCandidatePairLastPacketSentTimestamp() {
    return candidatePairLastPacketSentTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairLastPacketReceivedTimestamp' field.
   * @return Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
   */
  public java.lang.Long getCandidatePairLastPacketReceivedTimestamp() {
    return candidatePairLastPacketReceivedTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairFirstRequestTimestamp' field.
   * @return Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public java.lang.Long getCandidatePairFirstRequestTimestamp() {
    return candidatePairFirstRequestTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairLastRequestTimestamp' field.
   * @return Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public java.lang.Long getCandidatePairLastRequestTimestamp() {
    return candidatePairLastRequestTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairLastResponseTimestamp' field.
   * @return Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
   */
  public java.lang.Long getCandidatePairLastResponseTimestamp() {
    return candidatePairLastResponseTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairTotalRoundTripTime' field.
   * @return Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
   */
  public java.lang.Double getCandidatePairTotalRoundTripTime() {
    return candidatePairTotalRoundTripTime;
  }



  /**
   * Gets the value of the 'candidatePairCurrentRoundTripTime' field.
   * @return Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
   */
  public java.lang.Double getCandidatePairCurrentRoundTripTime() {
    return candidatePairCurrentRoundTripTime;
  }



  /**
   * Gets the value of the 'candidatePairAvailableOutgoingBitrate' field.
   * @return The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
   */
  public java.lang.Double getCandidatePairAvailableOutgoingBitrate() {
    return candidatePairAvailableOutgoingBitrate;
  }



  /**
   * Gets the value of the 'candidatePairAvailableIncomingBitrate' field.
   * @return The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
   */
  public java.lang.Double getCandidatePairAvailableIncomingBitrate() {
    return candidatePairAvailableIncomingBitrate;
  }



  /**
   * Gets the value of the 'candidatePairCircuitBreakerTriggerCount' field.
   * @return The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
   */
  public java.lang.Integer getCandidatePairCircuitBreakerTriggerCount() {
    return candidatePairCircuitBreakerTriggerCount;
  }



  /**
   * Gets the value of the 'candidatePairRequestsReceived' field.
   * @return Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairRequestsReceived() {
    return candidatePairRequestsReceived;
  }



  /**
   * Gets the value of the 'candidatePairRequestsSent' field.
   * @return Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairRequestsSent() {
    return candidatePairRequestsSent;
  }



  /**
   * Gets the value of the 'candidatePairResponsesReceived' field.
   * @return Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairResponsesReceived() {
    return candidatePairResponsesReceived;
  }



  /**
   * Gets the value of the 'candidatePairResponsesSent' field.
   * @return Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairResponsesSent() {
    return candidatePairResponsesSent;
  }



  /**
   * Gets the value of the 'candidatePairRetransmissionReceived' field.
   * @return Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairRetransmissionReceived() {
    return candidatePairRetransmissionReceived;
  }



  /**
   * Gets the value of the 'candidatePairRetransmissionSent' field.
   * @return Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairRetransmissionSent() {
    return candidatePairRetransmissionSent;
  }



  /**
   * Gets the value of the 'candidatePairConsentRequestsSent' field.
   * @return Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
   */
  public java.lang.Integer getCandidatePairConsentRequestsSent() {
    return candidatePairConsentRequestsSent;
  }



  /**
   * Gets the value of the 'candidatePairConsentExpiredTimestamp' field.
   * @return Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairConsentExpiredTimestamp() {
    return candidatePairConsentExpiredTimestamp;
  }



  /**
   * Gets the value of the 'candidatePairBytesDiscardedOnSend' field.
   * @return Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairBytesDiscardedOnSend() {
    return candidatePairBytesDiscardedOnSend;
  }



  /**
   * Gets the value of the 'candidatePairPacketsDiscardedOnSend' field.
   * @return Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairPacketsDiscardedOnSend() {
    return candidatePairPacketsDiscardedOnSend;
  }



  /**
   * Gets the value of the 'candidatePairRequestBytesSent' field.
   * @return Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairRequestBytesSent() {
    return candidatePairRequestBytesSent;
  }



  /**
   * Gets the value of the 'candidatePairConsentRequestBytesSent' field.
   * @return Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairConsentRequestBytesSent() {
    return candidatePairConsentRequestBytesSent;
  }



  /**
   * Gets the value of the 'candidatePairResponseBytesSent' field.
   * @return Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
   */
  public java.lang.Long getCandidatePairResponseBytesSent() {
    return candidatePairResponseBytesSent;
  }



  /**
   * Gets the value of the 'sctpSmoothedRoundTripTime' field.
   * @return The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
   */
  public java.lang.Double getSctpSmoothedRoundTripTime() {
    return sctpSmoothedRoundTripTime;
  }



  /**
   * Gets the value of the 'sctpCongestionWindow' field.
   * @return The latest congestion window, corresponding to spinfo_cwnd.
   */
  public java.lang.Double getSctpCongestionWindow() {
    return sctpCongestionWindow;
  }



  /**
   * Gets the value of the 'sctpReceiverWindow' field.
   * @return The latest receiver window, corresponding to sstat_rwnd.
   */
  public java.lang.Double getSctpReceiverWindow() {
    return sctpReceiverWindow;
  }



  /**
   * Gets the value of the 'sctpMtu' field.
   * @return The latest maximum transmission unit, corresponding to spinfo_mtu.
   */
  public java.lang.Integer getSctpMtu() {
    return sctpMtu;
  }



  /**
   * Gets the value of the 'sctpUnackData' field.
   * @return The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
   */
  public java.lang.Integer getSctpUnackData() {
    return sctpUnackData;
  }



  /**
   * Creates a new ClientTransportReport RecordBuilder.
   * @return A new ClientTransportReport RecordBuilder
   */
  public static org.observertc.schemas.ClientTransportReport.Builder newBuilder() {
    return new org.observertc.schemas.ClientTransportReport.Builder();
  }

  /**
   * Creates a new ClientTransportReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientTransportReport RecordBuilder
   */
  public static org.observertc.schemas.ClientTransportReport.Builder newBuilder(org.observertc.schemas.ClientTransportReport.Builder other) {
    if (other == null) {
      return new org.observertc.schemas.ClientTransportReport.Builder();
    } else {
      return new org.observertc.schemas.ClientTransportReport.Builder(other);
    }
  }

  /**
   * Creates a new ClientTransportReport RecordBuilder by copying an existing ClientTransportReport instance.
   * @param other The existing instance to copy.
   * @return A new ClientTransportReport RecordBuilder
   */
  public static org.observertc.schemas.ClientTransportReport.Builder newBuilder(org.observertc.schemas.ClientTransportReport other) {
    if (other == null) {
      return new org.observertc.schemas.ClientTransportReport.Builder();
    } else {
      return new org.observertc.schemas.ClientTransportReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClientTransportReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientTransportReport>
    implements org.apache.avro.data.RecordBuilder<ClientTransportReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label the peer connection is marked with */
    private java.lang.String label;
    /** Represents the total number of packets sent on the corresponded transport */
    private java.lang.Integer packetsSent;
    /** Represents the total number of packets received on the corresponded transport */
    private java.lang.Integer packetsReceived;
    /** Represents the total amount of bytes sent on the corresponded transport */
    private java.lang.Long bytesSent;
    /** Represents the total amount of bytes received on the corresponded transport */
    private java.lang.Long bytesReceived;
    /** Represent the current role of ICE under DTLS Transport */
    private java.lang.String iceRole;
    /** Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport */
    private java.lang.String iceLocalUsernameFragment;
    /** Represents the current state of DTLS for the peer connection transport layer */
    private java.lang.String dtlsState;
    /** Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer */
    private java.lang.String iceTransportState;
    /** Represents the version number of the TLS used in the corresponded transport */
    private java.lang.String tlsVersion;
    /** Represents the name of the DTLS cipher used in the corresponded transport */
    private java.lang.String dtlsCipher;
    /** Represents the name of the SRTP cipher used in the corresponded transport */
    private java.lang.String srtpCipher;
    /** Represents the name of the IANA TLS Supported Groups used in the corresponded transport */
    private java.lang.String tlsGroup;
    /** The total number of candidate pair changes over the peer connection */
    private java.lang.Integer selectedCandidatePairChanges;
    /** The address of the candidate (IPv4, IPv6, FQDN) */
    private java.lang.String localAddress;
    /** The locally used port to communicate with the remote peer */
    private java.lang.Integer localPort;
    /** The protocol used by the local endpoint for the corresponded transport */
    private java.lang.String localProtocol;
    /** The type of the ICE candidate used at the local endpoint on the corresponded transport */
    private java.lang.String localCandidateType;
    /** The url of the ICE server used by the local endpoint on the corresponded transport */
    private java.lang.String localCandidateICEServerUrl;
    /** The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport */
    private java.lang.String localCandidateRelayProtocol;
    /** The address of the candidate (IPv4, IPv6, FQDN) */
    private java.lang.String remoteAddress;
    /** The remotely used port to communicate with the remote peer */
    private java.lang.Integer remotePort;
    /** The protocol used by the remote endpoint for the corresponded transport */
    private java.lang.String remoteProtocol;
    /** The type of the ICE candidate used at the remote endpoint on the corresponded transport */
    private java.lang.String remoteCandidateType;
    /** The url of the ICE server used by the remote endpoint on the corresponded transport */
    private java.lang.String remoteCandidateICEServerUrl;
    /** The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport */
    private java.lang.String remoteCandidateRelayProtocol;
    /** The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport */
    private java.lang.String candidatePairState;
    /** The total number of packets sent using the last selected candidate pair over the corresponded transport */
    private java.lang.Integer candidatePairPacketsSent;
    /** The total number of packets received using the last selected candidate pair over the corresponded transport */
    private java.lang.Integer candidatePairPacketsReceived;
    /** The total number of bytes sent using the last selected candidate pair over the corresponded transport */
    private java.lang.Long candidatePairBytesSent;
    /** The total number of bytes received using the last selected candidate pair over the corresponded transport */
    private java.lang.Long candidatePairBytesReceived;
    /** Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
    private java.lang.Long candidatePairLastPacketSentTimestamp;
    /** Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms) */
    private java.lang.Long candidatePairLastPacketReceivedTimestamp;
    /** Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private java.lang.Long candidatePairFirstRequestTimestamp;
    /** Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private java.lang.Long candidatePairLastRequestTimestamp;
    /** Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms) */
    private java.lang.Long candidatePairLastResponseTimestamp;
    /** Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport */
    private java.lang.Double candidatePairTotalRoundTripTime;
    /** Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport */
    private java.lang.Double candidatePairCurrentRoundTripTime;
    /** The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport */
    private java.lang.Double candidatePairAvailableOutgoingBitrate;
    /** The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport */
    private java.lang.Double candidatePairAvailableIncomingBitrate;
    /** The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair */
    private java.lang.Integer candidatePairCircuitBreakerTriggerCount;
    /** Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairRequestsReceived;
    /** Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairRequestsSent;
    /** Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairResponsesReceived;
    /** Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairResponsesSent;
    /** Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairRetransmissionReceived;
    /** Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairRetransmissionSent;
    /** Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport */
    private java.lang.Integer candidatePairConsentRequestsSent;
    /** Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairConsentExpiredTimestamp;
    /** Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairBytesDiscardedOnSend;
    /** Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairPacketsDiscardedOnSend;
    /** Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairRequestBytesSent;
    /** Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairConsentRequestBytesSent;
    /** Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport */
    private java.lang.Long candidatePairResponseBytesSent;
    /** The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds.  */
    private java.lang.Double sctpSmoothedRoundTripTime;
    /** The latest congestion window, corresponding to spinfo_cwnd. */
    private java.lang.Double sctpCongestionWindow;
    /** The latest receiver window, corresponding to sstat_rwnd. */
    private java.lang.Double sctpReceiverWindow;
    /** The latest maximum transmission unit, corresponding to spinfo_mtu. */
    private java.lang.Integer sctpMtu;
    /** The number of unacknowledged DATA chunks, corresponding to sstat_unackdata. */
    private java.lang.Integer sctpUnackData;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.schemas.ClientTransportReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[10].schema(), other.packetsSent);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[11].schema(), other.packetsReceived);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[12].schema(), other.bytesSent);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[13].schema(), other.bytesReceived);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[14].schema(), other.iceRole);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.iceLocalUsernameFragment)) {
        this.iceLocalUsernameFragment = data().deepCopy(fields()[15].schema(), other.iceLocalUsernameFragment);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[16].schema(), other.dtlsState);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.iceTransportState)) {
        this.iceTransportState = data().deepCopy(fields()[17].schema(), other.iceTransportState);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.tlsVersion)) {
        this.tlsVersion = data().deepCopy(fields()[18].schema(), other.tlsVersion);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dtlsCipher)) {
        this.dtlsCipher = data().deepCopy(fields()[19].schema(), other.dtlsCipher);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.srtpCipher)) {
        this.srtpCipher = data().deepCopy(fields()[20].schema(), other.srtpCipher);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.tlsGroup)) {
        this.tlsGroup = data().deepCopy(fields()[21].schema(), other.tlsGroup);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.selectedCandidatePairChanges)) {
        this.selectedCandidatePairChanges = data().deepCopy(fields()[22].schema(), other.selectedCandidatePairChanges);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[23].schema(), other.localAddress);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.localPort)) {
        this.localPort = data().deepCopy(fields()[24].schema(), other.localPort);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.localProtocol)) {
        this.localProtocol = data().deepCopy(fields()[25].schema(), other.localProtocol);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.localCandidateType)) {
        this.localCandidateType = data().deepCopy(fields()[26].schema(), other.localCandidateType);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.localCandidateICEServerUrl)) {
        this.localCandidateICEServerUrl = data().deepCopy(fields()[27].schema(), other.localCandidateICEServerUrl);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.localCandidateRelayProtocol)) {
        this.localCandidateRelayProtocol = data().deepCopy(fields()[28].schema(), other.localCandidateRelayProtocol);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[29].schema(), other.remoteAddress);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[30].schema(), other.remotePort);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.remoteProtocol)) {
        this.remoteProtocol = data().deepCopy(fields()[31].schema(), other.remoteProtocol);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.remoteCandidateType)) {
        this.remoteCandidateType = data().deepCopy(fields()[32].schema(), other.remoteCandidateType);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.remoteCandidateICEServerUrl)) {
        this.remoteCandidateICEServerUrl = data().deepCopy(fields()[33].schema(), other.remoteCandidateICEServerUrl);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.remoteCandidateRelayProtocol)) {
        this.remoteCandidateRelayProtocol = data().deepCopy(fields()[34].schema(), other.remoteCandidateRelayProtocol);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.candidatePairState)) {
        this.candidatePairState = data().deepCopy(fields()[35].schema(), other.candidatePairState);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.candidatePairPacketsSent)) {
        this.candidatePairPacketsSent = data().deepCopy(fields()[36].schema(), other.candidatePairPacketsSent);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.candidatePairPacketsReceived)) {
        this.candidatePairPacketsReceived = data().deepCopy(fields()[37].schema(), other.candidatePairPacketsReceived);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.candidatePairBytesSent)) {
        this.candidatePairBytesSent = data().deepCopy(fields()[38].schema(), other.candidatePairBytesSent);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.candidatePairBytesReceived)) {
        this.candidatePairBytesReceived = data().deepCopy(fields()[39].schema(), other.candidatePairBytesReceived);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.candidatePairLastPacketSentTimestamp)) {
        this.candidatePairLastPacketSentTimestamp = data().deepCopy(fields()[40].schema(), other.candidatePairLastPacketSentTimestamp);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.candidatePairLastPacketReceivedTimestamp)) {
        this.candidatePairLastPacketReceivedTimestamp = data().deepCopy(fields()[41].schema(), other.candidatePairLastPacketReceivedTimestamp);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.candidatePairFirstRequestTimestamp)) {
        this.candidatePairFirstRequestTimestamp = data().deepCopy(fields()[42].schema(), other.candidatePairFirstRequestTimestamp);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.candidatePairLastRequestTimestamp)) {
        this.candidatePairLastRequestTimestamp = data().deepCopy(fields()[43].schema(), other.candidatePairLastRequestTimestamp);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.candidatePairLastResponseTimestamp)) {
        this.candidatePairLastResponseTimestamp = data().deepCopy(fields()[44].schema(), other.candidatePairLastResponseTimestamp);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.candidatePairTotalRoundTripTime)) {
        this.candidatePairTotalRoundTripTime = data().deepCopy(fields()[45].schema(), other.candidatePairTotalRoundTripTime);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.candidatePairCurrentRoundTripTime)) {
        this.candidatePairCurrentRoundTripTime = data().deepCopy(fields()[46].schema(), other.candidatePairCurrentRoundTripTime);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.candidatePairAvailableOutgoingBitrate)) {
        this.candidatePairAvailableOutgoingBitrate = data().deepCopy(fields()[47].schema(), other.candidatePairAvailableOutgoingBitrate);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.candidatePairAvailableIncomingBitrate)) {
        this.candidatePairAvailableIncomingBitrate = data().deepCopy(fields()[48].schema(), other.candidatePairAvailableIncomingBitrate);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
      if (isValidValue(fields()[49], other.candidatePairCircuitBreakerTriggerCount)) {
        this.candidatePairCircuitBreakerTriggerCount = data().deepCopy(fields()[49].schema(), other.candidatePairCircuitBreakerTriggerCount);
        fieldSetFlags()[49] = other.fieldSetFlags()[49];
      }
      if (isValidValue(fields()[50], other.candidatePairRequestsReceived)) {
        this.candidatePairRequestsReceived = data().deepCopy(fields()[50].schema(), other.candidatePairRequestsReceived);
        fieldSetFlags()[50] = other.fieldSetFlags()[50];
      }
      if (isValidValue(fields()[51], other.candidatePairRequestsSent)) {
        this.candidatePairRequestsSent = data().deepCopy(fields()[51].schema(), other.candidatePairRequestsSent);
        fieldSetFlags()[51] = other.fieldSetFlags()[51];
      }
      if (isValidValue(fields()[52], other.candidatePairResponsesReceived)) {
        this.candidatePairResponsesReceived = data().deepCopy(fields()[52].schema(), other.candidatePairResponsesReceived);
        fieldSetFlags()[52] = other.fieldSetFlags()[52];
      }
      if (isValidValue(fields()[53], other.candidatePairResponsesSent)) {
        this.candidatePairResponsesSent = data().deepCopy(fields()[53].schema(), other.candidatePairResponsesSent);
        fieldSetFlags()[53] = other.fieldSetFlags()[53];
      }
      if (isValidValue(fields()[54], other.candidatePairRetransmissionReceived)) {
        this.candidatePairRetransmissionReceived = data().deepCopy(fields()[54].schema(), other.candidatePairRetransmissionReceived);
        fieldSetFlags()[54] = other.fieldSetFlags()[54];
      }
      if (isValidValue(fields()[55], other.candidatePairRetransmissionSent)) {
        this.candidatePairRetransmissionSent = data().deepCopy(fields()[55].schema(), other.candidatePairRetransmissionSent);
        fieldSetFlags()[55] = other.fieldSetFlags()[55];
      }
      if (isValidValue(fields()[56], other.candidatePairConsentRequestsSent)) {
        this.candidatePairConsentRequestsSent = data().deepCopy(fields()[56].schema(), other.candidatePairConsentRequestsSent);
        fieldSetFlags()[56] = other.fieldSetFlags()[56];
      }
      if (isValidValue(fields()[57], other.candidatePairConsentExpiredTimestamp)) {
        this.candidatePairConsentExpiredTimestamp = data().deepCopy(fields()[57].schema(), other.candidatePairConsentExpiredTimestamp);
        fieldSetFlags()[57] = other.fieldSetFlags()[57];
      }
      if (isValidValue(fields()[58], other.candidatePairBytesDiscardedOnSend)) {
        this.candidatePairBytesDiscardedOnSend = data().deepCopy(fields()[58].schema(), other.candidatePairBytesDiscardedOnSend);
        fieldSetFlags()[58] = other.fieldSetFlags()[58];
      }
      if (isValidValue(fields()[59], other.candidatePairPacketsDiscardedOnSend)) {
        this.candidatePairPacketsDiscardedOnSend = data().deepCopy(fields()[59].schema(), other.candidatePairPacketsDiscardedOnSend);
        fieldSetFlags()[59] = other.fieldSetFlags()[59];
      }
      if (isValidValue(fields()[60], other.candidatePairRequestBytesSent)) {
        this.candidatePairRequestBytesSent = data().deepCopy(fields()[60].schema(), other.candidatePairRequestBytesSent);
        fieldSetFlags()[60] = other.fieldSetFlags()[60];
      }
      if (isValidValue(fields()[61], other.candidatePairConsentRequestBytesSent)) {
        this.candidatePairConsentRequestBytesSent = data().deepCopy(fields()[61].schema(), other.candidatePairConsentRequestBytesSent);
        fieldSetFlags()[61] = other.fieldSetFlags()[61];
      }
      if (isValidValue(fields()[62], other.candidatePairResponseBytesSent)) {
        this.candidatePairResponseBytesSent = data().deepCopy(fields()[62].schema(), other.candidatePairResponseBytesSent);
        fieldSetFlags()[62] = other.fieldSetFlags()[62];
      }
      if (isValidValue(fields()[63], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[63].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[63] = other.fieldSetFlags()[63];
      }
      if (isValidValue(fields()[64], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[64].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[64] = other.fieldSetFlags()[64];
      }
      if (isValidValue(fields()[65], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[65].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[65] = other.fieldSetFlags()[65];
      }
      if (isValidValue(fields()[66], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[66].schema(), other.sctpMtu);
        fieldSetFlags()[66] = other.fieldSetFlags()[66];
      }
      if (isValidValue(fields()[67], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[67].schema(), other.sctpUnackData);
        fieldSetFlags()[67] = other.fieldSetFlags()[67];
      }
    }

    /**
     * Creates a Builder by copying an existing ClientTransportReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.schemas.ClientTransportReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[10].schema(), other.packetsSent);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[11].schema(), other.packetsReceived);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[12].schema(), other.bytesSent);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[13].schema(), other.bytesReceived);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.iceRole)) {
        this.iceRole = data().deepCopy(fields()[14].schema(), other.iceRole);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.iceLocalUsernameFragment)) {
        this.iceLocalUsernameFragment = data().deepCopy(fields()[15].schema(), other.iceLocalUsernameFragment);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.dtlsState)) {
        this.dtlsState = data().deepCopy(fields()[16].schema(), other.dtlsState);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.iceTransportState)) {
        this.iceTransportState = data().deepCopy(fields()[17].schema(), other.iceTransportState);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.tlsVersion)) {
        this.tlsVersion = data().deepCopy(fields()[18].schema(), other.tlsVersion);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dtlsCipher)) {
        this.dtlsCipher = data().deepCopy(fields()[19].schema(), other.dtlsCipher);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.srtpCipher)) {
        this.srtpCipher = data().deepCopy(fields()[20].schema(), other.srtpCipher);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.tlsGroup)) {
        this.tlsGroup = data().deepCopy(fields()[21].schema(), other.tlsGroup);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.selectedCandidatePairChanges)) {
        this.selectedCandidatePairChanges = data().deepCopy(fields()[22].schema(), other.selectedCandidatePairChanges);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[23].schema(), other.localAddress);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.localPort)) {
        this.localPort = data().deepCopy(fields()[24].schema(), other.localPort);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.localProtocol)) {
        this.localProtocol = data().deepCopy(fields()[25].schema(), other.localProtocol);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.localCandidateType)) {
        this.localCandidateType = data().deepCopy(fields()[26].schema(), other.localCandidateType);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.localCandidateICEServerUrl)) {
        this.localCandidateICEServerUrl = data().deepCopy(fields()[27].schema(), other.localCandidateICEServerUrl);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.localCandidateRelayProtocol)) {
        this.localCandidateRelayProtocol = data().deepCopy(fields()[28].schema(), other.localCandidateRelayProtocol);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[29].schema(), other.remoteAddress);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[30].schema(), other.remotePort);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.remoteProtocol)) {
        this.remoteProtocol = data().deepCopy(fields()[31].schema(), other.remoteProtocol);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.remoteCandidateType)) {
        this.remoteCandidateType = data().deepCopy(fields()[32].schema(), other.remoteCandidateType);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.remoteCandidateICEServerUrl)) {
        this.remoteCandidateICEServerUrl = data().deepCopy(fields()[33].schema(), other.remoteCandidateICEServerUrl);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.remoteCandidateRelayProtocol)) {
        this.remoteCandidateRelayProtocol = data().deepCopy(fields()[34].schema(), other.remoteCandidateRelayProtocol);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.candidatePairState)) {
        this.candidatePairState = data().deepCopy(fields()[35].schema(), other.candidatePairState);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.candidatePairPacketsSent)) {
        this.candidatePairPacketsSent = data().deepCopy(fields()[36].schema(), other.candidatePairPacketsSent);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.candidatePairPacketsReceived)) {
        this.candidatePairPacketsReceived = data().deepCopy(fields()[37].schema(), other.candidatePairPacketsReceived);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.candidatePairBytesSent)) {
        this.candidatePairBytesSent = data().deepCopy(fields()[38].schema(), other.candidatePairBytesSent);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.candidatePairBytesReceived)) {
        this.candidatePairBytesReceived = data().deepCopy(fields()[39].schema(), other.candidatePairBytesReceived);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.candidatePairLastPacketSentTimestamp)) {
        this.candidatePairLastPacketSentTimestamp = data().deepCopy(fields()[40].schema(), other.candidatePairLastPacketSentTimestamp);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.candidatePairLastPacketReceivedTimestamp)) {
        this.candidatePairLastPacketReceivedTimestamp = data().deepCopy(fields()[41].schema(), other.candidatePairLastPacketReceivedTimestamp);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.candidatePairFirstRequestTimestamp)) {
        this.candidatePairFirstRequestTimestamp = data().deepCopy(fields()[42].schema(), other.candidatePairFirstRequestTimestamp);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.candidatePairLastRequestTimestamp)) {
        this.candidatePairLastRequestTimestamp = data().deepCopy(fields()[43].schema(), other.candidatePairLastRequestTimestamp);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.candidatePairLastResponseTimestamp)) {
        this.candidatePairLastResponseTimestamp = data().deepCopy(fields()[44].schema(), other.candidatePairLastResponseTimestamp);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.candidatePairTotalRoundTripTime)) {
        this.candidatePairTotalRoundTripTime = data().deepCopy(fields()[45].schema(), other.candidatePairTotalRoundTripTime);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.candidatePairCurrentRoundTripTime)) {
        this.candidatePairCurrentRoundTripTime = data().deepCopy(fields()[46].schema(), other.candidatePairCurrentRoundTripTime);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.candidatePairAvailableOutgoingBitrate)) {
        this.candidatePairAvailableOutgoingBitrate = data().deepCopy(fields()[47].schema(), other.candidatePairAvailableOutgoingBitrate);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.candidatePairAvailableIncomingBitrate)) {
        this.candidatePairAvailableIncomingBitrate = data().deepCopy(fields()[48].schema(), other.candidatePairAvailableIncomingBitrate);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.candidatePairCircuitBreakerTriggerCount)) {
        this.candidatePairCircuitBreakerTriggerCount = data().deepCopy(fields()[49].schema(), other.candidatePairCircuitBreakerTriggerCount);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.candidatePairRequestsReceived)) {
        this.candidatePairRequestsReceived = data().deepCopy(fields()[50].schema(), other.candidatePairRequestsReceived);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.candidatePairRequestsSent)) {
        this.candidatePairRequestsSent = data().deepCopy(fields()[51].schema(), other.candidatePairRequestsSent);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.candidatePairResponsesReceived)) {
        this.candidatePairResponsesReceived = data().deepCopy(fields()[52].schema(), other.candidatePairResponsesReceived);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.candidatePairResponsesSent)) {
        this.candidatePairResponsesSent = data().deepCopy(fields()[53].schema(), other.candidatePairResponsesSent);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.candidatePairRetransmissionReceived)) {
        this.candidatePairRetransmissionReceived = data().deepCopy(fields()[54].schema(), other.candidatePairRetransmissionReceived);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.candidatePairRetransmissionSent)) {
        this.candidatePairRetransmissionSent = data().deepCopy(fields()[55].schema(), other.candidatePairRetransmissionSent);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.candidatePairConsentRequestsSent)) {
        this.candidatePairConsentRequestsSent = data().deepCopy(fields()[56].schema(), other.candidatePairConsentRequestsSent);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.candidatePairConsentExpiredTimestamp)) {
        this.candidatePairConsentExpiredTimestamp = data().deepCopy(fields()[57].schema(), other.candidatePairConsentExpiredTimestamp);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.candidatePairBytesDiscardedOnSend)) {
        this.candidatePairBytesDiscardedOnSend = data().deepCopy(fields()[58].schema(), other.candidatePairBytesDiscardedOnSend);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.candidatePairPacketsDiscardedOnSend)) {
        this.candidatePairPacketsDiscardedOnSend = data().deepCopy(fields()[59].schema(), other.candidatePairPacketsDiscardedOnSend);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.candidatePairRequestBytesSent)) {
        this.candidatePairRequestBytesSent = data().deepCopy(fields()[60].schema(), other.candidatePairRequestBytesSent);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.candidatePairConsentRequestBytesSent)) {
        this.candidatePairConsentRequestBytesSent = data().deepCopy(fields()[61].schema(), other.candidatePairConsentRequestBytesSent);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.candidatePairResponseBytesSent)) {
        this.candidatePairResponseBytesSent = data().deepCopy(fields()[62].schema(), other.candidatePairResponseBytesSent);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.sctpSmoothedRoundTripTime)) {
        this.sctpSmoothedRoundTripTime = data().deepCopy(fields()[63].schema(), other.sctpSmoothedRoundTripTime);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.sctpCongestionWindow)) {
        this.sctpCongestionWindow = data().deepCopy(fields()[64].schema(), other.sctpCongestionWindow);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.sctpReceiverWindow)) {
        this.sctpReceiverWindow = data().deepCopy(fields()[65].schema(), other.sctpReceiverWindow);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.sctpMtu)) {
        this.sctpMtu = data().deepCopy(fields()[66].schema(), other.sctpMtu);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.sctpUnackData)) {
        this.sctpUnackData = data().deepCopy(fields()[67].schema(), other.sctpUnackData);
        fieldSetFlags()[67] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }


    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }


    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }


    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is marked with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is marked with
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }


    /**
      * Sets the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[10], value);
      this.packetsSent = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * Represents the total number of packets sent on the corresponded transport
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * Represents the total number of packets sent on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }


    /**
      * Sets the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[11], value);
      this.packetsReceived = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * Represents the total number of packets received on the corresponded transport
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * Represents the total number of packets received on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }


    /**
      * Sets the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[12], value);
      this.bytesSent = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Represents the total amount of bytes sent on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }


    /**
      * Sets the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[13], value);
      this.bytesReceived = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Represents the total amount of bytes received on the corresponded transport
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Represents the total amount of bytes received on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @return The value.
      */
    public java.lang.String getIceRole() {
      return iceRole;
    }


    /**
      * Sets the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @param value The value of 'iceRole'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setIceRole(java.lang.String value) {
      validate(fields()[14], value);
      this.iceRole = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'iceRole' field has been set.
      * Represent the current role of ICE under DTLS Transport
      * @return True if the 'iceRole' field has been set, false otherwise.
      */
    public boolean hasIceRole() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'iceRole' field.
      * Represent the current role of ICE under DTLS Transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearIceRole() {
      iceRole = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return The value.
      */
    public java.lang.String getIceLocalUsernameFragment() {
      return iceLocalUsernameFragment;
    }


    /**
      * Sets the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @param value The value of 'iceLocalUsernameFragment'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setIceLocalUsernameFragment(java.lang.String value) {
      validate(fields()[15], value);
      this.iceLocalUsernameFragment = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'iceLocalUsernameFragment' field has been set.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return True if the 'iceLocalUsernameFragment' field has been set, false otherwise.
      */
    public boolean hasIceLocalUsernameFragment() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'iceLocalUsernameFragment' field.
      * Represent the current local username fragment used in message validation procedures for ICE under DTLS Transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearIceLocalUsernameFragment() {
      iceLocalUsernameFragment = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return The value.
      */
    public java.lang.String getDtlsState() {
      return dtlsState;
    }


    /**
      * Sets the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @param value The value of 'dtlsState'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setDtlsState(java.lang.String value) {
      validate(fields()[16], value);
      this.dtlsState = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'dtlsState' field has been set.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return True if the 'dtlsState' field has been set, false otherwise.
      */
    public boolean hasDtlsState() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'dtlsState' field.
      * Represents the current state of DTLS for the peer connection transport layer
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearDtlsState() {
      dtlsState = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return The value.
      */
    public java.lang.String getIceTransportState() {
      return iceTransportState;
    }


    /**
      * Sets the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @param value The value of 'iceTransportState'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setIceTransportState(java.lang.String value) {
      validate(fields()[17], value);
      this.iceTransportState = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'iceTransportState' field has been set.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return True if the 'iceTransportState' field has been set, false otherwise.
      */
    public boolean hasIceTransportState() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'iceTransportState' field.
      * Represents the current transport state (RTCIceTransportState) of ICE for the peer connection transport layer
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearIceTransportState() {
      iceTransportState = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @return The value.
      */
    public java.lang.String getTlsVersion() {
      return tlsVersion;
    }


    /**
      * Sets the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @param value The value of 'tlsVersion'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setTlsVersion(java.lang.String value) {
      validate(fields()[18], value);
      this.tlsVersion = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'tlsVersion' field has been set.
      * Represents the version number of the TLS used in the corresponded transport
      * @return True if the 'tlsVersion' field has been set, false otherwise.
      */
    public boolean hasTlsVersion() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'tlsVersion' field.
      * Represents the version number of the TLS used in the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearTlsVersion() {
      tlsVersion = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return The value.
      */
    public java.lang.String getDtlsCipher() {
      return dtlsCipher;
    }


    /**
      * Sets the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @param value The value of 'dtlsCipher'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setDtlsCipher(java.lang.String value) {
      validate(fields()[19], value);
      this.dtlsCipher = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dtlsCipher' field has been set.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return True if the 'dtlsCipher' field has been set, false otherwise.
      */
    public boolean hasDtlsCipher() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'dtlsCipher' field.
      * Represents the name of the DTLS cipher used in the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearDtlsCipher() {
      dtlsCipher = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return The value.
      */
    public java.lang.String getSrtpCipher() {
      return srtpCipher;
    }


    /**
      * Sets the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @param value The value of 'srtpCipher'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSrtpCipher(java.lang.String value) {
      validate(fields()[20], value);
      this.srtpCipher = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'srtpCipher' field has been set.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return True if the 'srtpCipher' field has been set, false otherwise.
      */
    public boolean hasSrtpCipher() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'srtpCipher' field.
      * Represents the name of the SRTP cipher used in the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSrtpCipher() {
      srtpCipher = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return The value.
      */
    public java.lang.String getTlsGroup() {
      return tlsGroup;
    }


    /**
      * Sets the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @param value The value of 'tlsGroup'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setTlsGroup(java.lang.String value) {
      validate(fields()[21], value);
      this.tlsGroup = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'tlsGroup' field has been set.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return True if the 'tlsGroup' field has been set, false otherwise.
      */
    public boolean hasTlsGroup() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'tlsGroup' field.
      * Represents the name of the IANA TLS Supported Groups used in the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearTlsGroup() {
      tlsGroup = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @return The value.
      */
    public java.lang.Integer getSelectedCandidatePairChanges() {
      return selectedCandidatePairChanges;
    }


    /**
      * Sets the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @param value The value of 'selectedCandidatePairChanges'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSelectedCandidatePairChanges(java.lang.Integer value) {
      validate(fields()[22], value);
      this.selectedCandidatePairChanges = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'selectedCandidatePairChanges' field has been set.
      * The total number of candidate pair changes over the peer connection
      * @return True if the 'selectedCandidatePairChanges' field has been set, false otherwise.
      */
    public boolean hasSelectedCandidatePairChanges() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'selectedCandidatePairChanges' field.
      * The total number of candidate pair changes over the peer connection
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSelectedCandidatePairChanges() {
      selectedCandidatePairChanges = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public java.lang.String getLocalAddress() {
      return localAddress;
    }


    /**
      * Sets the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @param value The value of 'localAddress'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalAddress(java.lang.String value) {
      validate(fields()[23], value);
      this.localAddress = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'localAddress' field has been set.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return True if the 'localAddress' field has been set, false otherwise.
      */
    public boolean hasLocalAddress() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'localAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalAddress() {
      localAddress = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @return The value.
      */
    public java.lang.Integer getLocalPort() {
      return localPort;
    }


    /**
      * Sets the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @param value The value of 'localPort'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalPort(java.lang.Integer value) {
      validate(fields()[24], value);
      this.localPort = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'localPort' field has been set.
      * The locally used port to communicate with the remote peer
      * @return True if the 'localPort' field has been set, false otherwise.
      */
    public boolean hasLocalPort() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'localPort' field.
      * The locally used port to communicate with the remote peer
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalPort() {
      localPort = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @return The value.
      */
    public java.lang.String getLocalProtocol() {
      return localProtocol;
    }


    /**
      * Sets the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @param value The value of 'localProtocol'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalProtocol(java.lang.String value) {
      validate(fields()[25], value);
      this.localProtocol = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'localProtocol' field has been set.
      * The protocol used by the local endpoint for the corresponded transport
      * @return True if the 'localProtocol' field has been set, false otherwise.
      */
    public boolean hasLocalProtocol() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'localProtocol' field.
      * The protocol used by the local endpoint for the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalProtocol() {
      localProtocol = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getLocalCandidateType() {
      return localCandidateType;
    }


    /**
      * Sets the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateType'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalCandidateType(java.lang.String value) {
      validate(fields()[26], value);
      this.localCandidateType = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateType' field has been set.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return True if the 'localCandidateType' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateType() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'localCandidateType' field.
      * The type of the ICE candidate used at the local endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalCandidateType() {
      localCandidateType = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getLocalCandidateICEServerUrl() {
      return localCandidateICEServerUrl;
    }


    /**
      * Sets the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateICEServerUrl'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalCandidateICEServerUrl(java.lang.String value) {
      validate(fields()[27], value);
      this.localCandidateICEServerUrl = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateICEServerUrl' field has been set.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return True if the 'localCandidateICEServerUrl' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateICEServerUrl() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'localCandidateICEServerUrl' field.
      * The url of the ICE server used by the local endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalCandidateICEServerUrl() {
      localCandidateICEServerUrl = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getLocalCandidateRelayProtocol() {
      return localCandidateRelayProtocol;
    }


    /**
      * Sets the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @param value The value of 'localCandidateRelayProtocol'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setLocalCandidateRelayProtocol(java.lang.String value) {
      validate(fields()[28], value);
      this.localCandidateRelayProtocol = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'localCandidateRelayProtocol' field has been set.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return True if the 'localCandidateRelayProtocol' field has been set, false otherwise.
      */
    public boolean hasLocalCandidateRelayProtocol() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'localCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the local endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearLocalCandidateRelayProtocol() {
      localCandidateRelayProtocol = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return The value.
      */
    public java.lang.String getRemoteAddress() {
      return remoteAddress;
    }


    /**
      * Sets the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @param value The value of 'remoteAddress'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemoteAddress(java.lang.String value) {
      validate(fields()[29], value);
      this.remoteAddress = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteAddress' field has been set.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return True if the 'remoteAddress' field has been set, false otherwise.
      */
    public boolean hasRemoteAddress() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'remoteAddress' field.
      * The address of the candidate (IPv4, IPv6, FQDN)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemoteAddress() {
      remoteAddress = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @return The value.
      */
    public java.lang.Integer getRemotePort() {
      return remotePort;
    }


    /**
      * Sets the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @param value The value of 'remotePort'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemotePort(java.lang.Integer value) {
      validate(fields()[30], value);
      this.remotePort = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePort' field has been set.
      * The remotely used port to communicate with the remote peer
      * @return True if the 'remotePort' field has been set, false otherwise.
      */
    public boolean hasRemotePort() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'remotePort' field.
      * The remotely used port to communicate with the remote peer
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemotePort() {
      remotePort = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return The value.
      */
    public java.lang.String getRemoteProtocol() {
      return remoteProtocol;
    }


    /**
      * Sets the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @param value The value of 'remoteProtocol'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemoteProtocol(java.lang.String value) {
      validate(fields()[31], value);
      this.remoteProtocol = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteProtocol' field has been set.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return True if the 'remoteProtocol' field has been set, false otherwise.
      */
    public boolean hasRemoteProtocol() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'remoteProtocol' field.
      * The protocol used by the remote endpoint for the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemoteProtocol() {
      remoteProtocol = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getRemoteCandidateType() {
      return remoteCandidateType;
    }


    /**
      * Sets the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateType'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemoteCandidateType(java.lang.String value) {
      validate(fields()[32], value);
      this.remoteCandidateType = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateType' field has been set.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateType' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateType() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'remoteCandidateType' field.
      * The type of the ICE candidate used at the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemoteCandidateType() {
      remoteCandidateType = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getRemoteCandidateICEServerUrl() {
      return remoteCandidateICEServerUrl;
    }


    /**
      * Sets the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateICEServerUrl'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemoteCandidateICEServerUrl(java.lang.String value) {
      validate(fields()[33], value);
      this.remoteCandidateICEServerUrl = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateICEServerUrl' field has been set.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateICEServerUrl' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateICEServerUrl() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'remoteCandidateICEServerUrl' field.
      * The url of the ICE server used by the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemoteCandidateICEServerUrl() {
      remoteCandidateICEServerUrl = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return The value.
      */
    public java.lang.String getRemoteCandidateRelayProtocol() {
      return remoteCandidateRelayProtocol;
    }


    /**
      * Sets the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @param value The value of 'remoteCandidateRelayProtocol'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setRemoteCandidateRelayProtocol(java.lang.String value) {
      validate(fields()[34], value);
      this.remoteCandidateRelayProtocol = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteCandidateRelayProtocol' field has been set.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return True if the 'remoteCandidateRelayProtocol' field has been set, false otherwise.
      */
    public boolean hasRemoteCandidateRelayProtocol() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'remoteCandidateRelayProtocol' field.
      * The relay protocol of the ICE candidate used by the remote endpoint on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearRemoteCandidateRelayProtocol() {
      remoteCandidateRelayProtocol = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return The value.
      */
    public java.lang.String getCandidatePairState() {
      return candidatePairState;
    }


    /**
      * Sets the value of the 'candidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @param value The value of 'candidatePairState'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairState(java.lang.String value) {
      validate(fields()[35], value);
      this.candidatePairState = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairState' field has been set.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return True if the 'candidatePairState' field has been set, false otherwise.
      */
    public boolean hasCandidatePairState() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'candidatePairState' field.
      * The state of ICE Candidate Pairs (RTCStatsIceCandidatePairState) on the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairState() {
      candidatePairState = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairPacketsSent() {
      return candidatePairPacketsSent;
    }


    /**
      * Sets the value of the 'candidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @param value The value of 'candidatePairPacketsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairPacketsSent(java.lang.Integer value) {
      validate(fields()[36], value);
      this.candidatePairPacketsSent = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairPacketsSent' field has been set.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return True if the 'candidatePairPacketsSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairPacketsSent() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'candidatePairPacketsSent' field.
      * The total number of packets sent using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairPacketsSent() {
      candidatePairPacketsSent = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairPacketsReceived() {
      return candidatePairPacketsReceived;
    }


    /**
      * Sets the value of the 'candidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @param value The value of 'candidatePairPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairPacketsReceived(java.lang.Integer value) {
      validate(fields()[37], value);
      this.candidatePairPacketsReceived = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairPacketsReceived' field has been set.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return True if the 'candidatePairPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairPacketsReceived() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'candidatePairPacketsReceived' field.
      * The total number of packets received using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairPacketsReceived() {
      candidatePairPacketsReceived = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairBytesSent() {
      return candidatePairBytesSent;
    }


    /**
      * Sets the value of the 'candidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @param value The value of 'candidatePairBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairBytesSent(java.lang.Long value) {
      validate(fields()[38], value);
      this.candidatePairBytesSent = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairBytesSent' field has been set.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return True if the 'candidatePairBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairBytesSent() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'candidatePairBytesSent' field.
      * The total number of bytes sent using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairBytesSent() {
      candidatePairBytesSent = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairBytesReceived() {
      return candidatePairBytesReceived;
    }


    /**
      * Sets the value of the 'candidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @param value The value of 'candidatePairBytesReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairBytesReceived(java.lang.Long value) {
      validate(fields()[39], value);
      this.candidatePairBytesReceived = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairBytesReceived' field has been set.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return True if the 'candidatePairBytesReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairBytesReceived() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'candidatePairBytesReceived' field.
      * The total number of bytes received using the last selected candidate pair over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairBytesReceived() {
      candidatePairBytesReceived = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getCandidatePairLastPacketSentTimestamp() {
      return candidatePairLastPacketSentTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'candidatePairLastPacketSentTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairLastPacketSentTimestamp(java.lang.Long value) {
      validate(fields()[40], value);
      this.candidatePairLastPacketSentTimestamp = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairLastPacketSentTimestamp' field has been set.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'candidatePairLastPacketSentTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairLastPacketSentTimestamp() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'candidatePairLastPacketSentTimestamp' field.
      * Represents the timestamp at which the last packet was sent on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairLastPacketSentTimestamp() {
      candidatePairLastPacketSentTimestamp = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getCandidatePairLastPacketReceivedTimestamp() {
      return candidatePairLastPacketReceivedTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'candidatePairLastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairLastPacketReceivedTimestamp(java.lang.Long value) {
      validate(fields()[41], value);
      this.candidatePairLastPacketReceivedTimestamp = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairLastPacketReceivedTimestamp' field has been set.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'candidatePairLastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairLastPacketReceivedTimestamp() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'candidatePairLastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the selected candidate pair, excluding STUN packets over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairLastPacketReceivedTimestamp() {
      candidatePairLastPacketReceivedTimestamp = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getCandidatePairFirstRequestTimestamp() {
      return candidatePairFirstRequestTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'candidatePairFirstRequestTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairFirstRequestTimestamp(java.lang.Long value) {
      validate(fields()[42], value);
      this.candidatePairFirstRequestTimestamp = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairFirstRequestTimestamp' field has been set.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'candidatePairFirstRequestTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairFirstRequestTimestamp() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'candidatePairFirstRequestTimestamp' field.
      * Represents the timestamp at which the first STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairFirstRequestTimestamp() {
      candidatePairFirstRequestTimestamp = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getCandidatePairLastRequestTimestamp() {
      return candidatePairLastRequestTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'candidatePairLastRequestTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairLastRequestTimestamp(java.lang.Long value) {
      validate(fields()[43], value);
      this.candidatePairLastRequestTimestamp = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairLastRequestTimestamp' field has been set.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'candidatePairLastRequestTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairLastRequestTimestamp() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'candidatePairLastRequestTimestamp' field.
      * Represents the timestamp at which the last STUN request was sent on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairLastRequestTimestamp() {
      candidatePairLastRequestTimestamp = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getCandidatePairLastResponseTimestamp() {
      return candidatePairLastResponseTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @param value The value of 'candidatePairLastResponseTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairLastResponseTimestamp(java.lang.Long value) {
      validate(fields()[44], value);
      this.candidatePairLastResponseTimestamp = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairLastResponseTimestamp' field has been set.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return True if the 'candidatePairLastResponseTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairLastResponseTimestamp() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'candidatePairLastResponseTimestamp' field.
      * Represents the timestamp at which the last STUN response was received on this particular candidate pair over the corresponded transport (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairLastResponseTimestamp() {
      candidatePairLastResponseTimestamp = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return The value.
      */
    public java.lang.Double getCandidatePairTotalRoundTripTime() {
      return candidatePairTotalRoundTripTime;
    }


    /**
      * Sets the value of the 'candidatePairTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @param value The value of 'candidatePairTotalRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairTotalRoundTripTime(java.lang.Double value) {
      validate(fields()[45], value);
      this.candidatePairTotalRoundTripTime = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairTotalRoundTripTime' field has been set.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return True if the 'candidatePairTotalRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasCandidatePairTotalRoundTripTime() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'candidatePairTotalRoundTripTime' field.
      * Represents the sum of all round trip time measurements in seconds since the beginning of the session, based on STUN connectivity check over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairTotalRoundTripTime() {
      candidatePairTotalRoundTripTime = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return The value.
      */
    public java.lang.Double getCandidatePairCurrentRoundTripTime() {
      return candidatePairCurrentRoundTripTime;
    }


    /**
      * Sets the value of the 'candidatePairCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @param value The value of 'candidatePairCurrentRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairCurrentRoundTripTime(java.lang.Double value) {
      validate(fields()[46], value);
      this.candidatePairCurrentRoundTripTime = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairCurrentRoundTripTime' field has been set.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return True if the 'candidatePairCurrentRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasCandidatePairCurrentRoundTripTime() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'candidatePairCurrentRoundTripTime' field.
      * Represents the last round trip time measurements in seconds based on STUN connectivity check over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairCurrentRoundTripTime() {
      candidatePairCurrentRoundTripTime = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairAvailableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return The value.
      */
    public java.lang.Double getCandidatePairAvailableOutgoingBitrate() {
      return candidatePairAvailableOutgoingBitrate;
    }


    /**
      * Sets the value of the 'candidatePairAvailableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @param value The value of 'candidatePairAvailableOutgoingBitrate'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairAvailableOutgoingBitrate(java.lang.Double value) {
      validate(fields()[47], value);
      this.candidatePairAvailableOutgoingBitrate = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairAvailableOutgoingBitrate' field has been set.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return True if the 'candidatePairAvailableOutgoingBitrate' field has been set, false otherwise.
      */
    public boolean hasCandidatePairAvailableOutgoingBitrate() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'candidatePairAvailableOutgoingBitrate' field.
      * The sum of the underlying cc algorithm provided outgoing bitrate for the RTP streams over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairAvailableOutgoingBitrate() {
      candidatePairAvailableOutgoingBitrate = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairAvailableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return The value.
      */
    public java.lang.Double getCandidatePairAvailableIncomingBitrate() {
      return candidatePairAvailableIncomingBitrate;
    }


    /**
      * Sets the value of the 'candidatePairAvailableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @param value The value of 'candidatePairAvailableIncomingBitrate'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairAvailableIncomingBitrate(java.lang.Double value) {
      validate(fields()[48], value);
      this.candidatePairAvailableIncomingBitrate = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairAvailableIncomingBitrate' field has been set.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return True if the 'candidatePairAvailableIncomingBitrate' field has been set, false otherwise.
      */
    public boolean hasCandidatePairAvailableIncomingBitrate() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'candidatePairAvailableIncomingBitrate' field.
      * The sum of the underlying cc algorithm provided incoming bitrate for the RTP streams over the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairAvailableIncomingBitrate() {
      candidatePairAvailableIncomingBitrate = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairCircuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return The value.
      */
    public java.lang.Integer getCandidatePairCircuitBreakerTriggerCount() {
      return candidatePairCircuitBreakerTriggerCount;
    }


    /**
      * Sets the value of the 'candidatePairCircuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @param value The value of 'candidatePairCircuitBreakerTriggerCount'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairCircuitBreakerTriggerCount(java.lang.Integer value) {
      validate(fields()[49], value);
      this.candidatePairCircuitBreakerTriggerCount = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairCircuitBreakerTriggerCount' field has been set.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return True if the 'candidatePairCircuitBreakerTriggerCount' field has been set, false otherwise.
      */
    public boolean hasCandidatePairCircuitBreakerTriggerCount() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'candidatePairCircuitBreakerTriggerCount' field.
      * The total number of circuit breaker triggered over the corresponded transport using the selected candidate pair
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairCircuitBreakerTriggerCount() {
      candidatePairCircuitBreakerTriggerCount = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairRequestsReceived() {
      return candidatePairRequestsReceived;
    }


    /**
      * Sets the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairRequestsReceived(java.lang.Integer value) {
      validate(fields()[50], value);
      this.candidatePairRequestsReceived = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestsReceived' field has been set.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestsReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestsReceived() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'candidatePairRequestsReceived' field.
      * Represents the total number of connectivity check requests received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairRequestsReceived() {
      candidatePairRequestsReceived = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairRequestsSent() {
      return candidatePairRequestsSent;
    }


    /**
      * Sets the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairRequestsSent(java.lang.Integer value) {
      validate(fields()[51], value);
      this.candidatePairRequestsSent = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestsSent' field has been set.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestsSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestsSent() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'candidatePairRequestsSent' field.
      * Represents the total number of connectivity check requests sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairRequestsSent() {
      candidatePairRequestsSent = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairResponsesReceived() {
      return candidatePairResponsesReceived;
    }


    /**
      * Sets the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponsesReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairResponsesReceived(java.lang.Integer value) {
      validate(fields()[52], value);
      this.candidatePairResponsesReceived = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponsesReceived' field has been set.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponsesReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponsesReceived() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'candidatePairResponsesReceived' field.
      * Represents the total number of connectivity check responses received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairResponsesReceived() {
      candidatePairResponsesReceived = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairResponsesSent() {
      return candidatePairResponsesSent;
    }


    /**
      * Sets the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponsesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairResponsesSent(java.lang.Integer value) {
      validate(fields()[53], value);
      this.candidatePairResponsesSent = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponsesSent' field has been set.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponsesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponsesSent() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'candidatePairResponsesSent' field.
      * Represents the total number of connectivity check responses sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairResponsesSent() {
      candidatePairResponsesSent = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairRetransmissionReceived() {
      return candidatePairRetransmissionReceived;
    }


    /**
      * Sets the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRetransmissionReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairRetransmissionReceived(java.lang.Integer value) {
      validate(fields()[54], value);
      this.candidatePairRetransmissionReceived = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRetransmissionReceived' field has been set.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRetransmissionReceived' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRetransmissionReceived() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'candidatePairRetransmissionReceived' field.
      * Represents the total number of connectivity check retransmission received on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairRetransmissionReceived() {
      candidatePairRetransmissionReceived = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairRetransmissionSent() {
      return candidatePairRetransmissionSent;
    }


    /**
      * Sets the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRetransmissionSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairRetransmissionSent(java.lang.Integer value) {
      validate(fields()[55], value);
      this.candidatePairRetransmissionSent = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRetransmissionSent' field has been set.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRetransmissionSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRetransmissionSent() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'candidatePairRetransmissionSent' field.
      * Represents the total number of connectivity check retransmission sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairRetransmissionSent() {
      candidatePairRetransmissionSent = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Integer getCandidatePairConsentRequestsSent() {
      return candidatePairConsentRequestsSent;
    }


    /**
      * Sets the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentRequestsSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairConsentRequestsSent(java.lang.Integer value) {
      validate(fields()[56], value);
      this.candidatePairConsentRequestsSent = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentRequestsSent' field has been set.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentRequestsSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentRequestsSent() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'candidatePairConsentRequestsSent' field.
      * Represents the total number of consent requests sent on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairConsentRequestsSent() {
      candidatePairConsentRequestsSent = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairConsentExpiredTimestamp() {
      return candidatePairConsentExpiredTimestamp;
    }


    /**
      * Sets the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentExpiredTimestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairConsentExpiredTimestamp(java.lang.Long value) {
      validate(fields()[57], value);
      this.candidatePairConsentExpiredTimestamp = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentExpiredTimestamp' field has been set.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentExpiredTimestamp' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentExpiredTimestamp() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'candidatePairConsentExpiredTimestamp' field.
      * Represents the timestamp at which the latest valid STUN binding response expired on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairConsentExpiredTimestamp() {
      candidatePairConsentExpiredTimestamp = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairBytesDiscardedOnSend() {
      return candidatePairBytesDiscardedOnSend;
    }


    /**
      * Sets the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairBytesDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairBytesDiscardedOnSend(java.lang.Long value) {
      validate(fields()[58], value);
      this.candidatePairBytesDiscardedOnSend = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairBytesDiscardedOnSend' field has been set.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairBytesDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasCandidatePairBytesDiscardedOnSend() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'candidatePairBytesDiscardedOnSend' field.
      * Total amount of bytes for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairBytesDiscardedOnSend() {
      candidatePairBytesDiscardedOnSend = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairPacketsDiscardedOnSend' field.
      * Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairPacketsDiscardedOnSend() {
      return candidatePairPacketsDiscardedOnSend;
    }


    /**
      * Sets the value of the 'candidatePairPacketsDiscardedOnSend' field.
      * Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairPacketsDiscardedOnSend'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairPacketsDiscardedOnSend(java.lang.Long value) {
      validate(fields()[59], value);
      this.candidatePairPacketsDiscardedOnSend = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairPacketsDiscardedOnSend' field has been set.
      * Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairPacketsDiscardedOnSend' field has been set, false otherwise.
      */
    public boolean hasCandidatePairPacketsDiscardedOnSend() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'candidatePairPacketsDiscardedOnSend' field.
      * Total amount of packets for this candidate pair that have been discarded due to socket errors on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairPacketsDiscardedOnSend() {
      candidatePairPacketsDiscardedOnSend = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairRequestBytesSent() {
      return candidatePairRequestBytesSent;
    }


    /**
      * Sets the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairRequestBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairRequestBytesSent(java.lang.Long value) {
      validate(fields()[60], value);
      this.candidatePairRequestBytesSent = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairRequestBytesSent' field has been set.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairRequestBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairRequestBytesSent() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'candidatePairRequestBytesSent' field.
      * Total number of bytes sent for connectivity checks on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairRequestBytesSent() {
      candidatePairRequestBytesSent = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairConsentRequestBytesSent() {
      return candidatePairConsentRequestBytesSent;
    }


    /**
      * Sets the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairConsentRequestBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairConsentRequestBytesSent(java.lang.Long value) {
      validate(fields()[61], value);
      this.candidatePairConsentRequestBytesSent = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairConsentRequestBytesSent' field has been set.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairConsentRequestBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairConsentRequestBytesSent() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'candidatePairConsentRequestBytesSent' field.
      * Total number of bytes sent for consent requests on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairConsentRequestBytesSent() {
      candidatePairConsentRequestBytesSent = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return The value.
      */
    public java.lang.Long getCandidatePairResponseBytesSent() {
      return candidatePairResponseBytesSent;
    }


    /**
      * Sets the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @param value The value of 'candidatePairResponseBytesSent'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setCandidatePairResponseBytesSent(java.lang.Long value) {
      validate(fields()[62], value);
      this.candidatePairResponseBytesSent = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'candidatePairResponseBytesSent' field has been set.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return True if the 'candidatePairResponseBytesSent' field has been set, false otherwise.
      */
    public boolean hasCandidatePairResponseBytesSent() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'candidatePairResponseBytesSent' field.
      * Total number of bytes sent for connectivity check responses on the selected candidate pair using the corresponded transport
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearCandidatePairResponseBytesSent() {
      candidatePairResponseBytesSent = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return The value.
      */
    public java.lang.Double getSctpSmoothedRoundTripTime() {
      return sctpSmoothedRoundTripTime;
    }


    /**
      * Sets the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @param value The value of 'sctpSmoothedRoundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSctpSmoothedRoundTripTime(java.lang.Double value) {
      validate(fields()[63], value);
      this.sctpSmoothedRoundTripTime = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpSmoothedRoundTripTime' field has been set.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return True if the 'sctpSmoothedRoundTripTime' field has been set, false otherwise.
      */
    public boolean hasSctpSmoothedRoundTripTime() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'sctpSmoothedRoundTripTime' field.
      * The latest smoothed round-trip time value, corresponding to spinfo_srtt defined in [RFC6458] but converted to seconds. 
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSctpSmoothedRoundTripTime() {
      sctpSmoothedRoundTripTime = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return The value.
      */
    public java.lang.Double getSctpCongestionWindow() {
      return sctpCongestionWindow;
    }


    /**
      * Sets the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @param value The value of 'sctpCongestionWindow'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSctpCongestionWindow(java.lang.Double value) {
      validate(fields()[64], value);
      this.sctpCongestionWindow = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpCongestionWindow' field has been set.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return True if the 'sctpCongestionWindow' field has been set, false otherwise.
      */
    public boolean hasSctpCongestionWindow() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'sctpCongestionWindow' field.
      * The latest congestion window, corresponding to spinfo_cwnd.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSctpCongestionWindow() {
      sctpCongestionWindow = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return The value.
      */
    public java.lang.Double getSctpReceiverWindow() {
      return sctpReceiverWindow;
    }


    /**
      * Sets the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @param value The value of 'sctpReceiverWindow'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSctpReceiverWindow(java.lang.Double value) {
      validate(fields()[65], value);
      this.sctpReceiverWindow = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpReceiverWindow' field has been set.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return True if the 'sctpReceiverWindow' field has been set, false otherwise.
      */
    public boolean hasSctpReceiverWindow() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'sctpReceiverWindow' field.
      * The latest receiver window, corresponding to sstat_rwnd.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSctpReceiverWindow() {
      sctpReceiverWindow = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return The value.
      */
    public java.lang.Integer getSctpMtu() {
      return sctpMtu;
    }


    /**
      * Sets the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @param value The value of 'sctpMtu'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSctpMtu(java.lang.Integer value) {
      validate(fields()[66], value);
      this.sctpMtu = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpMtu' field has been set.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return True if the 'sctpMtu' field has been set, false otherwise.
      */
    public boolean hasSctpMtu() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'sctpMtu' field.
      * The latest maximum transmission unit, corresponding to spinfo_mtu.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSctpMtu() {
      sctpMtu = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return The value.
      */
    public java.lang.Integer getSctpUnackData() {
      return sctpUnackData;
    }


    /**
      * Sets the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @param value The value of 'sctpUnackData'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder setSctpUnackData(java.lang.Integer value) {
      validate(fields()[67], value);
      this.sctpUnackData = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpUnackData' field has been set.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return True if the 'sctpUnackData' field has been set, false otherwise.
      */
    public boolean hasSctpUnackData() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'sctpUnackData' field.
      * The number of unacknowledged DATA chunks, corresponding to sstat_unackdata.
      * @return This builder.
      */
    public org.observertc.schemas.ClientTransportReport.Builder clearSctpUnackData() {
      sctpUnackData = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClientTransportReport build() {
      try {
        ClientTransportReport record = new ClientTransportReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.packetsSent = fieldSetFlags()[10] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[10]);
        record.packetsReceived = fieldSetFlags()[11] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[11]);
        record.bytesSent = fieldSetFlags()[12] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[12]);
        record.bytesReceived = fieldSetFlags()[13] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[13]);
        record.iceRole = fieldSetFlags()[14] ? this.iceRole : (java.lang.String) defaultValue(fields()[14]);
        record.iceLocalUsernameFragment = fieldSetFlags()[15] ? this.iceLocalUsernameFragment : (java.lang.String) defaultValue(fields()[15]);
        record.dtlsState = fieldSetFlags()[16] ? this.dtlsState : (java.lang.String) defaultValue(fields()[16]);
        record.iceTransportState = fieldSetFlags()[17] ? this.iceTransportState : (java.lang.String) defaultValue(fields()[17]);
        record.tlsVersion = fieldSetFlags()[18] ? this.tlsVersion : (java.lang.String) defaultValue(fields()[18]);
        record.dtlsCipher = fieldSetFlags()[19] ? this.dtlsCipher : (java.lang.String) defaultValue(fields()[19]);
        record.srtpCipher = fieldSetFlags()[20] ? this.srtpCipher : (java.lang.String) defaultValue(fields()[20]);
        record.tlsGroup = fieldSetFlags()[21] ? this.tlsGroup : (java.lang.String) defaultValue(fields()[21]);
        record.selectedCandidatePairChanges = fieldSetFlags()[22] ? this.selectedCandidatePairChanges : (java.lang.Integer) defaultValue(fields()[22]);
        record.localAddress = fieldSetFlags()[23] ? this.localAddress : (java.lang.String) defaultValue(fields()[23]);
        record.localPort = fieldSetFlags()[24] ? this.localPort : (java.lang.Integer) defaultValue(fields()[24]);
        record.localProtocol = fieldSetFlags()[25] ? this.localProtocol : (java.lang.String) defaultValue(fields()[25]);
        record.localCandidateType = fieldSetFlags()[26] ? this.localCandidateType : (java.lang.String) defaultValue(fields()[26]);
        record.localCandidateICEServerUrl = fieldSetFlags()[27] ? this.localCandidateICEServerUrl : (java.lang.String) defaultValue(fields()[27]);
        record.localCandidateRelayProtocol = fieldSetFlags()[28] ? this.localCandidateRelayProtocol : (java.lang.String) defaultValue(fields()[28]);
        record.remoteAddress = fieldSetFlags()[29] ? this.remoteAddress : (java.lang.String) defaultValue(fields()[29]);
        record.remotePort = fieldSetFlags()[30] ? this.remotePort : (java.lang.Integer) defaultValue(fields()[30]);
        record.remoteProtocol = fieldSetFlags()[31] ? this.remoteProtocol : (java.lang.String) defaultValue(fields()[31]);
        record.remoteCandidateType = fieldSetFlags()[32] ? this.remoteCandidateType : (java.lang.String) defaultValue(fields()[32]);
        record.remoteCandidateICEServerUrl = fieldSetFlags()[33] ? this.remoteCandidateICEServerUrl : (java.lang.String) defaultValue(fields()[33]);
        record.remoteCandidateRelayProtocol = fieldSetFlags()[34] ? this.remoteCandidateRelayProtocol : (java.lang.String) defaultValue(fields()[34]);
        record.candidatePairState = fieldSetFlags()[35] ? this.candidatePairState : (java.lang.String) defaultValue(fields()[35]);
        record.candidatePairPacketsSent = fieldSetFlags()[36] ? this.candidatePairPacketsSent : (java.lang.Integer) defaultValue(fields()[36]);
        record.candidatePairPacketsReceived = fieldSetFlags()[37] ? this.candidatePairPacketsReceived : (java.lang.Integer) defaultValue(fields()[37]);
        record.candidatePairBytesSent = fieldSetFlags()[38] ? this.candidatePairBytesSent : (java.lang.Long) defaultValue(fields()[38]);
        record.candidatePairBytesReceived = fieldSetFlags()[39] ? this.candidatePairBytesReceived : (java.lang.Long) defaultValue(fields()[39]);
        record.candidatePairLastPacketSentTimestamp = fieldSetFlags()[40] ? this.candidatePairLastPacketSentTimestamp : (java.lang.Long) defaultValue(fields()[40]);
        record.candidatePairLastPacketReceivedTimestamp = fieldSetFlags()[41] ? this.candidatePairLastPacketReceivedTimestamp : (java.lang.Long) defaultValue(fields()[41]);
        record.candidatePairFirstRequestTimestamp = fieldSetFlags()[42] ? this.candidatePairFirstRequestTimestamp : (java.lang.Long) defaultValue(fields()[42]);
        record.candidatePairLastRequestTimestamp = fieldSetFlags()[43] ? this.candidatePairLastRequestTimestamp : (java.lang.Long) defaultValue(fields()[43]);
        record.candidatePairLastResponseTimestamp = fieldSetFlags()[44] ? this.candidatePairLastResponseTimestamp : (java.lang.Long) defaultValue(fields()[44]);
        record.candidatePairTotalRoundTripTime = fieldSetFlags()[45] ? this.candidatePairTotalRoundTripTime : (java.lang.Double) defaultValue(fields()[45]);
        record.candidatePairCurrentRoundTripTime = fieldSetFlags()[46] ? this.candidatePairCurrentRoundTripTime : (java.lang.Double) defaultValue(fields()[46]);
        record.candidatePairAvailableOutgoingBitrate = fieldSetFlags()[47] ? this.candidatePairAvailableOutgoingBitrate : (java.lang.Double) defaultValue(fields()[47]);
        record.candidatePairAvailableIncomingBitrate = fieldSetFlags()[48] ? this.candidatePairAvailableIncomingBitrate : (java.lang.Double) defaultValue(fields()[48]);
        record.candidatePairCircuitBreakerTriggerCount = fieldSetFlags()[49] ? this.candidatePairCircuitBreakerTriggerCount : (java.lang.Integer) defaultValue(fields()[49]);
        record.candidatePairRequestsReceived = fieldSetFlags()[50] ? this.candidatePairRequestsReceived : (java.lang.Integer) defaultValue(fields()[50]);
        record.candidatePairRequestsSent = fieldSetFlags()[51] ? this.candidatePairRequestsSent : (java.lang.Integer) defaultValue(fields()[51]);
        record.candidatePairResponsesReceived = fieldSetFlags()[52] ? this.candidatePairResponsesReceived : (java.lang.Integer) defaultValue(fields()[52]);
        record.candidatePairResponsesSent = fieldSetFlags()[53] ? this.candidatePairResponsesSent : (java.lang.Integer) defaultValue(fields()[53]);
        record.candidatePairRetransmissionReceived = fieldSetFlags()[54] ? this.candidatePairRetransmissionReceived : (java.lang.Integer) defaultValue(fields()[54]);
        record.candidatePairRetransmissionSent = fieldSetFlags()[55] ? this.candidatePairRetransmissionSent : (java.lang.Integer) defaultValue(fields()[55]);
        record.candidatePairConsentRequestsSent = fieldSetFlags()[56] ? this.candidatePairConsentRequestsSent : (java.lang.Integer) defaultValue(fields()[56]);
        record.candidatePairConsentExpiredTimestamp = fieldSetFlags()[57] ? this.candidatePairConsentExpiredTimestamp : (java.lang.Long) defaultValue(fields()[57]);
        record.candidatePairBytesDiscardedOnSend = fieldSetFlags()[58] ? this.candidatePairBytesDiscardedOnSend : (java.lang.Long) defaultValue(fields()[58]);
        record.candidatePairPacketsDiscardedOnSend = fieldSetFlags()[59] ? this.candidatePairPacketsDiscardedOnSend : (java.lang.Long) defaultValue(fields()[59]);
        record.candidatePairRequestBytesSent = fieldSetFlags()[60] ? this.candidatePairRequestBytesSent : (java.lang.Long) defaultValue(fields()[60]);
        record.candidatePairConsentRequestBytesSent = fieldSetFlags()[61] ? this.candidatePairConsentRequestBytesSent : (java.lang.Long) defaultValue(fields()[61]);
        record.candidatePairResponseBytesSent = fieldSetFlags()[62] ? this.candidatePairResponseBytesSent : (java.lang.Long) defaultValue(fields()[62]);
        record.sctpSmoothedRoundTripTime = fieldSetFlags()[63] ? this.sctpSmoothedRoundTripTime : (java.lang.Double) defaultValue(fields()[63]);
        record.sctpCongestionWindow = fieldSetFlags()[64] ? this.sctpCongestionWindow : (java.lang.Double) defaultValue(fields()[64]);
        record.sctpReceiverWindow = fieldSetFlags()[65] ? this.sctpReceiverWindow : (java.lang.Double) defaultValue(fields()[65]);
        record.sctpMtu = fieldSetFlags()[66] ? this.sctpMtu : (java.lang.Integer) defaultValue(fields()[66]);
        record.sctpUnackData = fieldSetFlags()[67] ? this.sctpUnackData : (java.lang.Integer) defaultValue(fields()[67]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClientTransportReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClientTransportReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClientTransportReport>
    READER$ = (org.apache.avro.io.DatumReader<ClientTransportReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.serviceId);

    out.writeString(this.mediaUnitId);

    if (this.marker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marker);
    }

    out.writeLong(this.timestamp);

    out.writeString(this.callId);

    if (this.roomId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.roomId);
    }

    out.writeString(this.clientId);

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    out.writeString(this.peerConnectionId);

    if (this.label == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.label);
    }

    if (this.packetsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsSent);
    }

    if (this.packetsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsReceived);
    }

    if (this.bytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesSent);
    }

    if (this.bytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesReceived);
    }

    if (this.iceRole == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.iceRole);
    }

    if (this.iceLocalUsernameFragment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.iceLocalUsernameFragment);
    }

    if (this.dtlsState == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dtlsState);
    }

    if (this.iceTransportState == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.iceTransportState);
    }

    if (this.tlsVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.tlsVersion);
    }

    if (this.dtlsCipher == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dtlsCipher);
    }

    if (this.srtpCipher == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.srtpCipher);
    }

    if (this.tlsGroup == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.tlsGroup);
    }

    if (this.selectedCandidatePairChanges == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.selectedCandidatePairChanges);
    }

    if (this.localAddress == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localAddress);
    }

    if (this.localPort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.localPort);
    }

    if (this.localProtocol == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localProtocol);
    }

    if (this.localCandidateType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localCandidateType);
    }

    if (this.localCandidateICEServerUrl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localCandidateICEServerUrl);
    }

    if (this.localCandidateRelayProtocol == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.localCandidateRelayProtocol);
    }

    if (this.remoteAddress == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteAddress);
    }

    if (this.remotePort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.remotePort);
    }

    if (this.remoteProtocol == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteProtocol);
    }

    if (this.remoteCandidateType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteCandidateType);
    }

    if (this.remoteCandidateICEServerUrl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteCandidateICEServerUrl);
    }

    if (this.remoteCandidateRelayProtocol == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.remoteCandidateRelayProtocol);
    }

    if (this.candidatePairState == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.candidatePairState);
    }

    if (this.candidatePairPacketsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairPacketsSent);
    }

    if (this.candidatePairPacketsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairPacketsReceived);
    }

    if (this.candidatePairBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairBytesSent);
    }

    if (this.candidatePairBytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairBytesReceived);
    }

    if (this.candidatePairLastPacketSentTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairLastPacketSentTimestamp);
    }

    if (this.candidatePairLastPacketReceivedTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairLastPacketReceivedTimestamp);
    }

    if (this.candidatePairFirstRequestTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairFirstRequestTimestamp);
    }

    if (this.candidatePairLastRequestTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairLastRequestTimestamp);
    }

    if (this.candidatePairLastResponseTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairLastResponseTimestamp);
    }

    if (this.candidatePairTotalRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.candidatePairTotalRoundTripTime);
    }

    if (this.candidatePairCurrentRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.candidatePairCurrentRoundTripTime);
    }

    if (this.candidatePairAvailableOutgoingBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.candidatePairAvailableOutgoingBitrate);
    }

    if (this.candidatePairAvailableIncomingBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.candidatePairAvailableIncomingBitrate);
    }

    if (this.candidatePairCircuitBreakerTriggerCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairCircuitBreakerTriggerCount);
    }

    if (this.candidatePairRequestsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairRequestsReceived);
    }

    if (this.candidatePairRequestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairRequestsSent);
    }

    if (this.candidatePairResponsesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairResponsesReceived);
    }

    if (this.candidatePairResponsesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairResponsesSent);
    }

    if (this.candidatePairRetransmissionReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairRetransmissionReceived);
    }

    if (this.candidatePairRetransmissionSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairRetransmissionSent);
    }

    if (this.candidatePairConsentRequestsSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.candidatePairConsentRequestsSent);
    }

    if (this.candidatePairConsentExpiredTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairConsentExpiredTimestamp);
    }

    if (this.candidatePairBytesDiscardedOnSend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairBytesDiscardedOnSend);
    }

    if (this.candidatePairPacketsDiscardedOnSend == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairPacketsDiscardedOnSend);
    }

    if (this.candidatePairRequestBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairRequestBytesSent);
    }

    if (this.candidatePairConsentRequestBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairConsentRequestBytesSent);
    }

    if (this.candidatePairResponseBytesSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.candidatePairResponseBytesSent);
    }

    if (this.sctpSmoothedRoundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.sctpSmoothedRoundTripTime);
    }

    if (this.sctpCongestionWindow == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.sctpCongestionWindow);
    }

    if (this.sctpReceiverWindow == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.sctpReceiverWindow);
    }

    if (this.sctpMtu == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sctpMtu);
    }

    if (this.sctpUnackData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sctpUnackData);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.serviceId = in.readString();

      this.mediaUnitId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.marker = null;
      } else {
        this.marker = in.readString();
      }

      this.timestamp = in.readLong();

      this.callId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.roomId = null;
      } else {
        this.roomId = in.readString();
      }

      this.clientId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      this.peerConnectionId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.label = null;
      } else {
        this.label = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsSent = null;
      } else {
        this.packetsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsReceived = null;
      } else {
        this.packetsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesSent = null;
      } else {
        this.bytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesReceived = null;
      } else {
        this.bytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.iceRole = null;
      } else {
        this.iceRole = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.iceLocalUsernameFragment = null;
      } else {
        this.iceLocalUsernameFragment = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dtlsState = null;
      } else {
        this.dtlsState = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.iceTransportState = null;
      } else {
        this.iceTransportState = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tlsVersion = null;
      } else {
        this.tlsVersion = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dtlsCipher = null;
      } else {
        this.dtlsCipher = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.srtpCipher = null;
      } else {
        this.srtpCipher = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tlsGroup = null;
      } else {
        this.tlsGroup = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.selectedCandidatePairChanges = null;
      } else {
        this.selectedCandidatePairChanges = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localAddress = null;
      } else {
        this.localAddress = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localPort = null;
      } else {
        this.localPort = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localProtocol = null;
      } else {
        this.localProtocol = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localCandidateType = null;
      } else {
        this.localCandidateType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localCandidateICEServerUrl = null;
      } else {
        this.localCandidateICEServerUrl = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.localCandidateRelayProtocol = null;
      } else {
        this.localCandidateRelayProtocol = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteAddress = null;
      } else {
        this.remoteAddress = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remotePort = null;
      } else {
        this.remotePort = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteProtocol = null;
      } else {
        this.remoteProtocol = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteCandidateType = null;
      } else {
        this.remoteCandidateType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteCandidateICEServerUrl = null;
      } else {
        this.remoteCandidateICEServerUrl = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.remoteCandidateRelayProtocol = null;
      } else {
        this.remoteCandidateRelayProtocol = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairState = null;
      } else {
        this.candidatePairState = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairPacketsSent = null;
      } else {
        this.candidatePairPacketsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairPacketsReceived = null;
      } else {
        this.candidatePairPacketsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairBytesSent = null;
      } else {
        this.candidatePairBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairBytesReceived = null;
      } else {
        this.candidatePairBytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairLastPacketSentTimestamp = null;
      } else {
        this.candidatePairLastPacketSentTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairLastPacketReceivedTimestamp = null;
      } else {
        this.candidatePairLastPacketReceivedTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairFirstRequestTimestamp = null;
      } else {
        this.candidatePairFirstRequestTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairLastRequestTimestamp = null;
      } else {
        this.candidatePairLastRequestTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairLastResponseTimestamp = null;
      } else {
        this.candidatePairLastResponseTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairTotalRoundTripTime = null;
      } else {
        this.candidatePairTotalRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairCurrentRoundTripTime = null;
      } else {
        this.candidatePairCurrentRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairAvailableOutgoingBitrate = null;
      } else {
        this.candidatePairAvailableOutgoingBitrate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairAvailableIncomingBitrate = null;
      } else {
        this.candidatePairAvailableIncomingBitrate = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairCircuitBreakerTriggerCount = null;
      } else {
        this.candidatePairCircuitBreakerTriggerCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairRequestsReceived = null;
      } else {
        this.candidatePairRequestsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairRequestsSent = null;
      } else {
        this.candidatePairRequestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairResponsesReceived = null;
      } else {
        this.candidatePairResponsesReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairResponsesSent = null;
      } else {
        this.candidatePairResponsesSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairRetransmissionReceived = null;
      } else {
        this.candidatePairRetransmissionReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairRetransmissionSent = null;
      } else {
        this.candidatePairRetransmissionSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairConsentRequestsSent = null;
      } else {
        this.candidatePairConsentRequestsSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairConsentExpiredTimestamp = null;
      } else {
        this.candidatePairConsentExpiredTimestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairBytesDiscardedOnSend = null;
      } else {
        this.candidatePairBytesDiscardedOnSend = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairPacketsDiscardedOnSend = null;
      } else {
        this.candidatePairPacketsDiscardedOnSend = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairRequestBytesSent = null;
      } else {
        this.candidatePairRequestBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairConsentRequestBytesSent = null;
      } else {
        this.candidatePairConsentRequestBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.candidatePairResponseBytesSent = null;
      } else {
        this.candidatePairResponseBytesSent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sctpSmoothedRoundTripTime = null;
      } else {
        this.sctpSmoothedRoundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sctpCongestionWindow = null;
      } else {
        this.sctpCongestionWindow = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sctpReceiverWindow = null;
      } else {
        this.sctpReceiverWindow = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sctpMtu = null;
      } else {
        this.sctpMtu = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sctpUnackData = null;
      } else {
        this.sctpUnackData = in.readInt();
      }

    } else {
      for (int i = 0; i < 68; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.serviceId = in.readString();
          break;

        case 1:
          this.mediaUnitId = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marker = null;
          } else {
            this.marker = in.readString();
          }
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          this.callId = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roomId = null;
          } else {
            this.roomId = in.readString();
          }
          break;

        case 6:
          this.clientId = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 8:
          this.peerConnectionId = in.readString();
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.label = null;
          } else {
            this.label = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsSent = null;
          } else {
            this.packetsSent = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsReceived = null;
          } else {
            this.packetsReceived = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesSent = null;
          } else {
            this.bytesSent = in.readLong();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesReceived = null;
          } else {
            this.bytesReceived = in.readLong();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iceRole = null;
          } else {
            this.iceRole = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iceLocalUsernameFragment = null;
          } else {
            this.iceLocalUsernameFragment = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dtlsState = null;
          } else {
            this.dtlsState = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iceTransportState = null;
          } else {
            this.iceTransportState = in.readString();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tlsVersion = null;
          } else {
            this.tlsVersion = in.readString();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dtlsCipher = null;
          } else {
            this.dtlsCipher = in.readString();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.srtpCipher = null;
          } else {
            this.srtpCipher = in.readString();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tlsGroup = null;
          } else {
            this.tlsGroup = in.readString();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.selectedCandidatePairChanges = null;
          } else {
            this.selectedCandidatePairChanges = in.readInt();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localAddress = null;
          } else {
            this.localAddress = in.readString();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localPort = null;
          } else {
            this.localPort = in.readInt();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localProtocol = null;
          } else {
            this.localProtocol = in.readString();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localCandidateType = null;
          } else {
            this.localCandidateType = in.readString();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localCandidateICEServerUrl = null;
          } else {
            this.localCandidateICEServerUrl = in.readString();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.localCandidateRelayProtocol = null;
          } else {
            this.localCandidateRelayProtocol = in.readString();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteAddress = null;
          } else {
            this.remoteAddress = in.readString();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remotePort = null;
          } else {
            this.remotePort = in.readInt();
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteProtocol = null;
          } else {
            this.remoteProtocol = in.readString();
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteCandidateType = null;
          } else {
            this.remoteCandidateType = in.readString();
          }
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteCandidateICEServerUrl = null;
          } else {
            this.remoteCandidateICEServerUrl = in.readString();
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.remoteCandidateRelayProtocol = null;
          } else {
            this.remoteCandidateRelayProtocol = in.readString();
          }
          break;

        case 35:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairState = null;
          } else {
            this.candidatePairState = in.readString();
          }
          break;

        case 36:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairPacketsSent = null;
          } else {
            this.candidatePairPacketsSent = in.readInt();
          }
          break;

        case 37:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairPacketsReceived = null;
          } else {
            this.candidatePairPacketsReceived = in.readInt();
          }
          break;

        case 38:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairBytesSent = null;
          } else {
            this.candidatePairBytesSent = in.readLong();
          }
          break;

        case 39:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairBytesReceived = null;
          } else {
            this.candidatePairBytesReceived = in.readLong();
          }
          break;

        case 40:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairLastPacketSentTimestamp = null;
          } else {
            this.candidatePairLastPacketSentTimestamp = in.readLong();
          }
          break;

        case 41:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairLastPacketReceivedTimestamp = null;
          } else {
            this.candidatePairLastPacketReceivedTimestamp = in.readLong();
          }
          break;

        case 42:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairFirstRequestTimestamp = null;
          } else {
            this.candidatePairFirstRequestTimestamp = in.readLong();
          }
          break;

        case 43:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairLastRequestTimestamp = null;
          } else {
            this.candidatePairLastRequestTimestamp = in.readLong();
          }
          break;

        case 44:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairLastResponseTimestamp = null;
          } else {
            this.candidatePairLastResponseTimestamp = in.readLong();
          }
          break;

        case 45:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairTotalRoundTripTime = null;
          } else {
            this.candidatePairTotalRoundTripTime = in.readDouble();
          }
          break;

        case 46:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairCurrentRoundTripTime = null;
          } else {
            this.candidatePairCurrentRoundTripTime = in.readDouble();
          }
          break;

        case 47:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairAvailableOutgoingBitrate = null;
          } else {
            this.candidatePairAvailableOutgoingBitrate = in.readDouble();
          }
          break;

        case 48:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairAvailableIncomingBitrate = null;
          } else {
            this.candidatePairAvailableIncomingBitrate = in.readDouble();
          }
          break;

        case 49:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairCircuitBreakerTriggerCount = null;
          } else {
            this.candidatePairCircuitBreakerTriggerCount = in.readInt();
          }
          break;

        case 50:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairRequestsReceived = null;
          } else {
            this.candidatePairRequestsReceived = in.readInt();
          }
          break;

        case 51:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairRequestsSent = null;
          } else {
            this.candidatePairRequestsSent = in.readInt();
          }
          break;

        case 52:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairResponsesReceived = null;
          } else {
            this.candidatePairResponsesReceived = in.readInt();
          }
          break;

        case 53:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairResponsesSent = null;
          } else {
            this.candidatePairResponsesSent = in.readInt();
          }
          break;

        case 54:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairRetransmissionReceived = null;
          } else {
            this.candidatePairRetransmissionReceived = in.readInt();
          }
          break;

        case 55:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairRetransmissionSent = null;
          } else {
            this.candidatePairRetransmissionSent = in.readInt();
          }
          break;

        case 56:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairConsentRequestsSent = null;
          } else {
            this.candidatePairConsentRequestsSent = in.readInt();
          }
          break;

        case 57:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairConsentExpiredTimestamp = null;
          } else {
            this.candidatePairConsentExpiredTimestamp = in.readLong();
          }
          break;

        case 58:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairBytesDiscardedOnSend = null;
          } else {
            this.candidatePairBytesDiscardedOnSend = in.readLong();
          }
          break;

        case 59:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairPacketsDiscardedOnSend = null;
          } else {
            this.candidatePairPacketsDiscardedOnSend = in.readLong();
          }
          break;

        case 60:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairRequestBytesSent = null;
          } else {
            this.candidatePairRequestBytesSent = in.readLong();
          }
          break;

        case 61:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairConsentRequestBytesSent = null;
          } else {
            this.candidatePairConsentRequestBytesSent = in.readLong();
          }
          break;

        case 62:
          if (in.readIndex() != 1) {
            in.readNull();
            this.candidatePairResponseBytesSent = null;
          } else {
            this.candidatePairResponseBytesSent = in.readLong();
          }
          break;

        case 63:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sctpSmoothedRoundTripTime = null;
          } else {
            this.sctpSmoothedRoundTripTime = in.readDouble();
          }
          break;

        case 64:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sctpCongestionWindow = null;
          } else {
            this.sctpCongestionWindow = in.readDouble();
          }
          break;

        case 65:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sctpReceiverWindow = null;
          } else {
            this.sctpReceiverWindow = in.readDouble();
          }
          break;

        case 66:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sctpMtu = null;
          } else {
            this.sctpMtu = in.readInt();
          }
          break;

        case 67:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sctpUnackData = null;
          } else {
            this.sctpUnackData = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










