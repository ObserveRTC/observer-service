/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A Report created for RTP streams going through the SFU */
@org.apache.avro.specific.AvroGenerated
public class SfuInboundRtpPadReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7826353443615411557L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SfuInboundRtpPadReport\",\"namespace\":\"org.observertc.schemas\",\"doc\":\"A Report created for RTP streams going through the SFU\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The service id the report belongs to\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"sfuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The provided unique identifier of the SFU\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"transportId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of the transport the RTP stream uses.\"},{\"name\":\"mediaStreamId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier of the Media stream the event is related to\"},{\"name\":\"padId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The id of Sfu pad.\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The synchronization source id of the RTP stream\"},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track the RTP stream related to at the client side\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to\",\"default\":null},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The callId the event belongs to\",\"default\":null},{\"name\":\"mediaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the type of the media the stream carries (\\\"audio\\\" or \\\"video\\\")\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The payload type field of the RTP header\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The negotiated mimeType in the SDP\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The clock rate of the media source the RTP header carries\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The actual SDP line from the negotiation related to this RTP stream\",\"default\":null},{\"name\":\"rid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\" The rid parameter of the corresponded RTP stream\",\"default\":null},{\"name\":\"rtxSsrc\",\"type\":[\"null\",\"long\"],\"doc\":\"If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. \",\"default\":null},{\"name\":\"targetBitrate\",\"type\":[\"null\",\"long\"],\"doc\":\"he bitrate the corresponded stream targets.\",\"default\":null},{\"name\":\"voiceActivityFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through\",\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams\",\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of negative acknowledgement received on the corresponded RTP stream.\",\"default\":null},{\"name\":\"sliCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of discarded packets on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsFailedDecryption\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets failed to be decrypted on the corresponded RTP stream.\",\"default\":null},{\"name\":\"packetsDuplicated\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of duplicated packets appeared on the corresponded RTP stream.\",\"default\":null},{\"name\":\"fecPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of FEC packets received on the corresponded RTP stream.\",\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of FEC packets discarded on the corresponded RTP stream.\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"The total amount of payload bytes received on the corresponded RTP stream.\",\"default\":null},{\"name\":\"rtcpSrReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of SR reports received by the corresponded RTP stream\",\"default\":null},{\"name\":\"rtcpRrSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of RR reports sent on the corresponded RTP stream\",\"default\":null},{\"name\":\"rtxPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"If rtx packets are sent or received on the same stream then this number indicates how may has been sent\",\"default\":null},{\"name\":\"rtxPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"If rtx packets are received on the same stream then this number indicates how may has been discarded\",\"default\":null},{\"name\":\"framesReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of frames received on the corresponded RTP stream\",\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of frames the Sfu has been decoded\",\"default\":null},{\"name\":\"keyFramesDecoded\",\"type\":[\"null\",\"int\"],\"doc\":\"Indicate the number of keyframes the Sfu has been decoded\",\"default\":null},{\"name\":\"fractionLost\",\"type\":[\"null\",\"double\"],\"doc\":\"The calculated fractionLost of the stream\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The calculated jitter of the stream\",\"default\":null},{\"name\":\"roundTripTime\",\"type\":[\"null\",\"double\"],\"doc\":\"The calculated RTT of the stream\",\"default\":null},{\"name\":\"attachments\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Arbitrary attachments holds relevant information about the stream.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SfuInboundRtpPadReport> ENCODER =
      new BinaryMessageEncoder<SfuInboundRtpPadReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SfuInboundRtpPadReport> DECODER =
      new BinaryMessageDecoder<SfuInboundRtpPadReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SfuInboundRtpPadReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SfuInboundRtpPadReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SfuInboundRtpPadReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SfuInboundRtpPadReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SfuInboundRtpPadReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SfuInboundRtpPadReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SfuInboundRtpPadReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SfuInboundRtpPadReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The service id the report belongs to */
  private java.lang.String serviceId;
  /** The media unit id the report belongs to */
  private java.lang.String mediaUnitId;
  /** The provided unique identifier of the SFU */
  private java.lang.String sfuId;
  /** The marker the originated sample is reported with */
  private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
  private long timestamp;
  /** The id of the transport the RTP stream uses. */
  private java.lang.String transportId;
  /** Unique identifier of the Media stream the event is related to */
  private java.lang.String mediaStreamId;
  /** The id of Sfu pad. */
  private java.lang.String padId;
  /** The synchronization source id of the RTP stream */
  private long ssrc;
  /** The id of the track the RTP stream related to at the client side */
  private java.lang.String trackId;
  /** If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to */
  private java.lang.String clientId;
  /** The callId the event belongs to */
  private java.lang.String callId;
  /** the type of the media the stream carries ("audio" or "video") */
  private java.lang.String mediaType;
  /** The payload type field of the RTP header */
  private java.lang.Integer payloadType;
  /** The negotiated mimeType in the SDP */
  private java.lang.String mimeType;
  /** The clock rate of the media source the RTP header carries */
  private java.lang.Long clockRate;
  /** The actual SDP line from the negotiation related to this RTP stream */
  private java.lang.String sdpFmtpLine;
  /**  The rid parameter of the corresponded RTP stream */
  private java.lang.String rid;
  /** If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc.  */
  private java.lang.Long rtxSsrc;
  /** he bitrate the corresponded stream targets. */
  private java.lang.Long targetBitrate;
  /** The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through */
  private java.lang.Boolean voiceActivityFlag;
  /** The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams */
  private java.lang.Integer firCount;
  /** The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams */
  private java.lang.Integer pliCount;
  /** The total number of negative acknowledgement received on the corresponded RTP stream. */
  private java.lang.Integer nackCount;
  /** The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream */
  private java.lang.Integer sliCount;
  /** The total number of packets lost on the corresponded RTP stream. */
  private java.lang.Integer packetsLost;
  /** The total number of packets received on the corresponded RTP stream. */
  private java.lang.Integer packetsReceived;
  /** The total number of discarded packets on the corresponded RTP stream. */
  private java.lang.Integer packetsDiscarded;
  /** The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream. */
  private java.lang.Integer packetsRepaired;
  /** The total number of packets failed to be decrypted on the corresponded RTP stream. */
  private java.lang.Integer packetsFailedDecryption;
  /** The total number of duplicated packets appeared on the corresponded RTP stream. */
  private java.lang.Integer packetsDuplicated;
  /** The total number of FEC packets received on the corresponded RTP stream. */
  private java.lang.Integer fecPacketsReceived;
  /** The total number of FEC packets discarded on the corresponded RTP stream. */
  private java.lang.Integer fecPacketsDiscarded;
  /** The total amount of payload bytes received on the corresponded RTP stream. */
  private java.lang.Long bytesReceived;
  /** The total number of SR reports received by the corresponded RTP stream */
  private java.lang.Integer rtcpSrReceived;
  /** The total number of RR reports sent on the corresponded RTP stream */
  private java.lang.Integer rtcpRrSent;
  /** If rtx packets are sent or received on the same stream then this number indicates how may has been sent */
  private java.lang.Integer rtxPacketsReceived;
  /** If rtx packets are received on the same stream then this number indicates how may has been discarded */
  private java.lang.Integer rtxPacketsDiscarded;
  /** The number of frames received on the corresponded RTP stream */
  private java.lang.Integer framesReceived;
  /** Indicate the number of frames the Sfu has been decoded */
  private java.lang.Integer framesDecoded;
  /** Indicate the number of keyframes the Sfu has been decoded */
  private java.lang.Integer keyFramesDecoded;
  /** The calculated fractionLost of the stream */
  private java.lang.Double fractionLost;
  /** The calculated jitter of the stream */
  private java.lang.Double jitter;
  /** The calculated RTT of the stream */
  private java.lang.Double roundTripTime;
  /** Arbitrary attachments holds relevant information about the stream. */
  private java.lang.String attachments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SfuInboundRtpPadReport() {}

  /**
   * All-args constructor.
   * @param serviceId The service id the report belongs to
   * @param mediaUnitId The media unit id the report belongs to
   * @param sfuId The provided unique identifier of the SFU
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param transportId The id of the transport the RTP stream uses.
   * @param mediaStreamId Unique identifier of the Media stream the event is related to
   * @param padId The id of Sfu pad.
   * @param ssrc The synchronization source id of the RTP stream
   * @param trackId The id of the track the RTP stream related to at the client side
   * @param clientId If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
   * @param callId The callId the event belongs to
   * @param mediaType the type of the media the stream carries ("audio" or "video")
   * @param payloadType The payload type field of the RTP header
   * @param mimeType The negotiated mimeType in the SDP
   * @param clockRate The clock rate of the media source the RTP header carries
   * @param sdpFmtpLine The actual SDP line from the negotiation related to this RTP stream
   * @param rid  The rid parameter of the corresponded RTP stream
   * @param rtxSsrc If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
   * @param targetBitrate he bitrate the corresponded stream targets.
   * @param voiceActivityFlag The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
   * @param firCount The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
   * @param pliCount The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
   * @param nackCount The total number of negative acknowledgement received on the corresponded RTP stream.
   * @param sliCount The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
   * @param packetsLost The total number of packets lost on the corresponded RTP stream.
   * @param packetsReceived The total number of packets received on the corresponded RTP stream.
   * @param packetsDiscarded The total number of discarded packets on the corresponded RTP stream.
   * @param packetsRepaired The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
   * @param packetsFailedDecryption The total number of packets failed to be decrypted on the corresponded RTP stream.
   * @param packetsDuplicated The total number of duplicated packets appeared on the corresponded RTP stream.
   * @param fecPacketsReceived The total number of FEC packets received on the corresponded RTP stream.
   * @param fecPacketsDiscarded The total number of FEC packets discarded on the corresponded RTP stream.
   * @param bytesReceived The total amount of payload bytes received on the corresponded RTP stream.
   * @param rtcpSrReceived The total number of SR reports received by the corresponded RTP stream
   * @param rtcpRrSent The total number of RR reports sent on the corresponded RTP stream
   * @param rtxPacketsReceived If rtx packets are sent or received on the same stream then this number indicates how may has been sent
   * @param rtxPacketsDiscarded If rtx packets are received on the same stream then this number indicates how may has been discarded
   * @param framesReceived The number of frames received on the corresponded RTP stream
   * @param framesDecoded Indicate the number of frames the Sfu has been decoded
   * @param keyFramesDecoded Indicate the number of keyframes the Sfu has been decoded
   * @param fractionLost The calculated fractionLost of the stream
   * @param jitter The calculated jitter of the stream
   * @param roundTripTime The calculated RTT of the stream
   * @param attachments Arbitrary attachments holds relevant information about the stream.
   */
  public SfuInboundRtpPadReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String sfuId, java.lang.String marker, java.lang.Long timestamp, java.lang.String transportId, java.lang.String mediaStreamId, java.lang.String padId, java.lang.Long ssrc, java.lang.String trackId, java.lang.String clientId, java.lang.String callId, java.lang.String mediaType, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.String sdpFmtpLine, java.lang.String rid, java.lang.Long rtxSsrc, java.lang.Long targetBitrate, java.lang.Boolean voiceActivityFlag, java.lang.Integer firCount, java.lang.Integer pliCount, java.lang.Integer nackCount, java.lang.Integer sliCount, java.lang.Integer packetsLost, java.lang.Integer packetsReceived, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRepaired, java.lang.Integer packetsFailedDecryption, java.lang.Integer packetsDuplicated, java.lang.Integer fecPacketsReceived, java.lang.Integer fecPacketsDiscarded, java.lang.Long bytesReceived, java.lang.Integer rtcpSrReceived, java.lang.Integer rtcpRrSent, java.lang.Integer rtxPacketsReceived, java.lang.Integer rtxPacketsDiscarded, java.lang.Integer framesReceived, java.lang.Integer framesDecoded, java.lang.Integer keyFramesDecoded, java.lang.Double fractionLost, java.lang.Double jitter, java.lang.Double roundTripTime, java.lang.String attachments) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.sfuId = sfuId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.transportId = transportId;
    this.mediaStreamId = mediaStreamId;
    this.padId = padId;
    this.ssrc = ssrc;
    this.trackId = trackId;
    this.clientId = clientId;
    this.callId = callId;
    this.mediaType = mediaType;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.sdpFmtpLine = sdpFmtpLine;
    this.rid = rid;
    this.rtxSsrc = rtxSsrc;
    this.targetBitrate = targetBitrate;
    this.voiceActivityFlag = voiceActivityFlag;
    this.firCount = firCount;
    this.pliCount = pliCount;
    this.nackCount = nackCount;
    this.sliCount = sliCount;
    this.packetsLost = packetsLost;
    this.packetsReceived = packetsReceived;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.packetsFailedDecryption = packetsFailedDecryption;
    this.packetsDuplicated = packetsDuplicated;
    this.fecPacketsReceived = fecPacketsReceived;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.bytesReceived = bytesReceived;
    this.rtcpSrReceived = rtcpSrReceived;
    this.rtcpRrSent = rtcpRrSent;
    this.rtxPacketsReceived = rtxPacketsReceived;
    this.rtxPacketsDiscarded = rtxPacketsDiscarded;
    this.framesReceived = framesReceived;
    this.framesDecoded = framesDecoded;
    this.keyFramesDecoded = keyFramesDecoded;
    this.fractionLost = fractionLost;
    this.jitter = jitter;
    this.roundTripTime = roundTripTime;
    this.attachments = attachments;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return sfuId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return transportId;
    case 6: return mediaStreamId;
    case 7: return padId;
    case 8: return ssrc;
    case 9: return trackId;
    case 10: return clientId;
    case 11: return callId;
    case 12: return mediaType;
    case 13: return payloadType;
    case 14: return mimeType;
    case 15: return clockRate;
    case 16: return sdpFmtpLine;
    case 17: return rid;
    case 18: return rtxSsrc;
    case 19: return targetBitrate;
    case 20: return voiceActivityFlag;
    case 21: return firCount;
    case 22: return pliCount;
    case 23: return nackCount;
    case 24: return sliCount;
    case 25: return packetsLost;
    case 26: return packetsReceived;
    case 27: return packetsDiscarded;
    case 28: return packetsRepaired;
    case 29: return packetsFailedDecryption;
    case 30: return packetsDuplicated;
    case 31: return fecPacketsReceived;
    case 32: return fecPacketsDiscarded;
    case 33: return bytesReceived;
    case 34: return rtcpSrReceived;
    case 35: return rtcpRrSent;
    case 36: return rtxPacketsReceived;
    case 37: return rtxPacketsDiscarded;
    case 38: return framesReceived;
    case 39: return framesDecoded;
    case 40: return keyFramesDecoded;
    case 41: return fractionLost;
    case 42: return jitter;
    case 43: return roundTripTime;
    case 44: return attachments;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = value$ != null ? value$.toString() : null; break;
    case 1: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 2: sfuId = value$ != null ? value$.toString() : null; break;
    case 3: marker = value$ != null ? value$.toString() : null; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: transportId = value$ != null ? value$.toString() : null; break;
    case 6: mediaStreamId = value$ != null ? value$.toString() : null; break;
    case 7: padId = value$ != null ? value$.toString() : null; break;
    case 8: ssrc = (java.lang.Long)value$; break;
    case 9: trackId = value$ != null ? value$.toString() : null; break;
    case 10: clientId = value$ != null ? value$.toString() : null; break;
    case 11: callId = value$ != null ? value$.toString() : null; break;
    case 12: mediaType = value$ != null ? value$.toString() : null; break;
    case 13: payloadType = (java.lang.Integer)value$; break;
    case 14: mimeType = value$ != null ? value$.toString() : null; break;
    case 15: clockRate = (java.lang.Long)value$; break;
    case 16: sdpFmtpLine = value$ != null ? value$.toString() : null; break;
    case 17: rid = value$ != null ? value$.toString() : null; break;
    case 18: rtxSsrc = (java.lang.Long)value$; break;
    case 19: targetBitrate = (java.lang.Long)value$; break;
    case 20: voiceActivityFlag = (java.lang.Boolean)value$; break;
    case 21: firCount = (java.lang.Integer)value$; break;
    case 22: pliCount = (java.lang.Integer)value$; break;
    case 23: nackCount = (java.lang.Integer)value$; break;
    case 24: sliCount = (java.lang.Integer)value$; break;
    case 25: packetsLost = (java.lang.Integer)value$; break;
    case 26: packetsReceived = (java.lang.Integer)value$; break;
    case 27: packetsDiscarded = (java.lang.Integer)value$; break;
    case 28: packetsRepaired = (java.lang.Integer)value$; break;
    case 29: packetsFailedDecryption = (java.lang.Integer)value$; break;
    case 30: packetsDuplicated = (java.lang.Integer)value$; break;
    case 31: fecPacketsReceived = (java.lang.Integer)value$; break;
    case 32: fecPacketsDiscarded = (java.lang.Integer)value$; break;
    case 33: bytesReceived = (java.lang.Long)value$; break;
    case 34: rtcpSrReceived = (java.lang.Integer)value$; break;
    case 35: rtcpRrSent = (java.lang.Integer)value$; break;
    case 36: rtxPacketsReceived = (java.lang.Integer)value$; break;
    case 37: rtxPacketsDiscarded = (java.lang.Integer)value$; break;
    case 38: framesReceived = (java.lang.Integer)value$; break;
    case 39: framesDecoded = (java.lang.Integer)value$; break;
    case 40: keyFramesDecoded = (java.lang.Integer)value$; break;
    case 41: fractionLost = (java.lang.Double)value$; break;
    case 42: jitter = (java.lang.Double)value$; break;
    case 43: roundTripTime = (java.lang.Double)value$; break;
    case 44: attachments = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The service id the report belongs to
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'sfuId' field.
   * @return The provided unique identifier of the SFU
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }



  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'transportId' field.
   * @return The id of the transport the RTP stream uses.
   */
  public java.lang.String getTransportId() {
    return transportId;
  }



  /**
   * Gets the value of the 'mediaStreamId' field.
   * @return Unique identifier of the Media stream the event is related to
   */
  public java.lang.String getMediaStreamId() {
    return mediaStreamId;
  }



  /**
   * Gets the value of the 'padId' field.
   * @return The id of Sfu pad.
   */
  public java.lang.String getPadId() {
    return padId;
  }



  /**
   * Gets the value of the 'ssrc' field.
   * @return The synchronization source id of the RTP stream
   */
  public long getSsrc() {
    return ssrc;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track the RTP stream related to at the client side
   */
  public java.lang.String getTrackId() {
    return trackId;
  }



  /**
   * Gets the value of the 'clientId' field.
   * @return If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
   */
  public java.lang.String getClientId() {
    return clientId;
  }



  /**
   * Gets the value of the 'callId' field.
   * @return The callId the event belongs to
   */
  public java.lang.String getCallId() {
    return callId;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return the type of the media the stream carries ("audio" or "video")
   */
  public java.lang.String getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'payloadType' field.
   * @return The payload type field of the RTP header
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }



  /**
   * Gets the value of the 'mimeType' field.
   * @return The negotiated mimeType in the SDP
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }



  /**
   * Gets the value of the 'clockRate' field.
   * @return The clock rate of the media source the RTP header carries
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }



  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The actual SDP line from the negotiation related to this RTP stream
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }



  /**
   * Gets the value of the 'rid' field.
   * @return  The rid parameter of the corresponded RTP stream
   */
  public java.lang.String getRid() {
    return rid;
  }



  /**
   * Gets the value of the 'rtxSsrc' field.
   * @return If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
   */
  public java.lang.Long getRtxSsrc() {
    return rtxSsrc;
  }



  /**
   * Gets the value of the 'targetBitrate' field.
   * @return he bitrate the corresponded stream targets.
   */
  public java.lang.Long getTargetBitrate() {
    return targetBitrate;
  }



  /**
   * Gets the value of the 'voiceActivityFlag' field.
   * @return The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
   */
  public java.lang.Boolean getVoiceActivityFlag() {
    return voiceActivityFlag;
  }



  /**
   * Gets the value of the 'firCount' field.
   * @return The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }



  /**
   * Gets the value of the 'pliCount' field.
   * @return The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }



  /**
   * Gets the value of the 'nackCount' field.
   * @return The total number of negative acknowledgement received on the corresponded RTP stream.
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }



  /**
   * Gets the value of the 'sliCount' field.
   * @return The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
   */
  public java.lang.Integer getSliCount() {
    return sliCount;
  }



  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of packets lost on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }



  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }



  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of discarded packets on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }



  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsRepaired() {
    return packetsRepaired;
  }



  /**
   * Gets the value of the 'packetsFailedDecryption' field.
   * @return The total number of packets failed to be decrypted on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsFailedDecryption() {
    return packetsFailedDecryption;
  }



  /**
   * Gets the value of the 'packetsDuplicated' field.
   * @return The total number of duplicated packets appeared on the corresponded RTP stream.
   */
  public java.lang.Integer getPacketsDuplicated() {
    return packetsDuplicated;
  }



  /**
   * Gets the value of the 'fecPacketsReceived' field.
   * @return The total number of FEC packets received on the corresponded RTP stream.
   */
  public java.lang.Integer getFecPacketsReceived() {
    return fecPacketsReceived;
  }



  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return The total number of FEC packets discarded on the corresponded RTP stream.
   */
  public java.lang.Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }



  /**
   * Gets the value of the 'bytesReceived' field.
   * @return The total amount of payload bytes received on the corresponded RTP stream.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }



  /**
   * Gets the value of the 'rtcpSrReceived' field.
   * @return The total number of SR reports received by the corresponded RTP stream
   */
  public java.lang.Integer getRtcpSrReceived() {
    return rtcpSrReceived;
  }



  /**
   * Gets the value of the 'rtcpRrSent' field.
   * @return The total number of RR reports sent on the corresponded RTP stream
   */
  public java.lang.Integer getRtcpRrSent() {
    return rtcpRrSent;
  }



  /**
   * Gets the value of the 'rtxPacketsReceived' field.
   * @return If rtx packets are sent or received on the same stream then this number indicates how may has been sent
   */
  public java.lang.Integer getRtxPacketsReceived() {
    return rtxPacketsReceived;
  }



  /**
   * Gets the value of the 'rtxPacketsDiscarded' field.
   * @return If rtx packets are received on the same stream then this number indicates how may has been discarded
   */
  public java.lang.Integer getRtxPacketsDiscarded() {
    return rtxPacketsDiscarded;
  }



  /**
   * Gets the value of the 'framesReceived' field.
   * @return The number of frames received on the corresponded RTP stream
   */
  public java.lang.Integer getFramesReceived() {
    return framesReceived;
  }



  /**
   * Gets the value of the 'framesDecoded' field.
   * @return Indicate the number of frames the Sfu has been decoded
   */
  public java.lang.Integer getFramesDecoded() {
    return framesDecoded;
  }



  /**
   * Gets the value of the 'keyFramesDecoded' field.
   * @return Indicate the number of keyframes the Sfu has been decoded
   */
  public java.lang.Integer getKeyFramesDecoded() {
    return keyFramesDecoded;
  }



  /**
   * Gets the value of the 'fractionLost' field.
   * @return The calculated fractionLost of the stream
   */
  public java.lang.Double getFractionLost() {
    return fractionLost;
  }



  /**
   * Gets the value of the 'jitter' field.
   * @return The calculated jitter of the stream
   */
  public java.lang.Double getJitter() {
    return jitter;
  }



  /**
   * Gets the value of the 'roundTripTime' field.
   * @return The calculated RTT of the stream
   */
  public java.lang.Double getRoundTripTime() {
    return roundTripTime;
  }



  /**
   * Gets the value of the 'attachments' field.
   * @return Arbitrary attachments holds relevant information about the stream.
   */
  public java.lang.String getAttachments() {
    return attachments;
  }



  /**
   * Creates a new SfuInboundRtpPadReport RecordBuilder.
   * @return A new SfuInboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.SfuInboundRtpPadReport.Builder newBuilder() {
    return new org.observertc.schemas.SfuInboundRtpPadReport.Builder();
  }

  /**
   * Creates a new SfuInboundRtpPadReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SfuInboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.SfuInboundRtpPadReport.Builder newBuilder(org.observertc.schemas.SfuInboundRtpPadReport.Builder other) {
    if (other == null) {
      return new org.observertc.schemas.SfuInboundRtpPadReport.Builder();
    } else {
      return new org.observertc.schemas.SfuInboundRtpPadReport.Builder(other);
    }
  }

  /**
   * Creates a new SfuInboundRtpPadReport RecordBuilder by copying an existing SfuInboundRtpPadReport instance.
   * @param other The existing instance to copy.
   * @return A new SfuInboundRtpPadReport RecordBuilder
   */
  public static org.observertc.schemas.SfuInboundRtpPadReport.Builder newBuilder(org.observertc.schemas.SfuInboundRtpPadReport other) {
    if (other == null) {
      return new org.observertc.schemas.SfuInboundRtpPadReport.Builder();
    } else {
      return new org.observertc.schemas.SfuInboundRtpPadReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for SfuInboundRtpPadReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SfuInboundRtpPadReport>
    implements org.apache.avro.data.RecordBuilder<SfuInboundRtpPadReport> {

    /** The service id the report belongs to */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The provided unique identifier of the SFU */
    private java.lang.String sfuId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The id of the transport the RTP stream uses. */
    private java.lang.String transportId;
    /** Unique identifier of the Media stream the event is related to */
    private java.lang.String mediaStreamId;
    /** The id of Sfu pad. */
    private java.lang.String padId;
    /** The synchronization source id of the RTP stream */
    private long ssrc;
    /** The id of the track the RTP stream related to at the client side */
    private java.lang.String trackId;
    /** If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to */
    private java.lang.String clientId;
    /** The callId the event belongs to */
    private java.lang.String callId;
    /** the type of the media the stream carries ("audio" or "video") */
    private java.lang.String mediaType;
    /** The payload type field of the RTP header */
    private java.lang.Integer payloadType;
    /** The negotiated mimeType in the SDP */
    private java.lang.String mimeType;
    /** The clock rate of the media source the RTP header carries */
    private java.lang.Long clockRate;
    /** The actual SDP line from the negotiation related to this RTP stream */
    private java.lang.String sdpFmtpLine;
    /**  The rid parameter of the corresponded RTP stream */
    private java.lang.String rid;
    /** If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc.  */
    private java.lang.Long rtxSsrc;
    /** he bitrate the corresponded stream targets. */
    private java.lang.Long targetBitrate;
    /** The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through */
    private java.lang.Boolean voiceActivityFlag;
    /** The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams */
    private java.lang.Integer firCount;
    /** The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams */
    private java.lang.Integer pliCount;
    /** The total number of negative acknowledgement received on the corresponded RTP stream. */
    private java.lang.Integer nackCount;
    /** The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream */
    private java.lang.Integer sliCount;
    /** The total number of packets lost on the corresponded RTP stream. */
    private java.lang.Integer packetsLost;
    /** The total number of packets received on the corresponded RTP stream. */
    private java.lang.Integer packetsReceived;
    /** The total number of discarded packets on the corresponded RTP stream. */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream. */
    private java.lang.Integer packetsRepaired;
    /** The total number of packets failed to be decrypted on the corresponded RTP stream. */
    private java.lang.Integer packetsFailedDecryption;
    /** The total number of duplicated packets appeared on the corresponded RTP stream. */
    private java.lang.Integer packetsDuplicated;
    /** The total number of FEC packets received on the corresponded RTP stream. */
    private java.lang.Integer fecPacketsReceived;
    /** The total number of FEC packets discarded on the corresponded RTP stream. */
    private java.lang.Integer fecPacketsDiscarded;
    /** The total amount of payload bytes received on the corresponded RTP stream. */
    private java.lang.Long bytesReceived;
    /** The total number of SR reports received by the corresponded RTP stream */
    private java.lang.Integer rtcpSrReceived;
    /** The total number of RR reports sent on the corresponded RTP stream */
    private java.lang.Integer rtcpRrSent;
    /** If rtx packets are sent or received on the same stream then this number indicates how may has been sent */
    private java.lang.Integer rtxPacketsReceived;
    /** If rtx packets are received on the same stream then this number indicates how may has been discarded */
    private java.lang.Integer rtxPacketsDiscarded;
    /** The number of frames received on the corresponded RTP stream */
    private java.lang.Integer framesReceived;
    /** Indicate the number of frames the Sfu has been decoded */
    private java.lang.Integer framesDecoded;
    /** Indicate the number of keyframes the Sfu has been decoded */
    private java.lang.Integer keyFramesDecoded;
    /** The calculated fractionLost of the stream */
    private java.lang.Double fractionLost;
    /** The calculated jitter of the stream */
    private java.lang.Double jitter;
    /** The calculated RTT of the stream */
    private java.lang.Double roundTripTime;
    /** Arbitrary attachments holds relevant information about the stream. */
    private java.lang.String attachments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.schemas.SfuInboundRtpPadReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transportId)) {
        this.transportId = data().deepCopy(fields()[5].schema(), other.transportId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.mediaStreamId)) {
        this.mediaStreamId = data().deepCopy(fields()[6].schema(), other.mediaStreamId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.padId)) {
        this.padId = data().deepCopy(fields()[7].schema(), other.padId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[8].schema(), other.ssrc);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.trackId)) {
        this.trackId = data().deepCopy(fields()[9].schema(), other.trackId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.clientId)) {
        this.clientId = data().deepCopy(fields()[10].schema(), other.clientId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.callId)) {
        this.callId = data().deepCopy(fields()[11].schema(), other.callId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[12].schema(), other.mediaType);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[13].schema(), other.payloadType);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[14].schema(), other.mimeType);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[15].schema(), other.clockRate);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[16].schema(), other.sdpFmtpLine);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.rid)) {
        this.rid = data().deepCopy(fields()[17].schema(), other.rid);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.rtxSsrc)) {
        this.rtxSsrc = data().deepCopy(fields()[18].schema(), other.rtxSsrc);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[19].schema(), other.targetBitrate);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[20].schema(), other.voiceActivityFlag);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.firCount)) {
        this.firCount = data().deepCopy(fields()[21].schema(), other.firCount);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[22].schema(), other.pliCount);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[23].schema(), other.nackCount);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[24].schema(), other.sliCount);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[25].schema(), other.packetsLost);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[26].schema(), other.packetsReceived);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[27].schema(), other.packetsDiscarded);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[28].schema(), other.packetsRepaired);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[29].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[30].schema(), other.packetsDuplicated);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[31].schema(), other.fecPacketsReceived);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[32].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[33].schema(), other.bytesReceived);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.rtcpSrReceived)) {
        this.rtcpSrReceived = data().deepCopy(fields()[34].schema(), other.rtcpSrReceived);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.rtcpRrSent)) {
        this.rtcpRrSent = data().deepCopy(fields()[35].schema(), other.rtcpRrSent);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.rtxPacketsReceived)) {
        this.rtxPacketsReceived = data().deepCopy(fields()[36].schema(), other.rtxPacketsReceived);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[37].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[38].schema(), other.framesReceived);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[39].schema(), other.framesDecoded);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[40].schema(), other.keyFramesDecoded);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[41].schema(), other.fractionLost);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.jitter)) {
        this.jitter = data().deepCopy(fields()[42].schema(), other.jitter);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[43].schema(), other.roundTripTime);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.attachments)) {
        this.attachments = data().deepCopy(fields()[44].schema(), other.attachments);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
    }

    /**
     * Creates a Builder by copying an existing SfuInboundRtpPadReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.schemas.SfuInboundRtpPadReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[2].schema(), other.sfuId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transportId)) {
        this.transportId = data().deepCopy(fields()[5].schema(), other.transportId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mediaStreamId)) {
        this.mediaStreamId = data().deepCopy(fields()[6].schema(), other.mediaStreamId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.padId)) {
        this.padId = data().deepCopy(fields()[7].schema(), other.padId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[8].schema(), other.ssrc);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.trackId)) {
        this.trackId = data().deepCopy(fields()[9].schema(), other.trackId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.clientId)) {
        this.clientId = data().deepCopy(fields()[10].schema(), other.clientId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.callId)) {
        this.callId = data().deepCopy(fields()[11].schema(), other.callId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[12].schema(), other.mediaType);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[13].schema(), other.payloadType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[14].schema(), other.mimeType);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[15].schema(), other.clockRate);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[16].schema(), other.sdpFmtpLine);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.rid)) {
        this.rid = data().deepCopy(fields()[17].schema(), other.rid);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.rtxSsrc)) {
        this.rtxSsrc = data().deepCopy(fields()[18].schema(), other.rtxSsrc);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.targetBitrate)) {
        this.targetBitrate = data().deepCopy(fields()[19].schema(), other.targetBitrate);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[20].schema(), other.voiceActivityFlag);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.firCount)) {
        this.firCount = data().deepCopy(fields()[21].schema(), other.firCount);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[22].schema(), other.pliCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[23].schema(), other.nackCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sliCount)) {
        this.sliCount = data().deepCopy(fields()[24].schema(), other.sliCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[25].schema(), other.packetsLost);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[26].schema(), other.packetsReceived);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[27].schema(), other.packetsDiscarded);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[28].schema(), other.packetsRepaired);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[29].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[30].schema(), other.packetsDuplicated);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[31].schema(), other.fecPacketsReceived);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[32].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[33].schema(), other.bytesReceived);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.rtcpSrReceived)) {
        this.rtcpSrReceived = data().deepCopy(fields()[34].schema(), other.rtcpSrReceived);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.rtcpRrSent)) {
        this.rtcpRrSent = data().deepCopy(fields()[35].schema(), other.rtcpRrSent);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.rtxPacketsReceived)) {
        this.rtxPacketsReceived = data().deepCopy(fields()[36].schema(), other.rtxPacketsReceived);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.rtxPacketsDiscarded)) {
        this.rtxPacketsDiscarded = data().deepCopy(fields()[37].schema(), other.rtxPacketsDiscarded);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.framesReceived)) {
        this.framesReceived = data().deepCopy(fields()[38].schema(), other.framesReceived);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[39].schema(), other.framesDecoded);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[40].schema(), other.keyFramesDecoded);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.fractionLost)) {
        this.fractionLost = data().deepCopy(fields()[41].schema(), other.fractionLost);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.jitter)) {
        this.jitter = data().deepCopy(fields()[42].schema(), other.jitter);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.roundTripTime)) {
        this.roundTripTime = data().deepCopy(fields()[43].schema(), other.roundTripTime);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.attachments)) {
        this.attachments = data().deepCopy(fields()[44].schema(), other.attachments);
        fieldSetFlags()[44] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The service id the report belongs to
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }


    /**
      * Sets the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[2], value);
      this.sfuId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The provided unique identifier of the SFU
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The provided unique identifier of the SFU
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }


    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setMarker(java.lang.String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }


    /**
      * Sets the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setTransportId(java.lang.String value) {
      validate(fields()[5], value);
      this.transportId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * The id of the transport the RTP stream uses.
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transportId' field.
      * The id of the transport the RTP stream uses.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaStreamId' field.
      * Unique identifier of the Media stream the event is related to
      * @return The value.
      */
    public java.lang.String getMediaStreamId() {
      return mediaStreamId;
    }


    /**
      * Sets the value of the 'mediaStreamId' field.
      * Unique identifier of the Media stream the event is related to
      * @param value The value of 'mediaStreamId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setMediaStreamId(java.lang.String value) {
      validate(fields()[6], value);
      this.mediaStreamId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaStreamId' field has been set.
      * Unique identifier of the Media stream the event is related to
      * @return True if the 'mediaStreamId' field has been set, false otherwise.
      */
    public boolean hasMediaStreamId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'mediaStreamId' field.
      * Unique identifier of the Media stream the event is related to
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearMediaStreamId() {
      mediaStreamId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'padId' field.
      * The id of Sfu pad.
      * @return The value.
      */
    public java.lang.String getPadId() {
      return padId;
    }


    /**
      * Sets the value of the 'padId' field.
      * The id of Sfu pad.
      * @param value The value of 'padId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPadId(java.lang.String value) {
      validate(fields()[7], value);
      this.padId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'padId' field has been set.
      * The id of Sfu pad.
      * @return True if the 'padId' field has been set, false otherwise.
      */
    public boolean hasPadId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'padId' field.
      * The id of Sfu pad.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPadId() {
      padId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @return The value.
      */
    public long getSsrc() {
      return ssrc;
    }


    /**
      * Sets the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setSsrc(long value) {
      validate(fields()[8], value);
      this.ssrc = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The synchronization source id of the RTP stream
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The synchronization source id of the RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearSsrc() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[9], value);
      this.trackId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track the RTP stream related to at the client side
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track the RTP stream related to at the client side
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setClientId(java.lang.String value) {
      validate(fields()[10], value);
      this.clientId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'clientId' field.
      * If the track id was provided by the Sfu, the observer can fill up the information of which client it belongs to
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The callId the event belongs to
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }


    /**
      * Sets the value of the 'callId' field.
      * The callId the event belongs to
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setCallId(java.lang.String value) {
      validate(fields()[11], value);
      this.callId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The callId the event belongs to
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'callId' field.
      * The callId the event belongs to
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @return The value.
      */
    public java.lang.String getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setMediaType(java.lang.String value) {
      validate(fields()[12], value);
      this.mediaType = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * the type of the media the stream carries ("audio" or "video")
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * the type of the media the stream carries ("audio" or "video")
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }


    /**
      * Sets the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[13], value);
      this.payloadType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The payload type field of the RTP header
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The payload type field of the RTP header
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }


    /**
      * Sets the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[14], value);
      this.mimeType = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * The negotiated mimeType in the SDP
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * The negotiated mimeType in the SDP
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }


    /**
      * Sets the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[15], value);
      this.clockRate = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The clock rate of the media source the RTP header carries
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The clock rate of the media source the RTP header carries
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }


    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[16], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The actual SDP line from the negotiation related to this RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @return The value.
      */
    public java.lang.String getRid() {
      return rid;
    }


    /**
      * Sets the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @param value The value of 'rid'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRid(java.lang.String value) {
      validate(fields()[17], value);
      this.rid = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'rid' field has been set.
      *  The rid parameter of the corresponded RTP stream
      * @return True if the 'rid' field has been set, false otherwise.
      */
    public boolean hasRid() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'rid' field.
      *  The rid parameter of the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRid() {
      rid = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return The value.
      */
    public java.lang.Long getRtxSsrc() {
      return rtxSsrc;
    }


    /**
      * Sets the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @param value The value of 'rtxSsrc'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRtxSsrc(java.lang.Long value) {
      validate(fields()[18], value);
      this.rtxSsrc = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxSsrc' field has been set.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return True if the 'rtxSsrc' field has been set, false otherwise.
      */
    public boolean hasRtxSsrc() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'rtxSsrc' field.
      * If RTX is negotiated as a separate stream, this is the SSRC of the RTX stream that is associated with this stream's ssrc. 
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRtxSsrc() {
      rtxSsrc = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @return The value.
      */
    public java.lang.Long getTargetBitrate() {
      return targetBitrate;
    }


    /**
      * Sets the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @param value The value of 'targetBitrate'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setTargetBitrate(java.lang.Long value) {
      validate(fields()[19], value);
      this.targetBitrate = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'targetBitrate' field has been set.
      * he bitrate the corresponded stream targets.
      * @return True if the 'targetBitrate' field has been set, false otherwise.
      */
    public boolean hasTargetBitrate() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'targetBitrate' field.
      * he bitrate the corresponded stream targets.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearTargetBitrate() {
      targetBitrate = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return The value.
      */
    public java.lang.Boolean getVoiceActivityFlag() {
      return voiceActivityFlag;
    }


    /**
      * Sets the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @param value The value of 'voiceActivityFlag'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setVoiceActivityFlag(java.lang.Boolean value) {
      validate(fields()[20], value);
      this.voiceActivityFlag = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'voiceActivityFlag' field has been set.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return True if the 'voiceActivityFlag' field has been set, false otherwise.
      */
    public boolean hasVoiceActivityFlag() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'voiceActivityFlag' field.
      * The RTP header V flag indicate of the activity of the media source by the media codec if the RTP transport ships it through
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearVoiceActivityFlag() {
      voiceActivityFlag = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }


    /**
      * Sets the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[21], value);
      this.firCount = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'firCount' field.
      * The total number FIR packets sent from this endpoint to the source on the corresponded RTP stream. Only for Video streams
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }


    /**
      * Sets the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[22], value);
      this.pliCount = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * The total number of Picture Loss Indication sent on the corresponded RTP stream. Only for Video streams
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }


    /**
      * Sets the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[23], value);
      this.nackCount = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * The total number of negative acknowledgement received on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return The value.
      */
    public java.lang.Integer getSliCount() {
      return sliCount;
    }


    /**
      * Sets the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @param value The value of 'sliCount'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setSliCount(java.lang.Integer value) {
      validate(fields()[24], value);
      this.sliCount = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'sliCount' field has been set.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return True if the 'sliCount' field has been set, false otherwise.
      */
    public boolean hasSliCount() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'sliCount' field.
      * The total number of SLI indicator sent from the endpoint on the corresponded RTP stream. Only for Audio stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearSliCount() {
      sliCount = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }


    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[25], value);
      this.packetsLost = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of packets lost on the corresponded RTP stream.
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of packets lost on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }


    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded RTP stream.
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[26], value);
      this.packetsReceived = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded RTP stream.
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }


    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[27], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of discarded packets on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsRepaired() {
      return packetsRepaired;
    }


    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsRepaired(java.lang.Integer value) {
      validate(fields()[28], value);
      this.packetsRepaired = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either retransmission or FEC on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsFailedDecryption' field.
      * The total number of packets failed to be decrypted on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsFailedDecryption() {
      return packetsFailedDecryption;
    }


    /**
      * Sets the value of the 'packetsFailedDecryption' field.
      * The total number of packets failed to be decrypted on the corresponded RTP stream.
      * @param value The value of 'packetsFailedDecryption'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsFailedDecryption(java.lang.Integer value) {
      validate(fields()[29], value);
      this.packetsFailedDecryption = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsFailedDecryption' field has been set.
      * The total number of packets failed to be decrypted on the corresponded RTP stream.
      * @return True if the 'packetsFailedDecryption' field has been set, false otherwise.
      */
    public boolean hasPacketsFailedDecryption() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'packetsFailedDecryption' field.
      * The total number of packets failed to be decrypted on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsFailedDecryption() {
      packetsFailedDecryption = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getPacketsDuplicated() {
      return packetsDuplicated;
    }


    /**
      * Sets the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @param value The value of 'packetsDuplicated'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setPacketsDuplicated(java.lang.Integer value) {
      validate(fields()[30], value);
      this.packetsDuplicated = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDuplicated' field has been set.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return True if the 'packetsDuplicated' field has been set, false otherwise.
      */
    public boolean hasPacketsDuplicated() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'packetsDuplicated' field.
      * The total number of duplicated packets appeared on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearPacketsDuplicated() {
      packetsDuplicated = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsReceived' field.
      * The total number of FEC packets received on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsReceived() {
      return fecPacketsReceived;
    }


    /**
      * Sets the value of the 'fecPacketsReceived' field.
      * The total number of FEC packets received on the corresponded RTP stream.
      * @param value The value of 'fecPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFecPacketsReceived(java.lang.Integer value) {
      validate(fields()[31], value);
      this.fecPacketsReceived = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsReceived' field has been set.
      * The total number of FEC packets received on the corresponded RTP stream.
      * @return True if the 'fecPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasFecPacketsReceived() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'fecPacketsReceived' field.
      * The total number of FEC packets received on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFecPacketsReceived() {
      fecPacketsReceived = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }


    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFecPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[32], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * The total number of FEC packets discarded on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * The total amount of payload bytes received on the corresponded RTP stream.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }


    /**
      * Sets the value of the 'bytesReceived' field.
      * The total amount of payload bytes received on the corresponded RTP stream.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[33], value);
      this.bytesReceived = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * The total amount of payload bytes received on the corresponded RTP stream.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * The total amount of payload bytes received on the corresponded RTP stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtcpSrReceived' field.
      * The total number of SR reports received by the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getRtcpSrReceived() {
      return rtcpSrReceived;
    }


    /**
      * Sets the value of the 'rtcpSrReceived' field.
      * The total number of SR reports received by the corresponded RTP stream
      * @param value The value of 'rtcpSrReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRtcpSrReceived(java.lang.Integer value) {
      validate(fields()[34], value);
      this.rtcpSrReceived = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'rtcpSrReceived' field has been set.
      * The total number of SR reports received by the corresponded RTP stream
      * @return True if the 'rtcpSrReceived' field has been set, false otherwise.
      */
    public boolean hasRtcpSrReceived() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'rtcpSrReceived' field.
      * The total number of SR reports received by the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRtcpSrReceived() {
      rtcpSrReceived = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtcpRrSent' field.
      * The total number of RR reports sent on the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getRtcpRrSent() {
      return rtcpRrSent;
    }


    /**
      * Sets the value of the 'rtcpRrSent' field.
      * The total number of RR reports sent on the corresponded RTP stream
      * @param value The value of 'rtcpRrSent'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRtcpRrSent(java.lang.Integer value) {
      validate(fields()[35], value);
      this.rtcpRrSent = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'rtcpRrSent' field has been set.
      * The total number of RR reports sent on the corresponded RTP stream
      * @return True if the 'rtcpRrSent' field has been set, false otherwise.
      */
    public boolean hasRtcpRrSent() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'rtcpRrSent' field.
      * The total number of RR reports sent on the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRtcpRrSent() {
      rtcpRrSent = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsReceived' field.
      * If rtx packets are sent or received on the same stream then this number indicates how may has been sent
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsReceived() {
      return rtxPacketsReceived;
    }


    /**
      * Sets the value of the 'rtxPacketsReceived' field.
      * If rtx packets are sent or received on the same stream then this number indicates how may has been sent
      * @param value The value of 'rtxPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRtxPacketsReceived(java.lang.Integer value) {
      validate(fields()[36], value);
      this.rtxPacketsReceived = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsReceived' field has been set.
      * If rtx packets are sent or received on the same stream then this number indicates how may has been sent
      * @return True if the 'rtxPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsReceived() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'rtxPacketsReceived' field.
      * If rtx packets are sent or received on the same stream then this number indicates how may has been sent
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRtxPacketsReceived() {
      rtxPacketsReceived = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return The value.
      */
    public java.lang.Integer getRtxPacketsDiscarded() {
      return rtxPacketsDiscarded;
    }


    /**
      * Sets the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @param value The value of 'rtxPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRtxPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[37], value);
      this.rtxPacketsDiscarded = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'rtxPacketsDiscarded' field has been set.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return True if the 'rtxPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasRtxPacketsDiscarded() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'rtxPacketsDiscarded' field.
      * If rtx packets are received on the same stream then this number indicates how may has been discarded
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRtxPacketsDiscarded() {
      rtxPacketsDiscarded = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesReceived' field.
      * The number of frames received on the corresponded RTP stream
      * @return The value.
      */
    public java.lang.Integer getFramesReceived() {
      return framesReceived;
    }


    /**
      * Sets the value of the 'framesReceived' field.
      * The number of frames received on the corresponded RTP stream
      * @param value The value of 'framesReceived'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFramesReceived(java.lang.Integer value) {
      validate(fields()[38], value);
      this.framesReceived = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'framesReceived' field has been set.
      * The number of frames received on the corresponded RTP stream
      * @return True if the 'framesReceived' field has been set, false otherwise.
      */
    public boolean hasFramesReceived() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'framesReceived' field.
      * The number of frames received on the corresponded RTP stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFramesReceived() {
      framesReceived = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * Indicate the number of frames the Sfu has been decoded
      * @return The value.
      */
    public java.lang.Integer getFramesDecoded() {
      return framesDecoded;
    }


    /**
      * Sets the value of the 'framesDecoded' field.
      * Indicate the number of frames the Sfu has been decoded
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFramesDecoded(java.lang.Integer value) {
      validate(fields()[39], value);
      this.framesDecoded = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * Indicate the number of frames the Sfu has been decoded
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * Indicate the number of frames the Sfu has been decoded
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes the Sfu has been decoded
      * @return The value.
      */
    public java.lang.Integer getKeyFramesDecoded() {
      return keyFramesDecoded;
    }


    /**
      * Sets the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes the Sfu has been decoded
      * @param value The value of 'keyFramesDecoded'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setKeyFramesDecoded(java.lang.Integer value) {
      validate(fields()[40], value);
      this.keyFramesDecoded = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesDecoded' field has been set.
      * Indicate the number of keyframes the Sfu has been decoded
      * @return True if the 'keyFramesDecoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesDecoded() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'keyFramesDecoded' field.
      * Indicate the number of keyframes the Sfu has been decoded
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearKeyFramesDecoded() {
      keyFramesDecoded = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'fractionLost' field.
      * The calculated fractionLost of the stream
      * @return The value.
      */
    public java.lang.Double getFractionLost() {
      return fractionLost;
    }


    /**
      * Sets the value of the 'fractionLost' field.
      * The calculated fractionLost of the stream
      * @param value The value of 'fractionLost'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setFractionLost(java.lang.Double value) {
      validate(fields()[41], value);
      this.fractionLost = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'fractionLost' field has been set.
      * The calculated fractionLost of the stream
      * @return True if the 'fractionLost' field has been set, false otherwise.
      */
    public boolean hasFractionLost() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'fractionLost' field.
      * The calculated fractionLost of the stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearFractionLost() {
      fractionLost = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The calculated jitter of the stream
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }


    /**
      * Sets the value of the 'jitter' field.
      * The calculated jitter of the stream
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setJitter(java.lang.Double value) {
      validate(fields()[42], value);
      this.jitter = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The calculated jitter of the stream
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The calculated jitter of the stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'roundTripTime' field.
      * The calculated RTT of the stream
      * @return The value.
      */
    public java.lang.Double getRoundTripTime() {
      return roundTripTime;
    }


    /**
      * Sets the value of the 'roundTripTime' field.
      * The calculated RTT of the stream
      * @param value The value of 'roundTripTime'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setRoundTripTime(java.lang.Double value) {
      validate(fields()[43], value);
      this.roundTripTime = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'roundTripTime' field has been set.
      * The calculated RTT of the stream
      * @return True if the 'roundTripTime' field has been set, false otherwise.
      */
    public boolean hasRoundTripTime() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'roundTripTime' field.
      * The calculated RTT of the stream
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearRoundTripTime() {
      roundTripTime = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'attachments' field.
      * Arbitrary attachments holds relevant information about the stream.
      * @return The value.
      */
    public java.lang.String getAttachments() {
      return attachments;
    }


    /**
      * Sets the value of the 'attachments' field.
      * Arbitrary attachments holds relevant information about the stream.
      * @param value The value of 'attachments'.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder setAttachments(java.lang.String value) {
      validate(fields()[44], value);
      this.attachments = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'attachments' field has been set.
      * Arbitrary attachments holds relevant information about the stream.
      * @return True if the 'attachments' field has been set, false otherwise.
      */
    public boolean hasAttachments() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'attachments' field.
      * Arbitrary attachments holds relevant information about the stream.
      * @return This builder.
      */
    public org.observertc.schemas.SfuInboundRtpPadReport.Builder clearAttachments() {
      attachments = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SfuInboundRtpPadReport build() {
      try {
        SfuInboundRtpPadReport record = new SfuInboundRtpPadReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.sfuId = fieldSetFlags()[2] ? this.sfuId : (java.lang.String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (java.lang.String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.transportId = fieldSetFlags()[5] ? this.transportId : (java.lang.String) defaultValue(fields()[5]);
        record.mediaStreamId = fieldSetFlags()[6] ? this.mediaStreamId : (java.lang.String) defaultValue(fields()[6]);
        record.padId = fieldSetFlags()[7] ? this.padId : (java.lang.String) defaultValue(fields()[7]);
        record.ssrc = fieldSetFlags()[8] ? this.ssrc : (java.lang.Long) defaultValue(fields()[8]);
        record.trackId = fieldSetFlags()[9] ? this.trackId : (java.lang.String) defaultValue(fields()[9]);
        record.clientId = fieldSetFlags()[10] ? this.clientId : (java.lang.String) defaultValue(fields()[10]);
        record.callId = fieldSetFlags()[11] ? this.callId : (java.lang.String) defaultValue(fields()[11]);
        record.mediaType = fieldSetFlags()[12] ? this.mediaType : (java.lang.String) defaultValue(fields()[12]);
        record.payloadType = fieldSetFlags()[13] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[13]);
        record.mimeType = fieldSetFlags()[14] ? this.mimeType : (java.lang.String) defaultValue(fields()[14]);
        record.clockRate = fieldSetFlags()[15] ? this.clockRate : (java.lang.Long) defaultValue(fields()[15]);
        record.sdpFmtpLine = fieldSetFlags()[16] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[16]);
        record.rid = fieldSetFlags()[17] ? this.rid : (java.lang.String) defaultValue(fields()[17]);
        record.rtxSsrc = fieldSetFlags()[18] ? this.rtxSsrc : (java.lang.Long) defaultValue(fields()[18]);
        record.targetBitrate = fieldSetFlags()[19] ? this.targetBitrate : (java.lang.Long) defaultValue(fields()[19]);
        record.voiceActivityFlag = fieldSetFlags()[20] ? this.voiceActivityFlag : (java.lang.Boolean) defaultValue(fields()[20]);
        record.firCount = fieldSetFlags()[21] ? this.firCount : (java.lang.Integer) defaultValue(fields()[21]);
        record.pliCount = fieldSetFlags()[22] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[22]);
        record.nackCount = fieldSetFlags()[23] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[23]);
        record.sliCount = fieldSetFlags()[24] ? this.sliCount : (java.lang.Integer) defaultValue(fields()[24]);
        record.packetsLost = fieldSetFlags()[25] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[25]);
        record.packetsReceived = fieldSetFlags()[26] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[26]);
        record.packetsDiscarded = fieldSetFlags()[27] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[27]);
        record.packetsRepaired = fieldSetFlags()[28] ? this.packetsRepaired : (java.lang.Integer) defaultValue(fields()[28]);
        record.packetsFailedDecryption = fieldSetFlags()[29] ? this.packetsFailedDecryption : (java.lang.Integer) defaultValue(fields()[29]);
        record.packetsDuplicated = fieldSetFlags()[30] ? this.packetsDuplicated : (java.lang.Integer) defaultValue(fields()[30]);
        record.fecPacketsReceived = fieldSetFlags()[31] ? this.fecPacketsReceived : (java.lang.Integer) defaultValue(fields()[31]);
        record.fecPacketsDiscarded = fieldSetFlags()[32] ? this.fecPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[32]);
        record.bytesReceived = fieldSetFlags()[33] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[33]);
        record.rtcpSrReceived = fieldSetFlags()[34] ? this.rtcpSrReceived : (java.lang.Integer) defaultValue(fields()[34]);
        record.rtcpRrSent = fieldSetFlags()[35] ? this.rtcpRrSent : (java.lang.Integer) defaultValue(fields()[35]);
        record.rtxPacketsReceived = fieldSetFlags()[36] ? this.rtxPacketsReceived : (java.lang.Integer) defaultValue(fields()[36]);
        record.rtxPacketsDiscarded = fieldSetFlags()[37] ? this.rtxPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[37]);
        record.framesReceived = fieldSetFlags()[38] ? this.framesReceived : (java.lang.Integer) defaultValue(fields()[38]);
        record.framesDecoded = fieldSetFlags()[39] ? this.framesDecoded : (java.lang.Integer) defaultValue(fields()[39]);
        record.keyFramesDecoded = fieldSetFlags()[40] ? this.keyFramesDecoded : (java.lang.Integer) defaultValue(fields()[40]);
        record.fractionLost = fieldSetFlags()[41] ? this.fractionLost : (java.lang.Double) defaultValue(fields()[41]);
        record.jitter = fieldSetFlags()[42] ? this.jitter : (java.lang.Double) defaultValue(fields()[42]);
        record.roundTripTime = fieldSetFlags()[43] ? this.roundTripTime : (java.lang.Double) defaultValue(fields()[43]);
        record.attachments = fieldSetFlags()[44] ? this.attachments : (java.lang.String) defaultValue(fields()[44]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SfuInboundRtpPadReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<SfuInboundRtpPadReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SfuInboundRtpPadReport>
    READER$ = (org.apache.avro.io.DatumReader<SfuInboundRtpPadReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.serviceId);

    out.writeString(this.mediaUnitId);

    out.writeString(this.sfuId);

    if (this.marker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marker);
    }

    out.writeLong(this.timestamp);

    out.writeString(this.transportId);

    out.writeString(this.mediaStreamId);

    out.writeString(this.padId);

    out.writeLong(this.ssrc);

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

    if (this.clientId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.clientId);
    }

    if (this.callId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callId);
    }

    if (this.mediaType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaType);
    }

    if (this.payloadType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.payloadType);
    }

    if (this.mimeType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mimeType);
    }

    if (this.clockRate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.clockRate);
    }

    if (this.sdpFmtpLine == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sdpFmtpLine);
    }

    if (this.rid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.rid);
    }

    if (this.rtxSsrc == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.rtxSsrc);
    }

    if (this.targetBitrate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.targetBitrate);
    }

    if (this.voiceActivityFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.voiceActivityFlag);
    }

    if (this.firCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.firCount);
    }

    if (this.pliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pliCount);
    }

    if (this.nackCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nackCount);
    }

    if (this.sliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sliCount);
    }

    if (this.packetsLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsLost);
    }

    if (this.packetsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsReceived);
    }

    if (this.packetsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDiscarded);
    }

    if (this.packetsRepaired == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsRepaired);
    }

    if (this.packetsFailedDecryption == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsFailedDecryption);
    }

    if (this.packetsDuplicated == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsDuplicated);
    }

    if (this.fecPacketsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsReceived);
    }

    if (this.fecPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsDiscarded);
    }

    if (this.bytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesReceived);
    }

    if (this.rtcpSrReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtcpSrReceived);
    }

    if (this.rtcpRrSent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtcpRrSent);
    }

    if (this.rtxPacketsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtxPacketsReceived);
    }

    if (this.rtxPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rtxPacketsDiscarded);
    }

    if (this.framesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesReceived);
    }

    if (this.framesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDecoded);
    }

    if (this.keyFramesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.keyFramesDecoded);
    }

    if (this.fractionLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.fractionLost);
    }

    if (this.jitter == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.jitter);
    }

    if (this.roundTripTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.roundTripTime);
    }

    if (this.attachments == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.attachments);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.serviceId = in.readString();

      this.mediaUnitId = in.readString();

      this.sfuId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.marker = null;
      } else {
        this.marker = in.readString();
      }

      this.timestamp = in.readLong();

      this.transportId = in.readString();

      this.mediaStreamId = in.readString();

      this.padId = in.readString();

      this.ssrc = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clientId = null;
      } else {
        this.clientId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callId = null;
      } else {
        this.callId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaType = null;
      } else {
        this.mediaType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payloadType = null;
      } else {
        this.payloadType = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mimeType = null;
      } else {
        this.mimeType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clockRate = null;
      } else {
        this.clockRate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sdpFmtpLine = null;
      } else {
        this.sdpFmtpLine = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rid = null;
      } else {
        this.rid = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxSsrc = null;
      } else {
        this.rtxSsrc = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.targetBitrate = null;
      } else {
        this.targetBitrate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.voiceActivityFlag = null;
      } else {
        this.voiceActivityFlag = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firCount = null;
      } else {
        this.firCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pliCount = null;
      } else {
        this.pliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nackCount = null;
      } else {
        this.nackCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sliCount = null;
      } else {
        this.sliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsLost = null;
      } else {
        this.packetsLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsReceived = null;
      } else {
        this.packetsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDiscarded = null;
      } else {
        this.packetsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsRepaired = null;
      } else {
        this.packetsRepaired = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsFailedDecryption = null;
      } else {
        this.packetsFailedDecryption = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsDuplicated = null;
      } else {
        this.packetsDuplicated = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsReceived = null;
      } else {
        this.fecPacketsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsDiscarded = null;
      } else {
        this.fecPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesReceived = null;
      } else {
        this.bytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtcpSrReceived = null;
      } else {
        this.rtcpSrReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtcpRrSent = null;
      } else {
        this.rtcpRrSent = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxPacketsReceived = null;
      } else {
        this.rtxPacketsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rtxPacketsDiscarded = null;
      } else {
        this.rtxPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesReceived = null;
      } else {
        this.framesReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDecoded = null;
      } else {
        this.framesDecoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyFramesDecoded = null;
      } else {
        this.keyFramesDecoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fractionLost = null;
      } else {
        this.fractionLost = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitter = null;
      } else {
        this.jitter = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.roundTripTime = null;
      } else {
        this.roundTripTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.attachments = null;
      } else {
        this.attachments = in.readString();
      }

    } else {
      for (int i = 0; i < 45; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.serviceId = in.readString();
          break;

        case 1:
          this.mediaUnitId = in.readString();
          break;

        case 2:
          this.sfuId = in.readString();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marker = null;
          } else {
            this.marker = in.readString();
          }
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          this.transportId = in.readString();
          break;

        case 6:
          this.mediaStreamId = in.readString();
          break;

        case 7:
          this.padId = in.readString();
          break;

        case 8:
          this.ssrc = in.readLong();
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clientId = null;
          } else {
            this.clientId = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callId = null;
          } else {
            this.callId = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaType = null;
          } else {
            this.mediaType = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payloadType = null;
          } else {
            this.payloadType = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mimeType = null;
          } else {
            this.mimeType = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clockRate = null;
          } else {
            this.clockRate = in.readLong();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sdpFmtpLine = null;
          } else {
            this.sdpFmtpLine = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rid = null;
          } else {
            this.rid = in.readString();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxSsrc = null;
          } else {
            this.rtxSsrc = in.readLong();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.targetBitrate = null;
          } else {
            this.targetBitrate = in.readLong();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.voiceActivityFlag = null;
          } else {
            this.voiceActivityFlag = in.readBoolean();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firCount = null;
          } else {
            this.firCount = in.readInt();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pliCount = null;
          } else {
            this.pliCount = in.readInt();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nackCount = null;
          } else {
            this.nackCount = in.readInt();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sliCount = null;
          } else {
            this.sliCount = in.readInt();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsLost = null;
          } else {
            this.packetsLost = in.readInt();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsReceived = null;
          } else {
            this.packetsReceived = in.readInt();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDiscarded = null;
          } else {
            this.packetsDiscarded = in.readInt();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsRepaired = null;
          } else {
            this.packetsRepaired = in.readInt();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsFailedDecryption = null;
          } else {
            this.packetsFailedDecryption = in.readInt();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsDuplicated = null;
          } else {
            this.packetsDuplicated = in.readInt();
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsReceived = null;
          } else {
            this.fecPacketsReceived = in.readInt();
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsDiscarded = null;
          } else {
            this.fecPacketsDiscarded = in.readInt();
          }
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesReceived = null;
          } else {
            this.bytesReceived = in.readLong();
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtcpSrReceived = null;
          } else {
            this.rtcpSrReceived = in.readInt();
          }
          break;

        case 35:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtcpRrSent = null;
          } else {
            this.rtcpRrSent = in.readInt();
          }
          break;

        case 36:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxPacketsReceived = null;
          } else {
            this.rtxPacketsReceived = in.readInt();
          }
          break;

        case 37:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rtxPacketsDiscarded = null;
          } else {
            this.rtxPacketsDiscarded = in.readInt();
          }
          break;

        case 38:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesReceived = null;
          } else {
            this.framesReceived = in.readInt();
          }
          break;

        case 39:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDecoded = null;
          } else {
            this.framesDecoded = in.readInt();
          }
          break;

        case 40:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyFramesDecoded = null;
          } else {
            this.keyFramesDecoded = in.readInt();
          }
          break;

        case 41:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fractionLost = null;
          } else {
            this.fractionLost = in.readDouble();
          }
          break;

        case 42:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitter = null;
          } else {
            this.jitter = in.readDouble();
          }
          break;

        case 43:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roundTripTime = null;
          } else {
            this.roundTripTime = in.readDouble();
          }
          break;

        case 44:
          if (in.readIndex() != 1) {
            in.readNull();
            this.attachments = null;
          } else {
            this.attachments = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










