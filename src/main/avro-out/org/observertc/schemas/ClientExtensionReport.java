/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A Report created for Extended provided arbitrary data. */
@org.apache.avro.specific.AvroGenerated
public class ClientExtensionReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6400369469229078132L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientExtensionReport\",\"namespace\":\"org.observertc.schemas\",\"doc\":\"A Report created for Extended provided arbitrary data.\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"serviceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The resolved service name configured for the service Id\",\"default\":null},{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The media unit id the report belongs to\",\"default\":null},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the call\",\"default\":null},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the client\",\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The unique identifier of the peer connection\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":[\"null\",\"int\"],\"doc\":\"The sequence number of the sample the event may related to\",\"default\":null},{\"name\":\"extensionType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the event\"},{\"name\":\"payload\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the human readable message of the event\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClientExtensionReport> ENCODER =
      new BinaryMessageEncoder<ClientExtensionReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClientExtensionReport> DECODER =
      new BinaryMessageDecoder<ClientExtensionReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClientExtensionReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClientExtensionReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClientExtensionReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClientExtensionReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClientExtensionReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClientExtensionReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClientExtensionReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClientExtensionReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the service */
  private java.lang.String serviceId;
  /** The resolved service name configured for the service Id */
  private java.lang.String serviceName;
  /** The media unit id the report belongs to */
  private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
  private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
  private long timestamp;
  /** The generated unique identifier of the call */
  private java.lang.String callId;
  /** webrtc app provided room id */
  private java.lang.String roomId;
  /** The generated unique identifier of the client */
  private java.lang.String clientId;
  /** webrtc app provided user identifier */
  private java.lang.String userId;
  /** The unique identifier of the peer connection */
  private java.lang.String peerConnectionId;
  /** The sequence number of the sample the event may related to */
  private java.lang.Integer sampleSeq;
  /** The name of the event */
  private java.lang.String extensionType;
  /** the human readable message of the event */
  private java.lang.String payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientExtensionReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param serviceName The resolved service name configured for the service Id
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param sampleSeq The sequence number of the sample the event may related to
   * @param extensionType The name of the event
   * @param payload the human readable message of the event
   */
  public ClientExtensionReport(java.lang.String serviceId, java.lang.String serviceName, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.Integer sampleSeq, java.lang.String extensionType, java.lang.String payload) {
    this.serviceId = serviceId;
    this.serviceName = serviceName;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.sampleSeq = sampleSeq;
    this.extensionType = extensionType;
    this.payload = payload;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return serviceName;
    case 2: return mediaUnitId;
    case 3: return marker;
    case 4: return timestamp;
    case 5: return callId;
    case 6: return roomId;
    case 7: return clientId;
    case 8: return userId;
    case 9: return peerConnectionId;
    case 10: return sampleSeq;
    case 11: return extensionType;
    case 12: return payload;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = value$ != null ? value$.toString() : null; break;
    case 1: serviceName = value$ != null ? value$.toString() : null; break;
    case 2: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 3: marker = value$ != null ? value$.toString() : null; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: callId = value$ != null ? value$.toString() : null; break;
    case 6: roomId = value$ != null ? value$.toString() : null; break;
    case 7: clientId = value$ != null ? value$.toString() : null; break;
    case 8: userId = value$ != null ? value$.toString() : null; break;
    case 9: peerConnectionId = value$ != null ? value$.toString() : null; break;
    case 10: sampleSeq = (java.lang.Integer)value$; break;
    case 11: extensionType = value$ != null ? value$.toString() : null; break;
    case 12: payload = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }



  /**
   * Gets the value of the 'serviceName' field.
   * @return The resolved service name configured for the service Id
   */
  public java.lang.String getServiceName() {
    return serviceName;
  }



  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }



  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public long getTimestamp() {
    return timestamp;
  }



  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }



  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }



  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }



  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the event may related to
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }



  /**
   * Gets the value of the 'extensionType' field.
   * @return The name of the event
   */
  public java.lang.String getExtensionType() {
    return extensionType;
  }



  /**
   * Gets the value of the 'payload' field.
   * @return the human readable message of the event
   */
  public java.lang.String getPayload() {
    return payload;
  }



  /**
   * Creates a new ClientExtensionReport RecordBuilder.
   * @return A new ClientExtensionReport RecordBuilder
   */
  public static org.observertc.schemas.ClientExtensionReport.Builder newBuilder() {
    return new org.observertc.schemas.ClientExtensionReport.Builder();
  }

  /**
   * Creates a new ClientExtensionReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientExtensionReport RecordBuilder
   */
  public static org.observertc.schemas.ClientExtensionReport.Builder newBuilder(org.observertc.schemas.ClientExtensionReport.Builder other) {
    if (other == null) {
      return new org.observertc.schemas.ClientExtensionReport.Builder();
    } else {
      return new org.observertc.schemas.ClientExtensionReport.Builder(other);
    }
  }

  /**
   * Creates a new ClientExtensionReport RecordBuilder by copying an existing ClientExtensionReport instance.
   * @param other The existing instance to copy.
   * @return A new ClientExtensionReport RecordBuilder
   */
  public static org.observertc.schemas.ClientExtensionReport.Builder newBuilder(org.observertc.schemas.ClientExtensionReport other) {
    if (other == null) {
      return new org.observertc.schemas.ClientExtensionReport.Builder();
    } else {
      return new org.observertc.schemas.ClientExtensionReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClientExtensionReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientExtensionReport>
    implements org.apache.avro.data.RecordBuilder<ClientExtensionReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The resolved service name configured for the service Id */
    private java.lang.String serviceName;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The sequence number of the sample the event may related to */
    private java.lang.Integer sampleSeq;
    /** The name of the event */
    private java.lang.String extensionType;
    /** the human readable message of the event */
    private java.lang.String payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.schemas.ClientExtensionReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.extensionType)) {
        this.extensionType = data().deepCopy(fields()[11].schema(), other.extensionType);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.payload)) {
        this.payload = data().deepCopy(fields()[12].schema(), other.payload);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing ClientExtensionReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.schemas.ClientExtensionReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[2].schema(), other.mediaUnitId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marker)) {
        this.marker = data().deepCopy(fields()[3].schema(), other.marker);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.roomId)) {
        this.roomId = data().deepCopy(fields()[6].schema(), other.roomId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clientId)) {
        this.clientId = data().deepCopy(fields()[7].schema(), other.clientId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userId)) {
        this.userId = data().deepCopy(fields()[8].schema(), other.userId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[9].schema(), other.peerConnectionId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[10].schema(), other.sampleSeq);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.extensionType)) {
        this.extensionType = data().deepCopy(fields()[11].schema(), other.extensionType);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.payload)) {
        this.payload = data().deepCopy(fields()[12].schema(), other.payload);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return The value.
      */
    public java.lang.String getServiceName() {
      return serviceName;
    }


    /**
      * Sets the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setServiceName(java.lang.String value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * The resolved service name configured for the service Id
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * The resolved service name configured for the service Id
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[2], value);
      this.mediaUnitId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }


    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setMarker(java.lang.String value) {
      validate(fields()[3], value);
      this.marker = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }


    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setCallId(java.lang.String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[6], value);
      this.roomId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setClientId(java.lang.String value) {
      validate(fields()[7], value);
      this.clientId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setUserId(java.lang.String value) {
      validate(fields()[8], value);
      this.userId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }


    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[9], value);
      this.peerConnectionId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }


    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setSampleSeq(java.lang.Integer value) {
      validate(fields()[10], value);
      this.sampleSeq = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the event may related to
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the event may related to
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearSampleSeq() {
      sampleSeq = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'extensionType' field.
      * The name of the event
      * @return The value.
      */
    public java.lang.String getExtensionType() {
      return extensionType;
    }


    /**
      * Sets the value of the 'extensionType' field.
      * The name of the event
      * @param value The value of 'extensionType'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setExtensionType(java.lang.String value) {
      validate(fields()[11], value);
      this.extensionType = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'extensionType' field has been set.
      * The name of the event
      * @return True if the 'extensionType' field has been set, false otherwise.
      */
    public boolean hasExtensionType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'extensionType' field.
      * The name of the event
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearExtensionType() {
      extensionType = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * the human readable message of the event
      * @return The value.
      */
    public java.lang.String getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * the human readable message of the event
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder setPayload(java.lang.String value) {
      validate(fields()[12], value);
      this.payload = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * the human readable message of the event
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'payload' field.
      * the human readable message of the event
      * @return This builder.
      */
    public org.observertc.schemas.ClientExtensionReport.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClientExtensionReport build() {
      try {
        ClientExtensionReport record = new ClientExtensionReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (java.lang.String) defaultValue(fields()[1]);
        record.mediaUnitId = fieldSetFlags()[2] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[2]);
        record.marker = fieldSetFlags()[3] ? this.marker : (java.lang.String) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (java.lang.String) defaultValue(fields()[5]);
        record.roomId = fieldSetFlags()[6] ? this.roomId : (java.lang.String) defaultValue(fields()[6]);
        record.clientId = fieldSetFlags()[7] ? this.clientId : (java.lang.String) defaultValue(fields()[7]);
        record.userId = fieldSetFlags()[8] ? this.userId : (java.lang.String) defaultValue(fields()[8]);
        record.peerConnectionId = fieldSetFlags()[9] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[9]);
        record.sampleSeq = fieldSetFlags()[10] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[10]);
        record.extensionType = fieldSetFlags()[11] ? this.extensionType : (java.lang.String) defaultValue(fields()[11]);
        record.payload = fieldSetFlags()[12] ? this.payload : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClientExtensionReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClientExtensionReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClientExtensionReport>
    READER$ = (org.apache.avro.io.DatumReader<ClientExtensionReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.serviceId);

    if (this.serviceName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.serviceName);
    }

    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.marker == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marker);
    }

    out.writeLong(this.timestamp);

    if (this.callId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callId);
    }

    if (this.roomId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.roomId);
    }

    if (this.clientId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.clientId);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.peerConnectionId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.peerConnectionId);
    }

    if (this.sampleSeq == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sampleSeq);
    }

    out.writeString(this.extensionType);

    if (this.payload == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.payload);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.serviceId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.serviceName = null;
      } else {
        this.serviceName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marker = null;
      } else {
        this.marker = in.readString();
      }

      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.callId = null;
      } else {
        this.callId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.roomId = null;
      } else {
        this.roomId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.clientId = null;
      } else {
        this.clientId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.peerConnectionId = null;
      } else {
        this.peerConnectionId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sampleSeq = null;
      } else {
        this.sampleSeq = in.readInt();
      }

      this.extensionType = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.payload = null;
      } else {
        this.payload = in.readString();
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.serviceId = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.serviceName = null;
          } else {
            this.serviceName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marker = null;
          } else {
            this.marker = in.readString();
          }
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callId = null;
          } else {
            this.callId = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.roomId = null;
          } else {
            this.roomId = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.clientId = null;
          } else {
            this.clientId = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.peerConnectionId = null;
          } else {
            this.peerConnectionId = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sampleSeq = null;
          } else {
            this.sampleSeq = in.readInt();
          }
          break;

        case 11:
          this.extensionType = in.readString();
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payload = null;
          } else {
            this.payload = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










