/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Report created for Inbound Audio Tracks. A combination of Codec metadata carrying inbound and remote outbound RTP stats measurements */
@org.apache.avro.specific.AvroGenerated
public class InboundAudioTrackReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1660337936353140062L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InboundAudioTrackReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"A Report created for Inbound Audio Tracks. A combination of Codec metadata carrying inbound and remote outbound RTP stats measurements\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the service\"},{\"name\":\"mediaUnitId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The media unit id the report belongs to\"},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"callId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the call\"},{\"name\":\"roomId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided room id\",\"default\":null},{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The generated unique identifier of the client\"},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"webrtc app provided user identifier\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the peer connection\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided label the peer connection is labeled with\",\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the track\",\"default\":null},{\"name\":\"remoteUserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it\",\"default\":null},{\"name\":\"remoteClientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The observer matched remote client Id\",\"default\":null},{\"name\":\"remotePeerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The observer matched remote Peer Connection Id\",\"default\":null},{\"name\":\"sampleSeq\",\"type\":\"int\",\"doc\":\"The sequence number of the sample the report is generated from\"},{\"name\":\"ssrc\",\"type\":\"long\",\"doc\":\"The RTP SSRC field\"},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets received on the corresponded synchronization source\",\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of bytes received on the corresponded synchronization source\",\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"doc\":\"The corresponded synchronization source reported jitter\",\"default\":null},{\"name\":\"packetsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets missed the playout point and therefore discarded by the jitterbuffer\",\"default\":null},{\"name\":\"packetsRepaired\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source\",\"default\":null},{\"name\":\"burstPacketsLost\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets lost in burst (RFC6958)\",\"default\":null},{\"name\":\"burstPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of packets discarded in burst (RFC6958)\",\"default\":null},{\"name\":\"burstLossCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsLost on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"burstDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapLossRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"gapDiscardRate\",\"type\":[\"null\",\"double\"],\"doc\":\"The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source\",\"default\":null},{\"name\":\"voiceActivityFlag\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header\",\"default\":null},{\"name\":\"lastPacketReceivedTimestamp\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"averageRtcpInterval\",\"type\":[\"null\",\"double\"],\"doc\":\"The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"headerBytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsReceived\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"doc\":\"Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsFailedDecryption\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.\",\"default\":null},{\"name\":\"packetsDuplicated\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).\",\"default\":null},{\"name\":\"perDscpPacketsReceived\",\"type\":[\"null\",\"double\"],\"doc\":\"The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)\",\"default\":null},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"doc\":\"Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"totalProcessingDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded\",\"default\":null},{\"name\":\"estimatedPlayoutTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"The estimated playout time of the corresponded synchronization source\",\"default\":null},{\"name\":\"jitterBufferDelay\",\"type\":[\"null\",\"double\"],\"doc\":\"The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.\",\"default\":null},{\"name\":\"jitterBufferEmittedCount\",\"type\":[\"null\",\"int\"],\"doc\":\"The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)\",\"default\":null},{\"name\":\"decoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Indicate the name of the decoder implementation library\",\"default\":null},{\"name\":\"packetsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"bytesSent\",\"type\":[\"null\",\"long\"],\"","doc\":\"Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source\",\"default\":null},{\"name\":\"remoteTimestamp\",\"type\":[\"null\",\"double\"],\"doc\":\"The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)\",\"default\":null},{\"name\":\"reportsSent\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to\",\"default\":null},{\"name\":\"ended\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Flag represents if the receiver ended the media stream track or not.\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",\"int\"],\"doc\":\"The type of the payload the RTP packet SSRC belongs to\",\"default\":null},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the MIME type of the codec (e.g.: video/vp8)\",\"default\":null},{\"name\":\"clockRate\",\"type\":[\"null\",\"long\"],\"doc\":\"The negotiated clock rate the RTP timestamp is generated of\",\"default\":null},{\"name\":\"channels\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)\",\"default\":null},{\"name\":\"sdpFmtpLine\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The a=fmtp line in the SDP corresponding to the codec\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier of the service */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the call */
   private java.lang.String callId;
  /** webrtc app provided room id */
   private java.lang.String roomId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** webrtc app provided user identifier */
   private java.lang.String userId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The webrtc app provided label the peer connection is labeled with */
   private java.lang.String label;
  /** The id of the track */
   private java.lang.String trackId;
  /** The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
   private java.lang.String remoteUserId;
  /** The observer matched remote client Id */
   private java.lang.String remoteClientId;
  /** The observer matched remote Peer Connection Id */
   private java.lang.String remotePeerConnectionId;
  /** The sequence number of the sample the report is generated from */
   private int sampleSeq;
  /** The RTP SSRC field */
   private long ssrc;
  /** The total number of packets received on the corresponded synchronization source */
   private java.lang.Integer packetsReceived;
  /** The total number of bytes received on the corresponded synchronization source */
   private java.lang.Integer packetsLost;
  /** The corresponded synchronization source reported jitter */
   private java.lang.Double jitter;
  /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
   private java.lang.Integer packetsDiscarded;
  /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
   private java.lang.Integer packetsRepaired;
  /** The total number of packets lost in burst (RFC6958) */
   private java.lang.Integer burstPacketsLost;
  /** The total number of packets discarded in burst (RFC6958) */
   private java.lang.Integer burstPacketsDiscarded;
  /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
   private java.lang.Integer burstLossCount;
  /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
   private java.lang.Integer burstDiscardCount;
  /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstLossRate;
  /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double burstDiscardRate;
  /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapLossRate;
  /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
   private java.lang.Double gapDiscardRate;
  /** Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header */
   private java.lang.Boolean voiceActivityFlag;
  /** Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
   private java.lang.Boolean lastPacketReceivedTimestamp;
  /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
   private java.lang.Double averageRtcpInterval;
  /** Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
   private java.lang.Long headerBytesReceived;
  /** Total number of FEC packets received over the corresponding synchronization source (ssrc) */
   private java.lang.Integer fecPacketsReceived;
  /** Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Integer fecPacketsDiscarded;
  /** Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Long bytesReceived;
  /** Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
   private java.lang.Integer packetsFailedDecryption;
  /** Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
   private java.lang.Integer packetsDuplicated;
  /** The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
   private java.lang.Double perDscpPacketsReceived;
  /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
   private java.lang.Integer nackCount;
  /** The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
   private java.lang.Double totalProcessingDelay;
  /** The estimated playout time of the corresponded synchronization source */
   private java.lang.Double estimatedPlayoutTimestamp;
  /** The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
   private java.lang.Double jitterBufferDelay;
  /** The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
   private java.lang.Integer jitterBufferEmittedCount;
  /** Indicate the name of the decoder implementation library */
   private java.lang.String decoderImplementation;
  /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
   private java.lang.Integer packetsSent;
  /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
   private java.lang.Long bytesSent;
  /** The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
   private java.lang.Double remoteTimestamp;
  /** The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
   private java.lang.Integer reportsSent;
  /** Flag represents if the receiver ended the media stream track or not. */
   private java.lang.Boolean ended;
  /** The type of the payload the RTP packet SSRC belongs to */
   private java.lang.Integer payloadType;
  /** the MIME type of the codec (e.g.: video/vp8) */
   private java.lang.String mimeType;
  /** The negotiated clock rate the RTP timestamp is generated of */
   private java.lang.Long clockRate;
  /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
   private java.lang.Integer channels;
  /** The a=fmtp line in the SDP corresponding to the codec */
   private java.lang.String sdpFmtpLine;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InboundAudioTrackReport() {}

  /**
   * All-args constructor.
   * @param serviceId The unique identifier of the service
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param callId The generated unique identifier of the call
   * @param roomId webrtc app provided room id
   * @param clientId The generated unique identifier of the client
   * @param userId webrtc app provided user identifier
   * @param peerConnectionId The unique identifier of the peer connection
   * @param label The webrtc app provided label the peer connection is labeled with
   * @param trackId The id of the track
   * @param remoteUserId The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   * @param remoteClientId The observer matched remote client Id
   * @param remotePeerConnectionId The observer matched remote Peer Connection Id
   * @param sampleSeq The sequence number of the sample the report is generated from
   * @param ssrc The RTP SSRC field
   * @param packetsReceived The total number of packets received on the corresponded synchronization source
   * @param packetsLost The total number of bytes received on the corresponded synchronization source
   * @param jitter The corresponded synchronization source reported jitter
   * @param packetsDiscarded The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   * @param packetsRepaired The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   * @param burstPacketsLost The total number of packets lost in burst (RFC6958)
   * @param burstPacketsDiscarded The total number of packets discarded in burst (RFC6958)
   * @param burstLossCount The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   * @param burstDiscardCount The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   * @param burstLossRate The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param burstDiscardRate The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapLossRate The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param gapDiscardRate The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   * @param voiceActivityFlag Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
   * @param lastPacketReceivedTimestamp Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   * @param averageRtcpInterval The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   * @param headerBytesReceived Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   * @param fecPacketsReceived Total number of FEC packets received over the corresponding synchronization source (ssrc)
   * @param fecPacketsDiscarded Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param bytesReceived Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsFailedDecryption Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   * @param packetsDuplicated Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   * @param perDscpPacketsReceived The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   * @param nackCount Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   * @param totalProcessingDelay The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   * @param estimatedPlayoutTimestamp The estimated playout time of the corresponded synchronization source
   * @param jitterBufferDelay The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   * @param jitterBufferEmittedCount The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   * @param decoderImplementation Indicate the name of the decoder implementation library
   * @param packetsSent Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   * @param bytesSent Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   * @param remoteTimestamp The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   * @param reportsSent The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   * @param ended Flag represents if the receiver ended the media stream track or not.
   * @param payloadType The type of the payload the RTP packet SSRC belongs to
   * @param mimeType the MIME type of the codec (e.g.: video/vp8)
   * @param clockRate The negotiated clock rate the RTP timestamp is generated of
   * @param channels The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   * @param sdpFmtpLine The a=fmtp line in the SDP corresponding to the codec
   */
  public InboundAudioTrackReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String callId, java.lang.String roomId, java.lang.String clientId, java.lang.String userId, java.lang.String peerConnectionId, java.lang.String label, java.lang.String trackId, java.lang.String remoteUserId, java.lang.String remoteClientId, java.lang.String remotePeerConnectionId, java.lang.Integer sampleSeq, java.lang.Long ssrc, java.lang.Integer packetsReceived, java.lang.Integer packetsLost, java.lang.Double jitter, java.lang.Integer packetsDiscarded, java.lang.Integer packetsRepaired, java.lang.Integer burstPacketsLost, java.lang.Integer burstPacketsDiscarded, java.lang.Integer burstLossCount, java.lang.Integer burstDiscardCount, java.lang.Double burstLossRate, java.lang.Double burstDiscardRate, java.lang.Double gapLossRate, java.lang.Double gapDiscardRate, java.lang.Boolean voiceActivityFlag, java.lang.Boolean lastPacketReceivedTimestamp, java.lang.Double averageRtcpInterval, java.lang.Long headerBytesReceived, java.lang.Integer fecPacketsReceived, java.lang.Integer fecPacketsDiscarded, java.lang.Long bytesReceived, java.lang.Integer packetsFailedDecryption, java.lang.Integer packetsDuplicated, java.lang.Double perDscpPacketsReceived, java.lang.Integer nackCount, java.lang.Double totalProcessingDelay, java.lang.Double estimatedPlayoutTimestamp, java.lang.Double jitterBufferDelay, java.lang.Integer jitterBufferEmittedCount, java.lang.String decoderImplementation, java.lang.Integer packetsSent, java.lang.Long bytesSent, java.lang.Double remoteTimestamp, java.lang.Integer reportsSent, java.lang.Boolean ended, java.lang.Integer payloadType, java.lang.String mimeType, java.lang.Long clockRate, java.lang.Integer channels, java.lang.String sdpFmtpLine) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.callId = callId;
    this.roomId = roomId;
    this.clientId = clientId;
    this.userId = userId;
    this.peerConnectionId = peerConnectionId;
    this.label = label;
    this.trackId = trackId;
    this.remoteUserId = remoteUserId;
    this.remoteClientId = remoteClientId;
    this.remotePeerConnectionId = remotePeerConnectionId;
    this.sampleSeq = sampleSeq;
    this.ssrc = ssrc;
    this.packetsReceived = packetsReceived;
    this.packetsLost = packetsLost;
    this.jitter = jitter;
    this.packetsDiscarded = packetsDiscarded;
    this.packetsRepaired = packetsRepaired;
    this.burstPacketsLost = burstPacketsLost;
    this.burstPacketsDiscarded = burstPacketsDiscarded;
    this.burstLossCount = burstLossCount;
    this.burstDiscardCount = burstDiscardCount;
    this.burstLossRate = burstLossRate;
    this.burstDiscardRate = burstDiscardRate;
    this.gapLossRate = gapLossRate;
    this.gapDiscardRate = gapDiscardRate;
    this.voiceActivityFlag = voiceActivityFlag;
    this.lastPacketReceivedTimestamp = lastPacketReceivedTimestamp;
    this.averageRtcpInterval = averageRtcpInterval;
    this.headerBytesReceived = headerBytesReceived;
    this.fecPacketsReceived = fecPacketsReceived;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.bytesReceived = bytesReceived;
    this.packetsFailedDecryption = packetsFailedDecryption;
    this.packetsDuplicated = packetsDuplicated;
    this.perDscpPacketsReceived = perDscpPacketsReceived;
    this.nackCount = nackCount;
    this.totalProcessingDelay = totalProcessingDelay;
    this.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;
    this.jitterBufferDelay = jitterBufferDelay;
    this.jitterBufferEmittedCount = jitterBufferEmittedCount;
    this.decoderImplementation = decoderImplementation;
    this.packetsSent = packetsSent;
    this.bytesSent = bytesSent;
    this.remoteTimestamp = remoteTimestamp;
    this.reportsSent = reportsSent;
    this.ended = ended;
    this.payloadType = payloadType;
    this.mimeType = mimeType;
    this.clockRate = clockRate;
    this.channels = channels;
    this.sdpFmtpLine = sdpFmtpLine;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return callId;
    case 5: return roomId;
    case 6: return clientId;
    case 7: return userId;
    case 8: return peerConnectionId;
    case 9: return label;
    case 10: return trackId;
    case 11: return remoteUserId;
    case 12: return remoteClientId;
    case 13: return remotePeerConnectionId;
    case 14: return sampleSeq;
    case 15: return ssrc;
    case 16: return packetsReceived;
    case 17: return packetsLost;
    case 18: return jitter;
    case 19: return packetsDiscarded;
    case 20: return packetsRepaired;
    case 21: return burstPacketsLost;
    case 22: return burstPacketsDiscarded;
    case 23: return burstLossCount;
    case 24: return burstDiscardCount;
    case 25: return burstLossRate;
    case 26: return burstDiscardRate;
    case 27: return gapLossRate;
    case 28: return gapDiscardRate;
    case 29: return voiceActivityFlag;
    case 30: return lastPacketReceivedTimestamp;
    case 31: return averageRtcpInterval;
    case 32: return headerBytesReceived;
    case 33: return fecPacketsReceived;
    case 34: return fecPacketsDiscarded;
    case 35: return bytesReceived;
    case 36: return packetsFailedDecryption;
    case 37: return packetsDuplicated;
    case 38: return perDscpPacketsReceived;
    case 39: return nackCount;
    case 40: return totalProcessingDelay;
    case 41: return estimatedPlayoutTimestamp;
    case 42: return jitterBufferDelay;
    case 43: return jitterBufferEmittedCount;
    case 44: return decoderImplementation;
    case 45: return packetsSent;
    case 46: return bytesSent;
    case 47: return remoteTimestamp;
    case 48: return reportsSent;
    case 49: return ended;
    case 50: return payloadType;
    case 51: return mimeType;
    case 52: return clockRate;
    case 53: return channels;
    case 54: return sdpFmtpLine;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: callId = (java.lang.String)value$; break;
    case 5: roomId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: userId = (java.lang.String)value$; break;
    case 8: peerConnectionId = (java.lang.String)value$; break;
    case 9: label = (java.lang.String)value$; break;
    case 10: trackId = (java.lang.String)value$; break;
    case 11: remoteUserId = (java.lang.String)value$; break;
    case 12: remoteClientId = (java.lang.String)value$; break;
    case 13: remotePeerConnectionId = (java.lang.String)value$; break;
    case 14: sampleSeq = (java.lang.Integer)value$; break;
    case 15: ssrc = (java.lang.Long)value$; break;
    case 16: packetsReceived = (java.lang.Integer)value$; break;
    case 17: packetsLost = (java.lang.Integer)value$; break;
    case 18: jitter = (java.lang.Double)value$; break;
    case 19: packetsDiscarded = (java.lang.Integer)value$; break;
    case 20: packetsRepaired = (java.lang.Integer)value$; break;
    case 21: burstPacketsLost = (java.lang.Integer)value$; break;
    case 22: burstPacketsDiscarded = (java.lang.Integer)value$; break;
    case 23: burstLossCount = (java.lang.Integer)value$; break;
    case 24: burstDiscardCount = (java.lang.Integer)value$; break;
    case 25: burstLossRate = (java.lang.Double)value$; break;
    case 26: burstDiscardRate = (java.lang.Double)value$; break;
    case 27: gapLossRate = (java.lang.Double)value$; break;
    case 28: gapDiscardRate = (java.lang.Double)value$; break;
    case 29: voiceActivityFlag = (java.lang.Boolean)value$; break;
    case 30: lastPacketReceivedTimestamp = (java.lang.Boolean)value$; break;
    case 31: averageRtcpInterval = (java.lang.Double)value$; break;
    case 32: headerBytesReceived = (java.lang.Long)value$; break;
    case 33: fecPacketsReceived = (java.lang.Integer)value$; break;
    case 34: fecPacketsDiscarded = (java.lang.Integer)value$; break;
    case 35: bytesReceived = (java.lang.Long)value$; break;
    case 36: packetsFailedDecryption = (java.lang.Integer)value$; break;
    case 37: packetsDuplicated = (java.lang.Integer)value$; break;
    case 38: perDscpPacketsReceived = (java.lang.Double)value$; break;
    case 39: nackCount = (java.lang.Integer)value$; break;
    case 40: totalProcessingDelay = (java.lang.Double)value$; break;
    case 41: estimatedPlayoutTimestamp = (java.lang.Double)value$; break;
    case 42: jitterBufferDelay = (java.lang.Double)value$; break;
    case 43: jitterBufferEmittedCount = (java.lang.Integer)value$; break;
    case 44: decoderImplementation = (java.lang.String)value$; break;
    case 45: packetsSent = (java.lang.Integer)value$; break;
    case 46: bytesSent = (java.lang.Long)value$; break;
    case 47: remoteTimestamp = (java.lang.Double)value$; break;
    case 48: reportsSent = (java.lang.Integer)value$; break;
    case 49: ended = (java.lang.Boolean)value$; break;
    case 50: payloadType = (java.lang.Integer)value$; break;
    case 51: mimeType = (java.lang.String)value$; break;
    case 52: clockRate = (java.lang.Long)value$; break;
    case 53: channels = (java.lang.Integer)value$; break;
    case 54: sdpFmtpLine = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The unique identifier of the service
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The generated unique identifier of the call
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'roomId' field.
   * @return webrtc app provided room id
   */
  public java.lang.String getRoomId() {
    return roomId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'userId' field.
   * @return webrtc app provided user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'label' field.
   * @return The webrtc app provided label the peer connection is labeled with
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Gets the value of the 'trackId' field.
   * @return The id of the track
   */
  public java.lang.String getTrackId() {
    return trackId;
  }


  /**
   * Gets the value of the 'remoteUserId' field.
   * @return The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
   */
  public java.lang.String getRemoteUserId() {
    return remoteUserId;
  }


  /**
   * Gets the value of the 'remoteClientId' field.
   * @return The observer matched remote client Id
   */
  public java.lang.String getRemoteClientId() {
    return remoteClientId;
  }


  /**
   * Gets the value of the 'remotePeerConnectionId' field.
   * @return The observer matched remote Peer Connection Id
   */
  public java.lang.String getRemotePeerConnectionId() {
    return remotePeerConnectionId;
  }


  /**
   * Gets the value of the 'sampleSeq' field.
   * @return The sequence number of the sample the report is generated from
   */
  public java.lang.Integer getSampleSeq() {
    return sampleSeq;
  }


  /**
   * Gets the value of the 'ssrc' field.
   * @return The RTP SSRC field
   */
  public java.lang.Long getSsrc() {
    return ssrc;
  }


  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The total number of packets received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }


  /**
   * Gets the value of the 'packetsLost' field.
   * @return The total number of bytes received on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }


  /**
   * Gets the value of the 'jitter' field.
   * @return The corresponded synchronization source reported jitter
   */
  public java.lang.Double getJitter() {
    return jitter;
  }


  /**
   * Gets the value of the 'packetsDiscarded' field.
   * @return The total number of packets missed the playout point and therefore discarded by the jitterbuffer
   */
  public java.lang.Integer getPacketsDiscarded() {
    return packetsDiscarded;
  }


  /**
   * Gets the value of the 'packetsRepaired' field.
   * @return The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
   */
  public java.lang.Integer getPacketsRepaired() {
    return packetsRepaired;
  }


  /**
   * Gets the value of the 'burstPacketsLost' field.
   * @return The total number of packets lost in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsLost() {
    return burstPacketsLost;
  }


  /**
   * Gets the value of the 'burstPacketsDiscarded' field.
   * @return The total number of packets discarded in burst (RFC6958)
   */
  public java.lang.Integer getBurstPacketsDiscarded() {
    return burstPacketsDiscarded;
  }


  /**
   * Gets the value of the 'burstLossCount' field.
   * @return The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
   */
  public java.lang.Integer getBurstLossCount() {
    return burstLossCount;
  }


  /**
   * Gets the value of the 'burstDiscardCount' field.
   * @return The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
   */
  public java.lang.Integer getBurstDiscardCount() {
    return burstDiscardCount;
  }


  /**
   * Gets the value of the 'burstLossRate' field.
   * @return The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstLossRate() {
    return burstLossRate;
  }


  /**
   * Gets the value of the 'burstDiscardRate' field.
   * @return The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getBurstDiscardRate() {
    return burstDiscardRate;
  }


  /**
   * Gets the value of the 'gapLossRate' field.
   * @return The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapLossRate() {
    return gapLossRate;
  }


  /**
   * Gets the value of the 'gapDiscardRate' field.
   * @return The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
   */
  public java.lang.Double getGapDiscardRate() {
    return gapDiscardRate;
  }


  /**
   * Gets the value of the 'voiceActivityFlag' field.
   * @return Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
   */
  public java.lang.Boolean getVoiceActivityFlag() {
    return voiceActivityFlag;
  }


  /**
   * Gets the value of the 'lastPacketReceivedTimestamp' field.
   * @return Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
   */
  public java.lang.Boolean getLastPacketReceivedTimestamp() {
    return lastPacketReceivedTimestamp;
  }


  /**
   * Gets the value of the 'averageRtcpInterval' field.
   * @return The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getAverageRtcpInterval() {
    return averageRtcpInterval;
  }


  /**
   * Gets the value of the 'headerBytesReceived' field.
   * @return Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Long getHeaderBytesReceived() {
    return headerBytesReceived;
  }


  /**
   * Gets the value of the 'fecPacketsReceived' field.
   * @return Total number of FEC packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Integer getFecPacketsReceived() {
    return fecPacketsReceived;
  }


  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }


  /**
   * Gets the value of the 'bytesReceived' field.
   * @return Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }


  /**
   * Gets the value of the 'packetsFailedDecryption' field.
   * @return Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
   */
  public java.lang.Integer getPacketsFailedDecryption() {
    return packetsFailedDecryption;
  }


  /**
   * Gets the value of the 'packetsDuplicated' field.
   * @return Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
   */
  public java.lang.Integer getPacketsDuplicated() {
    return packetsDuplicated;
  }


  /**
   * Gets the value of the 'perDscpPacketsReceived' field.
   * @return The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
   */
  public java.lang.Double getPerDscpPacketsReceived() {
    return perDscpPacketsReceived;
  }


  /**
   * Gets the value of the 'nackCount' field.
   * @return Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }


  /**
   * Gets the value of the 'totalProcessingDelay' field.
   * @return The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
   */
  public java.lang.Double getTotalProcessingDelay() {
    return totalProcessingDelay;
  }


  /**
   * Gets the value of the 'estimatedPlayoutTimestamp' field.
   * @return The estimated playout time of the corresponded synchronization source
   */
  public java.lang.Double getEstimatedPlayoutTimestamp() {
    return estimatedPlayoutTimestamp;
  }


  /**
   * Gets the value of the 'jitterBufferDelay' field.
   * @return The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
   */
  public java.lang.Double getJitterBufferDelay() {
    return jitterBufferDelay;
  }


  /**
   * Gets the value of the 'jitterBufferEmittedCount' field.
   * @return The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
   */
  public java.lang.Integer getJitterBufferEmittedCount() {
    return jitterBufferEmittedCount;
  }


  /**
   * Gets the value of the 'decoderImplementation' field.
   * @return Indicate the name of the decoder implementation library
   */
  public java.lang.String getDecoderImplementation() {
    return decoderImplementation;
  }


  /**
   * Gets the value of the 'packetsSent' field.
   * @return Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
   */
  public java.lang.Integer getPacketsSent() {
    return packetsSent;
  }


  /**
   * Gets the value of the 'bytesSent' field.
   * @return Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
   */
  public java.lang.Long getBytesSent() {
    return bytesSent;
  }


  /**
   * Gets the value of the 'remoteTimestamp' field.
   * @return The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
   */
  public java.lang.Double getRemoteTimestamp() {
    return remoteTimestamp;
  }


  /**
   * Gets the value of the 'reportsSent' field.
   * @return The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
   */
  public java.lang.Integer getReportsSent() {
    return reportsSent;
  }


  /**
   * Gets the value of the 'ended' field.
   * @return Flag represents if the receiver ended the media stream track or not.
   */
  public java.lang.Boolean getEnded() {
    return ended;
  }


  /**
   * Gets the value of the 'payloadType' field.
   * @return The type of the payload the RTP packet SSRC belongs to
   */
  public java.lang.Integer getPayloadType() {
    return payloadType;
  }


  /**
   * Gets the value of the 'mimeType' field.
   * @return the MIME type of the codec (e.g.: video/vp8)
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }


  /**
   * Gets the value of the 'clockRate' field.
   * @return The negotiated clock rate the RTP timestamp is generated of
   */
  public java.lang.Long getClockRate() {
    return clockRate;
  }


  /**
   * Gets the value of the 'channels' field.
   * @return The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
   */
  public java.lang.Integer getChannels() {
    return channels;
  }


  /**
   * Gets the value of the 'sdpFmtpLine' field.
   * @return The a=fmtp line in the SDP corresponding to the codec
   */
  public java.lang.String getSdpFmtpLine() {
    return sdpFmtpLine;
  }


  /**
   * Creates a new InboundAudioTrackReport RecordBuilder.
   * @return A new InboundAudioTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder();
  }

  /**
   * Creates a new InboundAudioTrackReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InboundAudioTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder other) {
    return new org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder(other);
  }

  /**
   * Creates a new InboundAudioTrackReport RecordBuilder by copying an existing InboundAudioTrackReport instance.
   * @param other The existing instance to copy.
   * @return A new InboundAudioTrackReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.InboundAudioTrackReport other) {
    return new org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder(other);
  }

  /**
   * RecordBuilder for InboundAudioTrackReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InboundAudioTrackReport>
    implements org.apache.avro.data.RecordBuilder<InboundAudioTrackReport> {

    /** The unique identifier of the service */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the call */
    private java.lang.String callId;
    /** webrtc app provided room id */
    private java.lang.String roomId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** webrtc app provided user identifier */
    private java.lang.String userId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The webrtc app provided label the peer connection is labeled with */
    private java.lang.String label;
    /** The id of the track */
    private java.lang.String trackId;
    /** The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it */
    private java.lang.String remoteUserId;
    /** The observer matched remote client Id */
    private java.lang.String remoteClientId;
    /** The observer matched remote Peer Connection Id */
    private java.lang.String remotePeerConnectionId;
    /** The sequence number of the sample the report is generated from */
    private int sampleSeq;
    /** The RTP SSRC field */
    private long ssrc;
    /** The total number of packets received on the corresponded synchronization source */
    private java.lang.Integer packetsReceived;
    /** The total number of bytes received on the corresponded synchronization source */
    private java.lang.Integer packetsLost;
    /** The corresponded synchronization source reported jitter */
    private java.lang.Double jitter;
    /** The total number of packets missed the playout point and therefore discarded by the jitterbuffer */
    private java.lang.Integer packetsDiscarded;
    /** The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source */
    private java.lang.Integer packetsRepaired;
    /** The total number of packets lost in burst (RFC6958) */
    private java.lang.Integer burstPacketsLost;
    /** The total number of packets discarded in burst (RFC6958) */
    private java.lang.Integer burstPacketsDiscarded;
    /** The total number of burst happened causes burstPacketsLost on the corresponding synchronization source */
    private java.lang.Integer burstLossCount;
    /** The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source */
    private java.lang.Integer burstDiscardCount;
    /** The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstLossRate;
    /** The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double burstDiscardRate;
    /** The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapLossRate;
    /** The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source */
    private java.lang.Double gapDiscardRate;
    /** Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header */
    private java.lang.Boolean voiceActivityFlag;
    /** Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc) */
    private java.lang.Boolean lastPacketReceivedTimestamp;
    /** The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc) */
    private java.lang.Double averageRtcpInterval;
    /** Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc) */
    private java.lang.Long headerBytesReceived;
    /** Total number of FEC packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Integer fecPacketsReceived;
    /** Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Integer fecPacketsDiscarded;
    /** Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Long bytesReceived;
    /** Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired. */
    private java.lang.Integer packetsFailedDecryption;
    /** Total number of packets identified as duplicated over the corresponding synchronization source (ssrc). */
    private java.lang.Integer packetsDuplicated;
    /** The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc) */
    private java.lang.Double perDscpPacketsReceived;
    /** Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc) */
    private java.lang.Integer nackCount;
    /** The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded */
    private java.lang.Double totalProcessingDelay;
    /** The estimated playout time of the corresponded synchronization source */
    private java.lang.Double estimatedPlayoutTimestamp;
    /** The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity. */
    private java.lang.Double jitterBufferDelay;
    /** The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc) */
    private java.lang.Integer jitterBufferEmittedCount;
    /** Indicate the name of the decoder implementation library */
    private java.lang.String decoderImplementation;
    /** Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source */
    private java.lang.Integer packetsSent;
    /** Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source */
    private java.lang.Long bytesSent;
    /** The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc) */
    private java.lang.Double remoteTimestamp;
    /** The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to */
    private java.lang.Integer reportsSent;
    /** Flag represents if the receiver ended the media stream track or not. */
    private java.lang.Boolean ended;
    /** The type of the payload the RTP packet SSRC belongs to */
    private java.lang.Integer payloadType;
    /** the MIME type of the codec (e.g.: video/vp8) */
    private java.lang.String mimeType;
    /** The negotiated clock rate the RTP timestamp is generated of */
    private java.lang.Long clockRate;
    /** The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null) */
    private java.lang.Integer channels;
    /** The a=fmtp line in the SDP corresponding to the codec */
    private java.lang.String sdpFmtpLine;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[11].schema(), other.remoteUserId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[12].schema(), other.remoteClientId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[13].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[14].schema(), other.sampleSeq);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[15].schema(), other.ssrc);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[16].schema(), other.packetsReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[17].schema(), other.packetsLost);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.jitter)) {
        this.jitter = data().deepCopy(fields()[18].schema(), other.jitter);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[19].schema(), other.packetsDiscarded);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[20].schema(), other.packetsRepaired);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[21].schema(), other.burstPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[22].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[23].schema(), other.burstLossCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[24].schema(), other.burstDiscardCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[25].schema(), other.burstLossRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[26].schema(), other.burstDiscardRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[27].schema(), other.gapLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[28].schema(), other.gapDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[29].schema(), other.voiceActivityFlag);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[30].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[31].schema(), other.averageRtcpInterval);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[32].schema(), other.headerBytesReceived);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[33].schema(), other.fecPacketsReceived);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[34].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[35].schema(), other.bytesReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[36].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[37].schema(), other.packetsDuplicated);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[38].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[39].schema(), other.nackCount);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[40].schema(), other.totalProcessingDelay);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[41].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[42].schema(), other.jitterBufferDelay);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[43].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[44].schema(), other.decoderImplementation);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[45].schema(), other.packetsSent);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[46].schema(), other.bytesSent);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[47].schema(), other.remoteTimestamp);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[48].schema(), other.reportsSent);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.ended)) {
        this.ended = data().deepCopy(fields()[49].schema(), other.ended);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[50].schema(), other.payloadType);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[51].schema(), other.mimeType);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[52].schema(), other.clockRate);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.channels)) {
        this.channels = data().deepCopy(fields()[53].schema(), other.channels);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[54].schema(), other.sdpFmtpLine);
        fieldSetFlags()[54] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InboundAudioTrackReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.InboundAudioTrackReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.callId)) {
        this.callId = data().deepCopy(fields()[4].schema(), other.callId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.roomId)) {
        this.roomId = data().deepCopy(fields()[5].schema(), other.roomId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userId)) {
        this.userId = data().deepCopy(fields()[7].schema(), other.userId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[8].schema(), other.peerConnectionId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trackId)) {
        this.trackId = data().deepCopy(fields()[10].schema(), other.trackId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remoteUserId)) {
        this.remoteUserId = data().deepCopy(fields()[11].schema(), other.remoteUserId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.remoteClientId)) {
        this.remoteClientId = data().deepCopy(fields()[12].schema(), other.remoteClientId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.remotePeerConnectionId)) {
        this.remotePeerConnectionId = data().deepCopy(fields()[13].schema(), other.remotePeerConnectionId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sampleSeq)) {
        this.sampleSeq = data().deepCopy(fields()[14].schema(), other.sampleSeq);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[15].schema(), other.ssrc);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[16].schema(), other.packetsReceived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[17].schema(), other.packetsLost);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.jitter)) {
        this.jitter = data().deepCopy(fields()[18].schema(), other.jitter);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.packetsDiscarded)) {
        this.packetsDiscarded = data().deepCopy(fields()[19].schema(), other.packetsDiscarded);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.packetsRepaired)) {
        this.packetsRepaired = data().deepCopy(fields()[20].schema(), other.packetsRepaired);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.burstPacketsLost)) {
        this.burstPacketsLost = data().deepCopy(fields()[21].schema(), other.burstPacketsLost);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.burstPacketsDiscarded)) {
        this.burstPacketsDiscarded = data().deepCopy(fields()[22].schema(), other.burstPacketsDiscarded);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.burstLossCount)) {
        this.burstLossCount = data().deepCopy(fields()[23].schema(), other.burstLossCount);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.burstDiscardCount)) {
        this.burstDiscardCount = data().deepCopy(fields()[24].schema(), other.burstDiscardCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.burstLossRate)) {
        this.burstLossRate = data().deepCopy(fields()[25].schema(), other.burstLossRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.burstDiscardRate)) {
        this.burstDiscardRate = data().deepCopy(fields()[26].schema(), other.burstDiscardRate);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.gapLossRate)) {
        this.gapLossRate = data().deepCopy(fields()[27].schema(), other.gapLossRate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.gapDiscardRate)) {
        this.gapDiscardRate = data().deepCopy(fields()[28].schema(), other.gapDiscardRate);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.voiceActivityFlag)) {
        this.voiceActivityFlag = data().deepCopy(fields()[29].schema(), other.voiceActivityFlag);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[30].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.averageRtcpInterval)) {
        this.averageRtcpInterval = data().deepCopy(fields()[31].schema(), other.averageRtcpInterval);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[32].schema(), other.headerBytesReceived);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[33].schema(), other.fecPacketsReceived);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[34].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[35].schema(), other.bytesReceived);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.packetsFailedDecryption)) {
        this.packetsFailedDecryption = data().deepCopy(fields()[36].schema(), other.packetsFailedDecryption);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.packetsDuplicated)) {
        this.packetsDuplicated = data().deepCopy(fields()[37].schema(), other.packetsDuplicated);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.perDscpPacketsReceived)) {
        this.perDscpPacketsReceived = data().deepCopy(fields()[38].schema(), other.perDscpPacketsReceived);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[39].schema(), other.nackCount);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.totalProcessingDelay)) {
        this.totalProcessingDelay = data().deepCopy(fields()[40].schema(), other.totalProcessingDelay);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[41].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.jitterBufferDelay)) {
        this.jitterBufferDelay = data().deepCopy(fields()[42].schema(), other.jitterBufferDelay);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.jitterBufferEmittedCount)) {
        this.jitterBufferEmittedCount = data().deepCopy(fields()[43].schema(), other.jitterBufferEmittedCount);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[44].schema(), other.decoderImplementation);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.packetsSent)) {
        this.packetsSent = data().deepCopy(fields()[45].schema(), other.packetsSent);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.bytesSent)) {
        this.bytesSent = data().deepCopy(fields()[46].schema(), other.bytesSent);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.remoteTimestamp)) {
        this.remoteTimestamp = data().deepCopy(fields()[47].schema(), other.remoteTimestamp);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.reportsSent)) {
        this.reportsSent = data().deepCopy(fields()[48].schema(), other.reportsSent);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.ended)) {
        this.ended = data().deepCopy(fields()[49].schema(), other.ended);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[50].schema(), other.payloadType);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[51].schema(), other.mimeType);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.clockRate)) {
        this.clockRate = data().deepCopy(fields()[52].schema(), other.clockRate);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.channels)) {
        this.channels = data().deepCopy(fields()[53].schema(), other.channels);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sdpFmtpLine)) {
        this.sdpFmtpLine = data().deepCopy(fields()[54].schema(), other.sdpFmtpLine);
        fieldSetFlags()[54] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The unique identifier of the service
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The unique identifier of the service
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The unique identifier of the service
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The generated unique identifier of the call
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setCallId(java.lang.String value) {
      validate(fields()[4], value);
      this.callId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The generated unique identifier of the call
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'callId' field.
      * The generated unique identifier of the call
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * webrtc app provided room id
      * @return The value.
      */
    public java.lang.String getRoomId() {
      return roomId;
    }

    /**
      * Sets the value of the 'roomId' field.
      * webrtc app provided room id
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setRoomId(java.lang.String value) {
      validate(fields()[5], value);
      this.roomId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * webrtc app provided room id
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'roomId' field.
      * webrtc app provided room id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearRoomId() {
      roomId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * webrtc app provided user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setUserId(java.lang.String value) {
      validate(fields()[7], value);
      this.userId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * webrtc app provided user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userId' field.
      * webrtc app provided user identifier
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[8], value);
      this.peerConnectionId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @param value The value of 'label'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setLabel(java.lang.String value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * The webrtc app provided label the peer connection is labeled with
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'label' field.
      * The webrtc app provided label the peer connection is labeled with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * The id of the track
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }

    /**
      * Sets the value of the 'trackId' field.
      * The id of the track
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setTrackId(java.lang.String value) {
      validate(fields()[10], value);
      this.trackId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * The id of the track
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trackId' field.
      * The id of the track
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return The value.
      */
    public java.lang.String getRemoteUserId() {
      return remoteUserId;
    }

    /**
      * Sets the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @param value The value of 'remoteUserId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setRemoteUserId(java.lang.String value) {
      validate(fields()[11], value);
      this.remoteUserId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteUserId' field has been set.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return True if the 'remoteUserId' field has been set, false otherwise.
      */
    public boolean hasRemoteUserId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'remoteUserId' field.
      * The webrtc app provided user id the track belongs to, or if the webrtc app did not provided the observer tried to match it
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearRemoteUserId() {
      remoteUserId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @return The value.
      */
    public java.lang.String getRemoteClientId() {
      return remoteClientId;
    }

    /**
      * Sets the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @param value The value of 'remoteClientId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setRemoteClientId(java.lang.String value) {
      validate(fields()[12], value);
      this.remoteClientId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteClientId' field has been set.
      * The observer matched remote client Id
      * @return True if the 'remoteClientId' field has been set, false otherwise.
      */
    public boolean hasRemoteClientId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'remoteClientId' field.
      * The observer matched remote client Id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearRemoteClientId() {
      remoteClientId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @return The value.
      */
    public java.lang.String getRemotePeerConnectionId() {
      return remotePeerConnectionId;
    }

    /**
      * Sets the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @param value The value of 'remotePeerConnectionId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setRemotePeerConnectionId(java.lang.String value) {
      validate(fields()[13], value);
      this.remotePeerConnectionId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePeerConnectionId' field has been set.
      * The observer matched remote Peer Connection Id
      * @return True if the 'remotePeerConnectionId' field has been set, false otherwise.
      */
    public boolean hasRemotePeerConnectionId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'remotePeerConnectionId' field.
      * The observer matched remote Peer Connection Id
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearRemotePeerConnectionId() {
      remotePeerConnectionId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return The value.
      */
    public java.lang.Integer getSampleSeq() {
      return sampleSeq;
    }

    /**
      * Sets the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @param value The value of 'sampleSeq'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setSampleSeq(int value) {
      validate(fields()[14], value);
      this.sampleSeq = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleSeq' field has been set.
      * The sequence number of the sample the report is generated from
      * @return True if the 'sampleSeq' field has been set, false otherwise.
      */
    public boolean hasSampleSeq() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'sampleSeq' field.
      * The sequence number of the sample the report is generated from
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearSampleSeq() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return The value.
      */
    public java.lang.Long getSsrc() {
      return ssrc;
    }

    /**
      * Sets the value of the 'ssrc' field.
      * The RTP SSRC field
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setSsrc(long value) {
      validate(fields()[15], value);
      this.ssrc = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * The RTP SSRC field
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * The RTP SSRC field
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearSsrc() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }

    /**
      * Sets the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[16], value);
      this.packetsReceived = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * The total number of packets received on the corresponded synchronization source
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * The total number of packets received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }

    /**
      * Sets the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[17], value);
      this.packetsLost = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * The total number of bytes received on the corresponded synchronization source
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * The total number of bytes received on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }

    /**
      * Sets the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setJitter(java.lang.Double value) {
      validate(fields()[18], value);
      this.jitter = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * The corresponded synchronization source reported jitter
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'jitter' field.
      * The corresponded synchronization source reported jitter
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return The value.
      */
    public java.lang.Integer getPacketsDiscarded() {
      return packetsDiscarded;
    }

    /**
      * Sets the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @param value The value of 'packetsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[19], value);
      this.packetsDiscarded = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDiscarded' field has been set.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return True if the 'packetsDiscarded' field has been set, false otherwise.
      */
    public boolean hasPacketsDiscarded() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'packetsDiscarded' field.
      * The total number of packets missed the playout point and therefore discarded by the jitterbuffer
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsDiscarded() {
      packetsDiscarded = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsRepaired() {
      return packetsRepaired;
    }

    /**
      * Sets the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @param value The value of 'packetsRepaired'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsRepaired(java.lang.Integer value) {
      validate(fields()[20], value);
      this.packetsRepaired = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsRepaired' field has been set.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return True if the 'packetsRepaired' field has been set, false otherwise.
      */
    public boolean hasPacketsRepaired() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'packetsRepaired' field.
      * The total number of packets repaired by either FEC or due to retransmission on the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsRepaired() {
      packetsRepaired = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsLost() {
      return burstPacketsLost;
    }

    /**
      * Sets the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @param value The value of 'burstPacketsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstPacketsLost(java.lang.Integer value) {
      validate(fields()[21], value);
      this.burstPacketsLost = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsLost' field has been set.
      * The total number of packets lost in burst (RFC6958)
      * @return True if the 'burstPacketsLost' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsLost() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'burstPacketsLost' field.
      * The total number of packets lost in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstPacketsLost() {
      burstPacketsLost = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return The value.
      */
    public java.lang.Integer getBurstPacketsDiscarded() {
      return burstPacketsDiscarded;
    }

    /**
      * Sets the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @param value The value of 'burstPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[22], value);
      this.burstPacketsDiscarded = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'burstPacketsDiscarded' field has been set.
      * The total number of packets discarded in burst (RFC6958)
      * @return True if the 'burstPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasBurstPacketsDiscarded() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'burstPacketsDiscarded' field.
      * The total number of packets discarded in burst (RFC6958)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstPacketsDiscarded() {
      burstPacketsDiscarded = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstLossCount() {
      return burstLossCount;
    }

    /**
      * Sets the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @param value The value of 'burstLossCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstLossCount(java.lang.Integer value) {
      validate(fields()[23], value);
      this.burstLossCount = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossCount' field has been set.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return True if the 'burstLossCount' field has been set, false otherwise.
      */
    public boolean hasBurstLossCount() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'burstLossCount' field.
      * The total number of burst happened causes burstPacketsLost on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstLossCount() {
      burstLossCount = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Integer getBurstDiscardCount() {
      return burstDiscardCount;
    }

    /**
      * Sets the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @param value The value of 'burstDiscardCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstDiscardCount(java.lang.Integer value) {
      validate(fields()[24], value);
      this.burstDiscardCount = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardCount' field has been set.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return True if the 'burstDiscardCount' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardCount() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'burstDiscardCount' field.
      * The total number of burst happened causes burstPacketsDiscarded on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstDiscardCount() {
      burstDiscardCount = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstLossRate() {
      return burstLossRate;
    }

    /**
      * Sets the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstLossRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstLossRate(java.lang.Double value) {
      validate(fields()[25], value);
      this.burstLossRate = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'burstLossRate' field has been set.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstLossRate' field has been set, false otherwise.
      */
    public boolean hasBurstLossRate() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'burstLossRate' field.
      * The fraction of RTP packets lost during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstLossRate() {
      burstLossRate = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getBurstDiscardRate() {
      return burstDiscardRate;
    }

    /**
      * Sets the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'burstDiscardRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBurstDiscardRate(java.lang.Double value) {
      validate(fields()[26], value);
      this.burstDiscardRate = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'burstDiscardRate' field has been set.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'burstDiscardRate' field has been set, false otherwise.
      */
    public boolean hasBurstDiscardRate() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'burstDiscardRate' field.
      * The fraction of RTP packets discarded during bursts proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBurstDiscardRate() {
      burstDiscardRate = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapLossRate() {
      return gapLossRate;
    }

    /**
      * Sets the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapLossRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setGapLossRate(java.lang.Double value) {
      validate(fields()[27], value);
      this.gapLossRate = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'gapLossRate' field has been set.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapLossRate' field has been set, false otherwise.
      */
    public boolean hasGapLossRate() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'gapLossRate' field.
      * The fraction of RTP packets lost during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearGapLossRate() {
      gapLossRate = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return The value.
      */
    public java.lang.Double getGapDiscardRate() {
      return gapDiscardRate;
    }

    /**
      * Sets the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @param value The value of 'gapDiscardRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setGapDiscardRate(java.lang.Double value) {
      validate(fields()[28], value);
      this.gapDiscardRate = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'gapDiscardRate' field has been set.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return True if the 'gapDiscardRate' field has been set, false otherwise.
      */
    public boolean hasGapDiscardRate() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'gapDiscardRate' field.
      * The fraction of RTP packets discarded during gap proportionally to the total number of RTP packets expected in the bursts on the corresponding synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearGapDiscardRate() {
      gapDiscardRate = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return The value.
      */
    public java.lang.Boolean getVoiceActivityFlag() {
      return voiceActivityFlag;
    }

    /**
      * Sets the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @param value The value of 'voiceActivityFlag'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setVoiceActivityFlag(java.lang.Boolean value) {
      validate(fields()[29], value);
      this.voiceActivityFlag = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'voiceActivityFlag' field has been set.
      * Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return True if the 'voiceActivityFlag' field has been set, false otherwise.
      */
    public boolean hasVoiceActivityFlag() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'voiceActivityFlag' field.
      * Indicate if the last RTP packet received contained voice activity based on the presence of the V bit in the extension header
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearVoiceActivityFlag() {
      voiceActivityFlag = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Boolean getLastPacketReceivedTimestamp() {
      return lastPacketReceivedTimestamp;
    }

    /**
      * Sets the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @param value The value of 'lastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setLastPacketReceivedTimestamp(java.lang.Boolean value) {
      validate(fields()[30], value);
      this.lastPacketReceivedTimestamp = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketReceivedTimestamp' field has been set.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return True if the 'lastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketReceivedTimestamp() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'lastPacketReceivedTimestamp' field.
      * Represents the timestamp at which the last packet was received on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearLastPacketReceivedTimestamp() {
      lastPacketReceivedTimestamp = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getAverageRtcpInterval() {
      return averageRtcpInterval;
    }

    /**
      * Sets the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @param value The value of 'averageRtcpInterval'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setAverageRtcpInterval(java.lang.Double value) {
      validate(fields()[31], value);
      this.averageRtcpInterval = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'averageRtcpInterval' field has been set.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return True if the 'averageRtcpInterval' field has been set, false otherwise.
      */
    public boolean hasAverageRtcpInterval() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'averageRtcpInterval' field.
      * The average RTCP interval between two consecutive compound RTCP packets sent for the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearAverageRtcpInterval() {
      averageRtcpInterval = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Long getHeaderBytesReceived() {
      return headerBytesReceived;
    }

    /**
      * Sets the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @param value The value of 'headerBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setHeaderBytesReceived(java.lang.Long value) {
      validate(fields()[32], value);
      this.headerBytesReceived = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesReceived' field has been set.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return True if the 'headerBytesReceived' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesReceived() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'headerBytesReceived' field.
      * Total number of RTP header and padding bytes received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearHeaderBytesReceived() {
      headerBytesReceived = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getFecPacketsReceived() {
      return fecPacketsReceived;
    }

    /**
      * Sets the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'fecPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setFecPacketsReceived(java.lang.Integer value) {
      validate(fields()[33], value);
      this.fecPacketsReceived = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsReceived' field has been set.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'fecPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasFecPacketsReceived() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'fecPacketsReceived' field.
      * Total number of FEC packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearFecPacketsReceived() {
      fecPacketsReceived = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }

    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setFecPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[34], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * Total number of FEC packets discarded over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }

    /**
      * Sets the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[35], value);
      this.bytesReceived = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * Total number of bytes received over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return The value.
      */
    public java.lang.Integer getPacketsFailedDecryption() {
      return packetsFailedDecryption;
    }

    /**
      * Sets the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @param value The value of 'packetsFailedDecryption'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsFailedDecryption(java.lang.Integer value) {
      validate(fields()[36], value);
      this.packetsFailedDecryption = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsFailedDecryption' field has been set.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return True if the 'packetsFailedDecryption' field has been set, false otherwise.
      */
    public boolean hasPacketsFailedDecryption() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'packetsFailedDecryption' field.
      * Total number of packets received and failed to decrypt over the corresponding synchronization source (ssrc) due to 1) late arrive; 2) the target RTP packet has already been repaired.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsFailedDecryption() {
      packetsFailedDecryption = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return The value.
      */
    public java.lang.Integer getPacketsDuplicated() {
      return packetsDuplicated;
    }

    /**
      * Sets the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @param value The value of 'packetsDuplicated'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsDuplicated(java.lang.Integer value) {
      validate(fields()[37], value);
      this.packetsDuplicated = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsDuplicated' field has been set.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return True if the 'packetsDuplicated' field has been set, false otherwise.
      */
    public boolean hasPacketsDuplicated() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'packetsDuplicated' field.
      * Total number of packets identified as duplicated over the corresponding synchronization source (ssrc).
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsDuplicated() {
      packetsDuplicated = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getPerDscpPacketsReceived() {
      return perDscpPacketsReceived;
    }

    /**
      * Sets the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @param value The value of 'perDscpPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPerDscpPacketsReceived(java.lang.Double value) {
      validate(fields()[38], value);
      this.perDscpPacketsReceived = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'perDscpPacketsReceived' field has been set.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return True if the 'perDscpPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasPerDscpPacketsReceived() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'perDscpPacketsReceived' field.
      * The total number of DSCP flagged RTP packets received over the corresponding synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPerDscpPacketsReceived() {
      perDscpPacketsReceived = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }

    /**
      * Sets the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[39], value);
      this.nackCount = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * Count the total number of Negative ACKnowledgement (NACK) packets sent and belongs to the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return The value.
      */
    public java.lang.Double getTotalProcessingDelay() {
      return totalProcessingDelay;
    }

    /**
      * Sets the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @param value The value of 'totalProcessingDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setTotalProcessingDelay(java.lang.Double value) {
      validate(fields()[40], value);
      this.totalProcessingDelay = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'totalProcessingDelay' field has been set.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return True if the 'totalProcessingDelay' field has been set, false otherwise.
      */
    public boolean hasTotalProcessingDelay() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'totalProcessingDelay' field.
      * The total processing delay in seconds spend on buffering RTP packets from received up until packets are decoded
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearTotalProcessingDelay() {
      totalProcessingDelay = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @return The value.
      */
    public java.lang.Double getEstimatedPlayoutTimestamp() {
      return estimatedPlayoutTimestamp;
    }

    /**
      * Sets the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @param value The value of 'estimatedPlayoutTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setEstimatedPlayoutTimestamp(java.lang.Double value) {
      validate(fields()[41], value);
      this.estimatedPlayoutTimestamp = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedPlayoutTimestamp' field has been set.
      * The estimated playout time of the corresponded synchronization source
      * @return True if the 'estimatedPlayoutTimestamp' field has been set, false otherwise.
      */
    public boolean hasEstimatedPlayoutTimestamp() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'estimatedPlayoutTimestamp' field.
      * The estimated playout time of the corresponded synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearEstimatedPlayoutTimestamp() {
      estimatedPlayoutTimestamp = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return The value.
      */
    public java.lang.Double getJitterBufferDelay() {
      return jitterBufferDelay;
    }

    /**
      * Sets the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @param value The value of 'jitterBufferDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setJitterBufferDelay(java.lang.Double value) {
      validate(fields()[42], value);
      this.jitterBufferDelay = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferDelay' field has been set.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return True if the 'jitterBufferDelay' field has been set, false otherwise.
      */
    public boolean hasJitterBufferDelay() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'jitterBufferDelay' field.
      * The total time of RTP packets spent in jitterbuffer waiting for frame completion due to network uncertenity.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearJitterBufferDelay() {
      jitterBufferDelay = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Integer getJitterBufferEmittedCount() {
      return jitterBufferEmittedCount;
    }

    /**
      * Sets the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @param value The value of 'jitterBufferEmittedCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setJitterBufferEmittedCount(java.lang.Integer value) {
      validate(fields()[43], value);
      this.jitterBufferEmittedCount = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'jitterBufferEmittedCount' field has been set.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return True if the 'jitterBufferEmittedCount' field has been set, false otherwise.
      */
    public boolean hasJitterBufferEmittedCount() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'jitterBufferEmittedCount' field.
      * The total number of audio samples or video frames that have come out of the jitter buffer on the corresponded synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearJitterBufferEmittedCount() {
      jitterBufferEmittedCount = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @return The value.
      */
    public java.lang.String getDecoderImplementation() {
      return decoderImplementation;
    }

    /**
      * Sets the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @param value The value of 'decoderImplementation'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setDecoderImplementation(java.lang.String value) {
      validate(fields()[44], value);
      this.decoderImplementation = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'decoderImplementation' field has been set.
      * Indicate the name of the decoder implementation library
      * @return True if the 'decoderImplementation' field has been set, false otherwise.
      */
    public boolean hasDecoderImplementation() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'decoderImplementation' field.
      * Indicate the name of the decoder implementation library
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearDecoderImplementation() {
      decoderImplementation = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public java.lang.Integer getPacketsSent() {
      return packetsSent;
    }

    /**
      * Sets the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'packetsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPacketsSent(java.lang.Integer value) {
      validate(fields()[45], value);
      this.packetsSent = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsSent' field has been set.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'packetsSent' field has been set, false otherwise.
      */
    public boolean hasPacketsSent() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'packetsSent' field.
      * Total number of RTP packets sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPacketsSent() {
      packetsSent = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return The value.
      */
    public java.lang.Long getBytesSent() {
      return bytesSent;
    }

    /**
      * Sets the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @param value The value of 'bytesSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setBytesSent(java.lang.Long value) {
      validate(fields()[46], value);
      this.bytesSent = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesSent' field has been set.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return True if the 'bytesSent' field has been set, false otherwise.
      */
    public boolean hasBytesSent() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'bytesSent' field.
      * Total number of payload bytes sent at the remote endpoint to this endpoint on this synchronization source
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearBytesSent() {
      bytesSent = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return The value.
      */
    public java.lang.Double getRemoteTimestamp() {
      return remoteTimestamp;
    }

    /**
      * Sets the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @param value The value of 'remoteTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setRemoteTimestamp(java.lang.Double value) {
      validate(fields()[47], value);
      this.remoteTimestamp = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteTimestamp' field has been set.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return True if the 'remoteTimestamp' field has been set, false otherwise.
      */
    public boolean hasRemoteTimestamp() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'remoteTimestamp' field.
      * The timestamp corresnponds to the time in UTC Epoch the remote endpoint reported the statistics belong to the sender side and correspond to the synchronization source (ssrc)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearRemoteTimestamp() {
      remoteTimestamp = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return The value.
      */
    public java.lang.Integer getReportsSent() {
      return reportsSent;
    }

    /**
      * Sets the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @param value The value of 'reportsSent'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setReportsSent(java.lang.Integer value) {
      validate(fields()[48], value);
      this.reportsSent = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'reportsSent' field has been set.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return True if the 'reportsSent' field has been set, false otherwise.
      */
    public boolean hasReportsSent() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'reportsSent' field.
      * The number of SR reports the remote endpoint sent corresponded to synchronization source (ssrc) this report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearReportsSent() {
      reportsSent = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return The value.
      */
    public java.lang.Boolean getEnded() {
      return ended;
    }

    /**
      * Sets the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @param value The value of 'ended'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setEnded(java.lang.Boolean value) {
      validate(fields()[49], value);
      this.ended = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'ended' field has been set.
      * Flag represents if the receiver ended the media stream track or not.
      * @return True if the 'ended' field has been set, false otherwise.
      */
    public boolean hasEnded() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'ended' field.
      * Flag represents if the receiver ended the media stream track or not.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearEnded() {
      ended = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return The value.
      */
    public java.lang.Integer getPayloadType() {
      return payloadType;
    }

    /**
      * Sets the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setPayloadType(java.lang.Integer value) {
      validate(fields()[50], value);
      this.payloadType = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The type of the payload the RTP packet SSRC belongs to
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The type of the payload the RTP packet SSRC belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return The value.
      */
    public java.lang.String getMimeType() {
      return mimeType;
    }

    /**
      * Sets the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setMimeType(java.lang.String value) {
      validate(fields()[51], value);
      this.mimeType = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * the MIME type of the codec (e.g.: video/vp8)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return The value.
      */
    public java.lang.Long getClockRate() {
      return clockRate;
    }

    /**
      * Sets the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @param value The value of 'clockRate'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setClockRate(java.lang.Long value) {
      validate(fields()[52], value);
      this.clockRate = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'clockRate' field has been set.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return True if the 'clockRate' field has been set, false otherwise.
      */
    public boolean hasClockRate() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'clockRate' field.
      * The negotiated clock rate the RTP timestamp is generated of
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearClockRate() {
      clockRate = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return The value.
      */
    public java.lang.Integer getChannels() {
      return channels;
    }

    /**
      * Sets the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setChannels(java.lang.Integer value) {
      validate(fields()[53], value);
      this.channels = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'channels' field.
      * The number of channels for audio is used (in stereo it is 2, otherwise it is most likely null)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return The value.
      */
    public java.lang.String getSdpFmtpLine() {
      return sdpFmtpLine;
    }

    /**
      * Sets the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @param value The value of 'sdpFmtpLine'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder setSdpFmtpLine(java.lang.String value) {
      validate(fields()[54], value);
      this.sdpFmtpLine = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'sdpFmtpLine' field has been set.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return True if the 'sdpFmtpLine' field has been set, false otherwise.
      */
    public boolean hasSdpFmtpLine() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'sdpFmtpLine' field.
      * The a=fmtp line in the SDP corresponding to the codec
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundAudioTrackReport.Builder clearSdpFmtpLine() {
      sdpFmtpLine = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    @Override
    public InboundAudioTrackReport build() {
      try {
        InboundAudioTrackReport record = new InboundAudioTrackReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.callId = fieldSetFlags()[4] ? this.callId : (java.lang.String) defaultValue(fields()[4]);
        record.roomId = fieldSetFlags()[5] ? this.roomId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.userId = fieldSetFlags()[7] ? this.userId : (java.lang.String) defaultValue(fields()[7]);
        record.peerConnectionId = fieldSetFlags()[8] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.String) defaultValue(fields()[9]);
        record.trackId = fieldSetFlags()[10] ? this.trackId : (java.lang.String) defaultValue(fields()[10]);
        record.remoteUserId = fieldSetFlags()[11] ? this.remoteUserId : (java.lang.String) defaultValue(fields()[11]);
        record.remoteClientId = fieldSetFlags()[12] ? this.remoteClientId : (java.lang.String) defaultValue(fields()[12]);
        record.remotePeerConnectionId = fieldSetFlags()[13] ? this.remotePeerConnectionId : (java.lang.String) defaultValue(fields()[13]);
        record.sampleSeq = fieldSetFlags()[14] ? this.sampleSeq : (java.lang.Integer) defaultValue(fields()[14]);
        record.ssrc = fieldSetFlags()[15] ? this.ssrc : (java.lang.Long) defaultValue(fields()[15]);
        record.packetsReceived = fieldSetFlags()[16] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[16]);
        record.packetsLost = fieldSetFlags()[17] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[17]);
        record.jitter = fieldSetFlags()[18] ? this.jitter : (java.lang.Double) defaultValue(fields()[18]);
        record.packetsDiscarded = fieldSetFlags()[19] ? this.packetsDiscarded : (java.lang.Integer) defaultValue(fields()[19]);
        record.packetsRepaired = fieldSetFlags()[20] ? this.packetsRepaired : (java.lang.Integer) defaultValue(fields()[20]);
        record.burstPacketsLost = fieldSetFlags()[21] ? this.burstPacketsLost : (java.lang.Integer) defaultValue(fields()[21]);
        record.burstPacketsDiscarded = fieldSetFlags()[22] ? this.burstPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[22]);
        record.burstLossCount = fieldSetFlags()[23] ? this.burstLossCount : (java.lang.Integer) defaultValue(fields()[23]);
        record.burstDiscardCount = fieldSetFlags()[24] ? this.burstDiscardCount : (java.lang.Integer) defaultValue(fields()[24]);
        record.burstLossRate = fieldSetFlags()[25] ? this.burstLossRate : (java.lang.Double) defaultValue(fields()[25]);
        record.burstDiscardRate = fieldSetFlags()[26] ? this.burstDiscardRate : (java.lang.Double) defaultValue(fields()[26]);
        record.gapLossRate = fieldSetFlags()[27] ? this.gapLossRate : (java.lang.Double) defaultValue(fields()[27]);
        record.gapDiscardRate = fieldSetFlags()[28] ? this.gapDiscardRate : (java.lang.Double) defaultValue(fields()[28]);
        record.voiceActivityFlag = fieldSetFlags()[29] ? this.voiceActivityFlag : (java.lang.Boolean) defaultValue(fields()[29]);
        record.lastPacketReceivedTimestamp = fieldSetFlags()[30] ? this.lastPacketReceivedTimestamp : (java.lang.Boolean) defaultValue(fields()[30]);
        record.averageRtcpInterval = fieldSetFlags()[31] ? this.averageRtcpInterval : (java.lang.Double) defaultValue(fields()[31]);
        record.headerBytesReceived = fieldSetFlags()[32] ? this.headerBytesReceived : (java.lang.Long) defaultValue(fields()[32]);
        record.fecPacketsReceived = fieldSetFlags()[33] ? this.fecPacketsReceived : (java.lang.Integer) defaultValue(fields()[33]);
        record.fecPacketsDiscarded = fieldSetFlags()[34] ? this.fecPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[34]);
        record.bytesReceived = fieldSetFlags()[35] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[35]);
        record.packetsFailedDecryption = fieldSetFlags()[36] ? this.packetsFailedDecryption : (java.lang.Integer) defaultValue(fields()[36]);
        record.packetsDuplicated = fieldSetFlags()[37] ? this.packetsDuplicated : (java.lang.Integer) defaultValue(fields()[37]);
        record.perDscpPacketsReceived = fieldSetFlags()[38] ? this.perDscpPacketsReceived : (java.lang.Double) defaultValue(fields()[38]);
        record.nackCount = fieldSetFlags()[39] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[39]);
        record.totalProcessingDelay = fieldSetFlags()[40] ? this.totalProcessingDelay : (java.lang.Double) defaultValue(fields()[40]);
        record.estimatedPlayoutTimestamp = fieldSetFlags()[41] ? this.estimatedPlayoutTimestamp : (java.lang.Double) defaultValue(fields()[41]);
        record.jitterBufferDelay = fieldSetFlags()[42] ? this.jitterBufferDelay : (java.lang.Double) defaultValue(fields()[42]);
        record.jitterBufferEmittedCount = fieldSetFlags()[43] ? this.jitterBufferEmittedCount : (java.lang.Integer) defaultValue(fields()[43]);
        record.decoderImplementation = fieldSetFlags()[44] ? this.decoderImplementation : (java.lang.String) defaultValue(fields()[44]);
        record.packetsSent = fieldSetFlags()[45] ? this.packetsSent : (java.lang.Integer) defaultValue(fields()[45]);
        record.bytesSent = fieldSetFlags()[46] ? this.bytesSent : (java.lang.Long) defaultValue(fields()[46]);
        record.remoteTimestamp = fieldSetFlags()[47] ? this.remoteTimestamp : (java.lang.Double) defaultValue(fields()[47]);
        record.reportsSent = fieldSetFlags()[48] ? this.reportsSent : (java.lang.Integer) defaultValue(fields()[48]);
        record.ended = fieldSetFlags()[49] ? this.ended : (java.lang.Boolean) defaultValue(fields()[49]);
        record.payloadType = fieldSetFlags()[50] ? this.payloadType : (java.lang.Integer) defaultValue(fields()[50]);
        record.mimeType = fieldSetFlags()[51] ? this.mimeType : (java.lang.String) defaultValue(fields()[51]);
        record.clockRate = fieldSetFlags()[52] ? this.clockRate : (java.lang.Long) defaultValue(fields()[52]);
        record.channels = fieldSetFlags()[53] ? this.channels : (java.lang.Integer) defaultValue(fields()[53]);
        record.sdpFmtpLine = fieldSetFlags()[54] ? this.sdpFmtpLine : (java.lang.String) defaultValue(fields()[54]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
