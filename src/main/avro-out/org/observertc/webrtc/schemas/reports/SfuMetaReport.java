/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Metadata belongs to SFUs */
@org.apache.avro.specific.AvroGenerated
public class SfuMetaReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1134523418756729917L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SfuMetaReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"Metadata belongs to SFUs\",\"fields\":[{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The service id the report belongs to\"},{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The media unit id the report belongs to\",\"default\":null},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"sfuId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The id of the Sfu\",\"default\":null},{\"name\":\"callId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The callId the event belongs to\",\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the client\",\"default\":null},{\"name\":\"peerConnectionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The unique identifier of the peer connection\",\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of the meta data reported for the peer connection\",\"default\":null},{\"name\":\"payload\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The payload for the metadata reported for the peeer connection\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The service id the report belongs to */
   private java.lang.String serviceId;
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The id of the Sfu */
   private java.lang.String sfuId;
  /** The callId the event belongs to */
   private java.lang.String callId;
  /** The generated unique identifier of the client */
   private java.lang.String clientId;
  /** The unique identifier of the peer connection */
   private java.lang.String peerConnectionId;
  /** The type of the meta data reported for the peer connection */
   private java.lang.String type;
  /** The payload for the metadata reported for the peeer connection */
   private java.lang.String payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SfuMetaReport() {}

  /**
   * All-args constructor.
   * @param serviceId The service id the report belongs to
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param sfuId The id of the Sfu
   * @param callId The callId the event belongs to
   * @param clientId The generated unique identifier of the client
   * @param peerConnectionId The unique identifier of the peer connection
   * @param type The type of the meta data reported for the peer connection
   * @param payload The payload for the metadata reported for the peeer connection
   */
  public SfuMetaReport(java.lang.String serviceId, java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String sfuId, java.lang.String callId, java.lang.String clientId, java.lang.String peerConnectionId, java.lang.String type, java.lang.String payload) {
    this.serviceId = serviceId;
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.sfuId = sfuId;
    this.callId = callId;
    this.clientId = clientId;
    this.peerConnectionId = peerConnectionId;
    this.type = type;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return mediaUnitId;
    case 2: return marker;
    case 3: return timestamp;
    case 4: return sfuId;
    case 5: return callId;
    case 6: return clientId;
    case 7: return peerConnectionId;
    case 8: return type;
    case 9: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.String)value$; break;
    case 1: mediaUnitId = (java.lang.String)value$; break;
    case 2: marker = (java.lang.String)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: sfuId = (java.lang.String)value$; break;
    case 5: callId = (java.lang.String)value$; break;
    case 6: clientId = (java.lang.String)value$; break;
    case 7: peerConnectionId = (java.lang.String)value$; break;
    case 8: type = (java.lang.String)value$; break;
    case 9: payload = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return The service id the report belongs to
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'sfuId' field.
   * @return The id of the Sfu
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }


  /**
   * Gets the value of the 'callId' field.
   * @return The callId the event belongs to
   */
  public java.lang.String getCallId() {
    return callId;
  }


  /**
   * Gets the value of the 'clientId' field.
   * @return The generated unique identifier of the client
   */
  public java.lang.String getClientId() {
    return clientId;
  }


  /**
   * Gets the value of the 'peerConnectionId' field.
   * @return The unique identifier of the peer connection
   */
  public java.lang.String getPeerConnectionId() {
    return peerConnectionId;
  }


  /**
   * Gets the value of the 'type' field.
   * @return The type of the meta data reported for the peer connection
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Gets the value of the 'payload' field.
   * @return The payload for the metadata reported for the peeer connection
   */
  public java.lang.String getPayload() {
    return payload;
  }


  /**
   * Creates a new SfuMetaReport RecordBuilder.
   * @return A new SfuMetaReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder();
  }

  /**
   * Creates a new SfuMetaReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SfuMetaReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder other) {
    return new org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder(other);
  }

  /**
   * Creates a new SfuMetaReport RecordBuilder by copying an existing SfuMetaReport instance.
   * @param other The existing instance to copy.
   * @return A new SfuMetaReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SfuMetaReport other) {
    return new org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder(other);
  }

  /**
   * RecordBuilder for SfuMetaReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SfuMetaReport>
    implements org.apache.avro.data.RecordBuilder<SfuMetaReport> {

    /** The service id the report belongs to */
    private java.lang.String serviceId;
    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The id of the Sfu */
    private java.lang.String sfuId;
    /** The callId the event belongs to */
    private java.lang.String callId;
    /** The generated unique identifier of the client */
    private java.lang.String clientId;
    /** The unique identifier of the peer connection */
    private java.lang.String peerConnectionId;
    /** The type of the meta data reported for the peer connection */
    private java.lang.String type;
    /** The payload for the metadata reported for the peeer connection */
    private java.lang.String payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[4].schema(), other.sfuId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[7].schema(), other.peerConnectionId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.payload)) {
        this.payload = data().deepCopy(fields()[9].schema(), other.payload);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SfuMetaReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SfuMetaReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[1].schema(), other.mediaUnitId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marker)) {
        this.marker = data().deepCopy(fields()[2].schema(), other.marker);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[4].schema(), other.sfuId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.callId)) {
        this.callId = data().deepCopy(fields()[5].schema(), other.callId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientId)) {
        this.clientId = data().deepCopy(fields()[6].schema(), other.clientId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.peerConnectionId)) {
        this.peerConnectionId = data().deepCopy(fields()[7].schema(), other.peerConnectionId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.payload)) {
        this.payload = data().deepCopy(fields()[9].schema(), other.payload);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }

    /**
      * Sets the value of the 'serviceId' field.
      * The service id the report belongs to
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setServiceId(java.lang.String value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * The service id the report belongs to
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * The service id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[1], value);
      this.mediaUnitId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setMarker(java.lang.String value) {
      validate(fields()[2], value);
      this.marker = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The id of the Sfu
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }

    /**
      * Sets the value of the 'sfuId' field.
      * The id of the Sfu
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[4], value);
      this.sfuId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The id of the Sfu
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The id of the Sfu
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'callId' field.
      * The callId the event belongs to
      * @return The value.
      */
    public java.lang.String getCallId() {
      return callId;
    }

    /**
      * Sets the value of the 'callId' field.
      * The callId the event belongs to
      * @param value The value of 'callId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setCallId(java.lang.String value) {
      validate(fields()[5], value);
      this.callId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'callId' field has been set.
      * The callId the event belongs to
      * @return True if the 'callId' field has been set, false otherwise.
      */
    public boolean hasCallId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'callId' field.
      * The callId the event belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearCallId() {
      callId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setClientId(java.lang.String value) {
      validate(fields()[6], value);
      this.clientId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * The generated unique identifier of the client
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientId' field.
      * The generated unique identifier of the client
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return The value.
      */
    public java.lang.String getPeerConnectionId() {
      return peerConnectionId;
    }

    /**
      * Sets the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @param value The value of 'peerConnectionId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setPeerConnectionId(java.lang.String value) {
      validate(fields()[7], value);
      this.peerConnectionId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionId' field has been set.
      * The unique identifier of the peer connection
      * @return True if the 'peerConnectionId' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'peerConnectionId' field.
      * The unique identifier of the peer connection
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearPeerConnectionId() {
      peerConnectionId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setType(java.lang.String value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the meta data reported for the peer connection
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the meta data reported for the peer connection
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @return The value.
      */
    public java.lang.String getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder setPayload(java.lang.String value) {
      validate(fields()[9], value);
      this.payload = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * The payload for the metadata reported for the peeer connection
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'payload' field.
      * The payload for the metadata reported for the peeer connection
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuMetaReport.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public SfuMetaReport build() {
      try {
        SfuMetaReport record = new SfuMetaReport();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.String) defaultValue(fields()[0]);
        record.mediaUnitId = fieldSetFlags()[1] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[1]);
        record.marker = fieldSetFlags()[2] ? this.marker : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.sfuId = fieldSetFlags()[4] ? this.sfuId : (java.lang.String) defaultValue(fields()[4]);
        record.callId = fieldSetFlags()[5] ? this.callId : (java.lang.String) defaultValue(fields()[5]);
        record.clientId = fieldSetFlags()[6] ? this.clientId : (java.lang.String) defaultValue(fields()[6]);
        record.peerConnectionId = fieldSetFlags()[7] ? this.peerConnectionId : (java.lang.String) defaultValue(fields()[7]);
        record.type = fieldSetFlags()[8] ? this.type : (java.lang.String) defaultValue(fields()[8]);
        record.payload = fieldSetFlags()[9] ? this.payload : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
