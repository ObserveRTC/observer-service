/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Events happened in calls. */
@org.apache.avro.specific.AvroGenerated
public class SfuEventReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2204352058084535174L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SfuEventReport\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"doc\":\"Events happened in calls.\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The media unit id the report belongs to\",\"default\":null},{\"name\":\"marker\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The marker the originated sample is reported with\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)\"},{\"name\":\"sfuId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The generated unique identifier of the SFU\",\"default\":null},{\"name\":\"transportId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"SFU provided transport identifier\",\"default\":null},{\"name\":\"rtpStreamId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Unique identifier of the RTP stream the event is related to\",\"default\":null},{\"name\":\"sctpStreamId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Unique identifier of the SCTP stream the event is related to\",\"default\":null},{\"name\":\"SSRC\",\"type\":[\"null\",\"long\"],\"doc\":\"The SSRC identifier of the RTP stream realted to\",\"default\":null},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the event\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the human readable message of the event\",\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the value of the event\",\"default\":null},{\"name\":\"attachments\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"attachment the event may created with\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The media unit id the report belongs to */
   private java.lang.String mediaUnitId;
  /** The marker the originated sample is reported with */
   private java.lang.String marker;
  /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
   private long timestamp;
  /** The generated unique identifier of the SFU */
   private java.lang.String sfuId;
  /** SFU provided transport identifier */
   private java.lang.String transportId;
  /** Unique identifier of the RTP stream the event is related to */
   private java.lang.String rtpStreamId;
  /** Unique identifier of the SCTP stream the event is related to */
   private java.lang.String sctpStreamId;
  /** The SSRC identifier of the RTP stream realted to */
   private java.lang.Long SSRC;
  /** The name of the event */
   private java.lang.String name;
  /** the human readable message of the event */
   private java.lang.String message;
  /** the value of the event */
   private java.lang.String value;
  /** attachment the event may created with */
   private java.lang.String attachments;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SfuEventReport() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The media unit id the report belongs to
   * @param marker The marker the originated sample is reported with
   * @param timestamp The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   * @param sfuId The generated unique identifier of the SFU
   * @param transportId SFU provided transport identifier
   * @param rtpStreamId Unique identifier of the RTP stream the event is related to
   * @param sctpStreamId Unique identifier of the SCTP stream the event is related to
   * @param SSRC The SSRC identifier of the RTP stream realted to
   * @param name The name of the event
   * @param message the human readable message of the event
   * @param value the value of the event
   * @param attachments attachment the event may created with
   */
  public SfuEventReport(java.lang.String mediaUnitId, java.lang.String marker, java.lang.Long timestamp, java.lang.String sfuId, java.lang.String transportId, java.lang.String rtpStreamId, java.lang.String sctpStreamId, java.lang.Long SSRC, java.lang.String name, java.lang.String message, java.lang.String value, java.lang.String attachments) {
    this.mediaUnitId = mediaUnitId;
    this.marker = marker;
    this.timestamp = timestamp;
    this.sfuId = sfuId;
    this.transportId = transportId;
    this.rtpStreamId = rtpStreamId;
    this.sctpStreamId = sctpStreamId;
    this.SSRC = SSRC;
    this.name = name;
    this.message = message;
    this.value = value;
    this.attachments = attachments;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return marker;
    case 2: return timestamp;
    case 3: return sfuId;
    case 4: return transportId;
    case 5: return rtpStreamId;
    case 6: return sctpStreamId;
    case 7: return SSRC;
    case 8: return name;
    case 9: return message;
    case 10: return value;
    case 11: return attachments;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaUnitId = (java.lang.String)value$; break;
    case 1: marker = (java.lang.String)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: sfuId = (java.lang.String)value$; break;
    case 4: transportId = (java.lang.String)value$; break;
    case 5: rtpStreamId = (java.lang.String)value$; break;
    case 6: sctpStreamId = (java.lang.String)value$; break;
    case 7: SSRC = (java.lang.Long)value$; break;
    case 8: name = (java.lang.String)value$; break;
    case 9: message = (java.lang.String)value$; break;
    case 10: value = (java.lang.String)value$; break;
    case 11: attachments = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The media unit id the report belongs to
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }


  /**
   * Gets the value of the 'marker' field.
   * @return The marker the originated sample is reported with
   */
  public java.lang.String getMarker() {
    return marker;
  }


  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Gets the value of the 'sfuId' field.
   * @return The generated unique identifier of the SFU
   */
  public java.lang.String getSfuId() {
    return sfuId;
  }


  /**
   * Gets the value of the 'transportId' field.
   * @return SFU provided transport identifier
   */
  public java.lang.String getTransportId() {
    return transportId;
  }


  /**
   * Gets the value of the 'rtpStreamId' field.
   * @return Unique identifier of the RTP stream the event is related to
   */
  public java.lang.String getRtpStreamId() {
    return rtpStreamId;
  }


  /**
   * Gets the value of the 'sctpStreamId' field.
   * @return Unique identifier of the SCTP stream the event is related to
   */
  public java.lang.String getSctpStreamId() {
    return sctpStreamId;
  }


  /**
   * Gets the value of the 'SSRC' field.
   * @return The SSRC identifier of the RTP stream realted to
   */
  public java.lang.Long getSSRC() {
    return SSRC;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The name of the event
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'message' field.
   * @return the human readable message of the event
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Gets the value of the 'value' field.
   * @return the value of the event
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Gets the value of the 'attachments' field.
   * @return attachment the event may created with
   */
  public java.lang.String getAttachments() {
    return attachments;
  }


  /**
   * Creates a new SfuEventReport RecordBuilder.
   * @return A new SfuEventReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuEventReport.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.SfuEventReport.Builder();
  }

  /**
   * Creates a new SfuEventReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SfuEventReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuEventReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SfuEventReport.Builder other) {
    return new org.observertc.webrtc.schemas.reports.SfuEventReport.Builder(other);
  }

  /**
   * Creates a new SfuEventReport RecordBuilder by copying an existing SfuEventReport instance.
   * @param other The existing instance to copy.
   * @return A new SfuEventReport RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.SfuEventReport.Builder newBuilder(org.observertc.webrtc.schemas.reports.SfuEventReport other) {
    return new org.observertc.webrtc.schemas.reports.SfuEventReport.Builder(other);
  }

  /**
   * RecordBuilder for SfuEventReport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SfuEventReport>
    implements org.apache.avro.data.RecordBuilder<SfuEventReport> {

    /** The media unit id the report belongs to */
    private java.lang.String mediaUnitId;
    /** The marker the originated sample is reported with */
    private java.lang.String marker;
    /** The timestamp when the corresponded data is generated for the report (UTC Epoch in ms) */
    private long timestamp;
    /** The generated unique identifier of the SFU */
    private java.lang.String sfuId;
    /** SFU provided transport identifier */
    private java.lang.String transportId;
    /** Unique identifier of the RTP stream the event is related to */
    private java.lang.String rtpStreamId;
    /** Unique identifier of the SCTP stream the event is related to */
    private java.lang.String sctpStreamId;
    /** The SSRC identifier of the RTP stream realted to */
    private java.lang.Long SSRC;
    /** The name of the event */
    private java.lang.String name;
    /** the human readable message of the event */
    private java.lang.String message;
    /** the value of the event */
    private java.lang.String value;
    /** attachment the event may created with */
    private java.lang.String attachments;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SfuEventReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.marker)) {
        this.marker = data().deepCopy(fields()[1].schema(), other.marker);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[3].schema(), other.sfuId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transportId)) {
        this.transportId = data().deepCopy(fields()[4].schema(), other.transportId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[5].schema(), other.rtpStreamId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sctpStreamId)) {
        this.sctpStreamId = data().deepCopy(fields()[6].schema(), other.sctpStreamId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.SSRC)) {
        this.SSRC = data().deepCopy(fields()[7].schema(), other.SSRC);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.name)) {
        this.name = data().deepCopy(fields()[8].schema(), other.name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.message)) {
        this.message = data().deepCopy(fields()[9].schema(), other.message);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.value)) {
        this.value = data().deepCopy(fields()[10].schema(), other.value);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.attachments)) {
        this.attachments = data().deepCopy(fields()[11].schema(), other.attachments);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SfuEventReport instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.SfuEventReport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.marker)) {
        this.marker = data().deepCopy(fields()[1].schema(), other.marker);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sfuId)) {
        this.sfuId = data().deepCopy(fields()[3].schema(), other.sfuId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transportId)) {
        this.transportId = data().deepCopy(fields()[4].schema(), other.transportId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rtpStreamId)) {
        this.rtpStreamId = data().deepCopy(fields()[5].schema(), other.rtpStreamId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sctpStreamId)) {
        this.sctpStreamId = data().deepCopy(fields()[6].schema(), other.sctpStreamId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.SSRC)) {
        this.SSRC = data().deepCopy(fields()[7].schema(), other.SSRC);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.name)) {
        this.name = data().deepCopy(fields()[8].schema(), other.name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.message)) {
        this.message = data().deepCopy(fields()[9].schema(), other.message);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.value)) {
        this.value = data().deepCopy(fields()[10].schema(), other.value);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.attachments)) {
        this.attachments = data().deepCopy(fields()[11].schema(), other.attachments);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }

    /**
      * Sets the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * The media unit id the report belongs to
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * The media unit id the report belongs to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return The value.
      */
    public java.lang.String getMarker() {
      return marker;
    }

    /**
      * Sets the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @param value The value of 'marker'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setMarker(java.lang.String value) {
      validate(fields()[1], value);
      this.marker = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'marker' field has been set.
      * The marker the originated sample is reported with
      * @return True if the 'marker' field has been set, false otherwise.
      */
    public boolean hasMarker() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'marker' field.
      * The marker the originated sample is reported with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearMarker() {
      marker = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp when the corresponded data is generated for the report (UTC Epoch in ms)
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sfuId' field.
      * The generated unique identifier of the SFU
      * @return The value.
      */
    public java.lang.String getSfuId() {
      return sfuId;
    }

    /**
      * Sets the value of the 'sfuId' field.
      * The generated unique identifier of the SFU
      * @param value The value of 'sfuId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setSfuId(java.lang.String value) {
      validate(fields()[3], value);
      this.sfuId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sfuId' field has been set.
      * The generated unique identifier of the SFU
      * @return True if the 'sfuId' field has been set, false otherwise.
      */
    public boolean hasSfuId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sfuId' field.
      * The generated unique identifier of the SFU
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearSfuId() {
      sfuId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * SFU provided transport identifier
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }

    /**
      * Sets the value of the 'transportId' field.
      * SFU provided transport identifier
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setTransportId(java.lang.String value) {
      validate(fields()[4], value);
      this.transportId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * SFU provided transport identifier
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transportId' field.
      * SFU provided transport identifier
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rtpStreamId' field.
      * Unique identifier of the RTP stream the event is related to
      * @return The value.
      */
    public java.lang.String getRtpStreamId() {
      return rtpStreamId;
    }

    /**
      * Sets the value of the 'rtpStreamId' field.
      * Unique identifier of the RTP stream the event is related to
      * @param value The value of 'rtpStreamId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setRtpStreamId(java.lang.String value) {
      validate(fields()[5], value);
      this.rtpStreamId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rtpStreamId' field has been set.
      * Unique identifier of the RTP stream the event is related to
      * @return True if the 'rtpStreamId' field has been set, false otherwise.
      */
    public boolean hasRtpStreamId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rtpStreamId' field.
      * Unique identifier of the RTP stream the event is related to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearRtpStreamId() {
      rtpStreamId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sctpStreamId' field.
      * Unique identifier of the SCTP stream the event is related to
      * @return The value.
      */
    public java.lang.String getSctpStreamId() {
      return sctpStreamId;
    }

    /**
      * Sets the value of the 'sctpStreamId' field.
      * Unique identifier of the SCTP stream the event is related to
      * @param value The value of 'sctpStreamId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setSctpStreamId(java.lang.String value) {
      validate(fields()[6], value);
      this.sctpStreamId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sctpStreamId' field has been set.
      * Unique identifier of the SCTP stream the event is related to
      * @return True if the 'sctpStreamId' field has been set, false otherwise.
      */
    public boolean hasSctpStreamId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sctpStreamId' field.
      * Unique identifier of the SCTP stream the event is related to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearSctpStreamId() {
      sctpStreamId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'SSRC' field.
      * The SSRC identifier of the RTP stream realted to
      * @return The value.
      */
    public java.lang.Long getSSRC() {
      return SSRC;
    }

    /**
      * Sets the value of the 'SSRC' field.
      * The SSRC identifier of the RTP stream realted to
      * @param value The value of 'SSRC'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setSSRC(java.lang.Long value) {
      validate(fields()[7], value);
      this.SSRC = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'SSRC' field has been set.
      * The SSRC identifier of the RTP stream realted to
      * @return True if the 'SSRC' field has been set, false otherwise.
      */
    public boolean hasSSRC() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'SSRC' field.
      * The SSRC identifier of the RTP stream realted to
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearSSRC() {
      SSRC = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * The name of the event
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * The name of the event
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setName(java.lang.String value) {
      validate(fields()[8], value);
      this.name = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The name of the event
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'name' field.
      * The name of the event
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearName() {
      name = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * the human readable message of the event
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * the human readable message of the event
      * @param value The value of 'message'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setMessage(java.lang.String value) {
      validate(fields()[9], value);
      this.message = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * the human readable message of the event
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'message' field.
      * the human readable message of the event
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearMessage() {
      message = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * the value of the event
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * the value of the event
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setValue(java.lang.String value) {
      validate(fields()[10], value);
      this.value = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * the value of the event
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'value' field.
      * the value of the event
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearValue() {
      value = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'attachments' field.
      * attachment the event may created with
      * @return The value.
      */
    public java.lang.String getAttachments() {
      return attachments;
    }

    /**
      * Sets the value of the 'attachments' field.
      * attachment the event may created with
      * @param value The value of 'attachments'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder setAttachments(java.lang.String value) {
      validate(fields()[11], value);
      this.attachments = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'attachments' field has been set.
      * attachment the event may created with
      * @return True if the 'attachments' field has been set, false otherwise.
      */
    public boolean hasAttachments() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'attachments' field.
      * attachment the event may created with
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.SfuEventReport.Builder clearAttachments() {
      attachments = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public SfuEventReport build() {
      try {
        SfuEventReport record = new SfuEventReport();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[0]);
        record.marker = fieldSetFlags()[1] ? this.marker : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.sfuId = fieldSetFlags()[3] ? this.sfuId : (java.lang.String) defaultValue(fields()[3]);
        record.transportId = fieldSetFlags()[4] ? this.transportId : (java.lang.String) defaultValue(fields()[4]);
        record.rtpStreamId = fieldSetFlags()[5] ? this.rtpStreamId : (java.lang.String) defaultValue(fields()[5]);
        record.sctpStreamId = fieldSetFlags()[6] ? this.sctpStreamId : (java.lang.String) defaultValue(fields()[6]);
        record.SSRC = fieldSetFlags()[7] ? this.SSRC : (java.lang.Long) defaultValue(fields()[7]);
        record.name = fieldSetFlags()[8] ? this.name : (java.lang.String) defaultValue(fields()[8]);
        record.message = fieldSetFlags()[9] ? this.message : (java.lang.String) defaultValue(fields()[9]);
        record.value = fieldSetFlags()[10] ? this.value : (java.lang.String) defaultValue(fields()[10]);
        record.attachments = fieldSetFlags()[11] ? this.attachments : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
