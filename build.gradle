plugins {
    id("io.micronaut.application") version "1.2.0"
    id("com.google.cloud.tools.jib") version "2.6.0"
    id "com.commercehub.gradle.plugin.avro" version "0.99.99"
}

// target version:
//version = "H"
// all client library compiled:
//version = "hydrogen:deuterium"
// latest version
//version = "latest"
version = "1.0.0-beta"
group = "org.observertc.webrtc.observer"

repositories {
    mavenCentral()
    jcenter()
}

avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
    outputCharacterEncoding = "UTF-8"
}

def generateAvro = tasks.register("generateAvro", com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/avro-schemas")
    outputDir = file("src/main/avro-out/")
//    outputDir = file("src/dest")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.observertc.webrtc.observer.*")
    }
}

dependencies {
    implementation 'javax.inject:javax.inject:1'
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.dekorate:prometheus-annotations:${dekorateVersion}")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.jmx:micronaut-jmx")

    implementation("io.dekorate:prometheus-annotations:${dekorateVersion}")
    runtimeOnly("ch.qos.logback:logback-classic")
//    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.0.0'
// https://mvnrepository.com/artifact/org.glassfish.tyrus.bundles/tyrus-standalone-client
    implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '2.0.1'


    // Exposed Metrics Client Libraries
    // https://micronaut-projects.github.io/micronaut-micrometer/latest/guide/index.html
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.security:micronaut-security-jwt")

    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")

    compile group: 'org.apache.avro', name: 'avro', version: '1.10.2'
    testImplementation group: 'org.jeasy', name: 'easy-random-core', version: '5.0.0'
    // ------------- Hazelcast -----------
    compile group: 'com.hazelcast', name: 'hazelcast', version: '4.1'

    // --------- Connector dependencies -----
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.8.0'
    compile 'org.mongodb:mongodb-driver-sync:4.2.2'

    // ------- Render Views --------
    implementation("io.micronaut.views:micronaut-views-thymeleaf")

    // --------- Authentication provider -----
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator:3.0.0")

    testCompile "org.mockito:mockito-core:2.+"

}


application {
    mainClass.set("org.observertc.webrtc.observer.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

//task createProperties {
//    doLast {
//            new File("$buildDir/resources/main/version.properties").withWriter { w ->
//                Properties p = new Properties()
//                p['version'] = project.version.toString()
//                p.store w, null
//            }
//    }
//}

task createVersion {
    File outputDir = file("$projectDir/src/main/resources")
    outputs.dir outputDir
    doFirst {
        outputDir.exists() || outputDir.mkdirs()
        new File(outputDir, "service.properties").withWriter { w ->
                Properties p = new Properties()
                p['version'] = project.version.toString()
                p.store w, null
            }
    }
}

compileJava.dependsOn createVersion

tasks {
    dockerBuild{
        images = ["observertc/observer:$project.version"]
    }

    jib {
        to {
            image = "gcr.io/myapp/jib-image"
        }
    }
}

